From: <Saved by Blink>
Snapshot-Content-Location: https://fasterthanli.me/articles/a-half-hour-to-learn-rust
Subject: A half-hour to learn Rust
Date: Fri, 18 Apr 2025 00:14:09 +0700
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--lX7hvS8JKTK2i2c4McTi97SzhrYPP8rs0wQBsPYWAd----"


------MultipartBoundary--lX7hvS8JKTK2i2c4McTi97SzhrYPP8rs0wQBsPYWAd----
Content-Type: text/html
Content-ID: <frame-7545F83176EDCAA2E04C90B139728074@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://fasterthanli.me/articles/a-half-hour-to-learn-rust

<!DOCTYPE html><html lang=3D"en" class=3D"theme-device"><head><meta http-eq=
uiv=3D"Content-Type" content=3D"text/html; charset=3DUTF-8">
    <title>A half-hour to learn Rust</title>

   =20
    <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=
=3D1.0, maximum-scale=3D6">

   =20
    <link rel=3D"icon" type=3D"image/jxl" href=3D"https://cdn.fasterthanli.=
me/content/img/favicon~72ac4ba96bed6dad.jxl">
    <link rel=3D"icon" type=3D"image/webp" href=3D"https://cdn.fasterthanli=
.me/content/img/favicon~679ae9c272874bba.webp">
    <link rel=3D"icon" type=3D"image/avif" href=3D"https://cdn.fasterthanli=
.me/content/img/favicon~fc5931f361bf516c.avif">

    <meta property=3D"og:site_name" content=3D"fasterthanli.me">
    <meta property=3D"og:locale" content=3D"en-us">
    <meta property=3D"og:type" content=3D"article">
    <meta property=3D"og:url" content=3D"">
    <meta name=3D"theme-color" content=3D"#f64c4c">
    <meta property=3D"og:title" content=3D"A half-hour to learn Rust"><meta=
 property=3D"og:image" content=3D"https://cdn.fasterthanli.me/content/img/o=
g-image~f3ae02495a258733.png">
    <meta property=3D"og:image:width" content=3D"1200">
    <meta property=3D"og:image:height" content=3D"630">

    <meta property=3D"og:description" content=3D"In order to increase fluen=
cy in a programming language, one has to read a lot of it.
But how can you read a lot of it if you don=E2=80=99t know what it means?
In this article, instead of focusing on one or...">
    <meta name=3D"description" content=3D"In order to increase fluency in a=
 programming language, one has to read a lot of it.
But how can you read a lot of it if you don=E2=80=99t know what it means?
In this article, instead of focusing on one or...">
    <meta name=3D"author" content=3D"Amos Wenger"><meta name=3D"article:tag=
" content=3D"rust"><meta property=3D"article:published_time" content=3D"202=
0-01-27T14:30:00Z"><link href=3D"https://fasterthanli.me/index.xml" type=3D=
"application/atom+xml" rel=3D"alternate" title=3D"Sitewide Atom feed">

   =20
   =20
   =20

   =20
<meta property=3D"home:page-path" content=3D"/content/articles/a-half-hour-=
to-learn-rust/_index.md"><!-- inserted by home -->
<link rel=3D"stylesheet" href=3D"https://cdn.fasterthanli.me/dist/assets/bu=
ndle-BLH2wHVi.css"></head>

<body>
<div class=3D"body-inner">
<div class=3D"content">
  <a id=3D"lith-page-top" href=3D"https://fasterthanli.me/articles/a-half-h=
our-to-learn-rust#lith-page-top"></a>
  <main>
    <div class=3D"page-html-spacer"></div>

   =20
    <div class=3D"page-html has-toc">
      <div id=3D"page-topnav" class=3D"page-topnav"><div class=3D"container=
 home-survives-turbonav svelte-1w3u5c8"><a href=3D"https://fasterthanli.me/=
" class=3D"svelte-1w3u5c8">Home</a> <form id=3D"page-search-form" action=3D=
"https://fasterthanli.me/search" method=3D"GET" class=3D"svelte-1w3u5c8"><d=
iv class=3D"search-container svelte-1tjjmrr" tabindex=3D"-1"><input type=3D=
"search" placeholder=3D"Search... (=E2=8C=98 K)" class=3D"svelte-1tjjmrr"> =
<!----></div><!----></form> <span class=3D"filler svelte-1w3u5c8"></span> <=
a class=3D"svelte-18ly3b7" role=3D"button" tabindex=3D"0"><!----> <span cla=
ss=3D"label svelte-18ly3b7">Log in</span><!----></a><!----> <!----><!----><=
/div></div>

     =20
 =20

 =20
 =20

  <div class=3D"page-html-padded markup-container page-markup">

 =20
   =20
    <div class=3D"page-thumbnail-container main-thumbnail">
      <picture><source type=3D"image/jxl" media=3D"(max-width: 400px)" srcs=
et=3D"https://cdn.fasterthanli.me/content/img/og-image~9d6b57ee2a858118.w40=
0.jxl 1x,https://cdn.fasterthanli.me/content/img/og-image~d93c17f0aa6a0d2a.=
w800.jxl 2x"><source type=3D"image/jxl" media=3D"(max-width: 900px)" srcset=
=3D"https://cdn.fasterthanli.me/content/img/og-image~f43f6d3b5c31fbe8.w900.=
jxl 1x"><source type=3D"image/jxl" srcset=3D"https://cdn.fasterthanli.me/co=
ntent/img/og-image~07d1d1a25b919c2d.jxl 1x,https://cdn.fasterthanli.me/cont=
ent/img/og-image~07d1d1a25b919c2d.jxl 2x"><source type=3D"image/avif" media=
=3D"(max-width: 400px)" srcset=3D"https://cdn.fasterthanli.me/content/img/o=
g-image~1049a586bace61af.w400.avif 1x,https://cdn.fasterthanli.me/content/i=
mg/og-image~c522d1f5315cf033.w800.avif 2x"><source type=3D"image/avif" medi=
a=3D"(max-width: 900px)" srcset=3D"https://cdn.fasterthanli.me/content/img/=
og-image~57e99b696c1809b1.w900.avif 1x"><source type=3D"image/avif" srcset=
=3D"https://cdn.fasterthanli.me/content/img/og-image~bdabd4c3f4d467d0.avif =
1x,https://cdn.fasterthanli.me/content/img/og-image~bdabd4c3f4d467d0.avif 2=
x"><source type=3D"image/webp" media=3D"(max-width: 400px)" srcset=3D"https=
://cdn.fasterthanli.me/content/img/og-image~c7e879fd9ecea162.w400.webp 1x,h=
ttps://cdn.fasterthanli.me/content/img/og-image~436ebca2e10c5180.w800.webp =
2x"><source type=3D"image/webp" media=3D"(max-width: 900px)" srcset=3D"http=
s://cdn.fasterthanli.me/content/img/og-image~f9bafc65122a7461.w900.webp 1x"=
><source type=3D"image/webp" srcset=3D"https://cdn.fasterthanli.me/content/=
img/og-image~fd3f4393e6d3f4f9.webp 1x,https://cdn.fasterthanli.me/content/i=
mg/og-image~fd3f4393e6d3f4f9.webp 2x"><img src=3D"https://cdn.fasterthanli.=
me/content/img/og-image~07d1d1a25b919c2d.jxl" loading=3D"lazy" width=3D"120=
0" height=3D"630" data-kind=3D"media" data-input-path=3D"/content/img/og-im=
age.png" class=3D"page-thumbnail"></picture>
    </div>
 =20


   =20
   =20

   =20
   =20
    <div class=3D"page-metadata">
        <a class=3D"author-attribution" href=3D"https://fasterthanli.me/abo=
ut">
       	<picture>
       =20
        <source type=3D"image/jxl" srcset=3D"https://cdn.fasterthanli.me/co=
ntent/img/favicon~72ac4ba96bed6dad.jxl">
        <source type=3D"image/avif" srcset=3D"https://cdn.fasterthanli.me/c=
ontent/img/favicon~fc5931f361bf516c.avif">
        <source type=3D"image/webp" srcset=3D"https://cdn.fasterthanli.me/c=
ontent/img/favicon~679ae9c272874bba.webp">
        <img class=3D"author-avatar" alt=3D"Avatar for fasterthanlime" src=
=3D"https://cdn.fasterthanli.me/content/img/favicon~72ac4ba96bed6dad.jxl" l=
oading=3D"lazy" width=3D"28" height=3D"28">
       	</picture>
       	<span>
           	fasterthanlime
       	</span>
        </a>
    </div>

   =20
    <div class=3D"page-metadata with-reading-time">
       =20
        <span>Jan 27, 2020</span>
       =20
        =20

        <span class=3D"reading-time">
        <img class=3D"inline-icon" id=3D"clock-icon" src=3D"https://cdn.fas=
terthanli.me/content/img/clock~ea83208fa4bce57a.svg" alt=3D"clock icon" wid=
th=3D"1.1em" height=3D"1.1em">
        <abbr title=3D"Estimated reading time, at 220 words per minute, whe=
re one word =3D 5 characters">
           =20
                27 min
           =20
        </abbr>
    </span>
       =20
    <span class=3D"tags">
       =20
           =20
                <span><a href=3D"https://fasterthanli.me/tags/rust">#rust</=
a></span>
           =20
           =20
       =20
    </span>
        <span class=3D"indicators">
   =20
   =20
   =20

   =20
</span>
    </div>=20
    =20

   =20
   =20

    <h1 class=3D"page-title">
        A half-hour to learn Rust
    </h1>

   =20

   =20
       =20
            <div class=3D"disclosure paragraph-like">
                <p>
                    =F0=9F=91=8B This page was last updated ~5 years ago. J=
ust so you know.
                </p>
            </div>
   =20

   =20
       =20
<p id=3D"sponsor-list" class=3D"sponsor-list">
    Thanks to my sponsors:
    <span id=3D"visible-sponsors">
   =20
    Xavier Groleau, Shane Lillie, Jean-David Gadina, Joseph Montanaro, Mark=
, bbutkovic, Ivo Murrell, Herman J. Radtke III, Bob Ippolito, Alex Krantz, =
qrpth, Ren=C3=A9 Ribaud, Sindre Johansen, Rapha=C3=ABl Th=C3=A9riault, genn=
y, Michael Mrozek, Guillaume Demonet, Elijah Voigt, Noel, compwhizii
        and <a href=3D"https://fasterthanli.me/articles/a-half-hour-to-lear=
n-rust#" id=3D"show-all-sponsors"><span id=3D"more-sponsors-count">264</spa=
n> more</a>
   =20
    </span>
    <span id=3D"all-sponsors" style=3D"display: none;">Xavier Groleau, Shan=
e Lillie, Jean-David Gadina, Joseph Montanaro, Mark, bbutkovic, Ivo Murrell=
, Herman J. Radtke III, Bob Ippolito, Alex Krantz, qrpth, Ren=C3=A9 Ribaud,=
 Sindre Johansen, Rapha=C3=ABl Th=C3=A9riault, genny, Michael Mrozek, Guill=
aume Demonet, Elijah Voigt, Noel, compwhizii, xales, Mat=C4=9Bj Volf, Simon=
 Menke, Adam Gutglick, callym, Dom, ShikChen, Laine Taffin Altman, Adri=C3=
=A1n Garnier Arti=C3=B1ano, Neil Blakey-Milner, Radu Matei, Max von Forell,=
 Hadrien G., Beat Scherrer, Jim, Matt Heise, Pete LeVasseur, David White, G=
, Chirag Jain, David E Disch, hardfist, Marcus Griep, Rufus Cable, Yann Sch=
wartz, Max Bruckner, Luiz Ferraz, Ben Mitchell, Aalekh Patel, Morgan Rosenk=
ranz, Benjamin R=C3=B6jder Delnavaz, Brandon Pi=C3=B1a, medzernik, Sarah Be=
rrettini, Peter Shih, Sonny Scroggin, Michael, playest, Duane Sibilly, Rich=
ard Stephens, Richard Pringle, Torben Clasen, Wojciech Smo=C5=82ka, Malik B=
ougacha, Valentin Mariette, Matthew Planchard, Isak Sunde Singh, Sam Leonar=
d, Tyler Bloom, Guilherme Neubaner, Michael Alyn Miller, Zeeger Lubsen, Yuf=
an Lou, Andy F, Beth Rennie, villem, avborhanian, Mike English, Stephan Buy=
s, Walther, ZacJW, hgranthorner, Mason Ginter, C J Silverio, Jesse Luehrs, =
pinkhatbeard, (18D)eezNuts, Cass, Manuel Hutter, Marcus Brito, Olly Swanson=
, Mario Fleischhacker, Cole Tobin, Lennart Oldenburg, teor, J=C3=B6rn Huxho=
rn, Vincent, Damir Vandic, Zoran Zaric, Ronen Cohen, Ross Williams, AdrianE=
ddy, James Rhodes, Marco Carmosino, Philipp Gniewosz, notryanb, Scott Steel=
e, Boris Dolgov, Matt Jackson, ACRL, Marcin Ko=C5=82odziej, Santiago Lema, =
Paul Horn, Nicholas, Yuriy Taraday, Samit Basu, Timoth=C3=A9e Gerber, Dave =
Minter, Matt Campbell, Jon Gjengset, Aleksandre Khokhiashvili, std__mpa, yo=
u got maiL, Philipp Hatt, Guillaume E, Braidon Whatley, old.woman.josiah, S=
eniorMars, Jake Demarest-Mays, Ives van Hoorne, Borys Minaiev, Lena Sch=C3=
=B6nburg, Evan Relf, Andronik, Daniel Strittmatter, Daniel Silverstone, Jos=
hua Roesslein, traxys, jatescher, Victor Song, Dylan Anthony, Elnath, Mikke=
l Rasmussen, Micha=C5=82 Bartoszkiewicz, Max Heaton, Urs Metz, Johan Saf, M=
att Jadczak, Tyler Schmidtke, Olivia Crain, Geoff Cant, Luke Konopka, Josia=
h Bull, Nicholas Orta, Horv=C3=A1th-L=C3=A1z=C3=A1r P=C3=A9ter, Aiden Scand=
ella, Zachary Thomas, ofrighil, Ahmad Alhashemi, Egor Ternovoi, Tobias Bahl=
s, Christoph Grabo, Luuk, Tabitha, Lev Khoroshansky, budrick, Marky Mark, I=
nteger 32, LLC, John VanEnk, Toon Willems, Diego Roig, Garret Kelly, Mattia=
 Valzelli, Gorazd Brumen, Tiziano Santoro, Chris Emery, anichno, Wyatt Herk=
amp, Dennis Henderson, Dirkjan Ochtman, Makoto Nakashima, Eugene Bulkin, Be=
rkus Decker, Paul Marques Mota, Jack Duvall, Scott Sanderson, Ryan, Alex Ru=
dy, Geoffroy Couprie, Michal Ho=C5=A1na, Das G=C3=BCrteltier, WeblWabl, Dan=
iel Papp, Justin Ossevoort, belzael, Mikko Lepp=C3=A4nen, Henrik Tudborg, C=
hris Biscardi, Chris, Josh Triplett, Ben Wishovich, Zaki, Kristoffer Winthe=
r Balling, Nyefan, Romain Kelifa, Johnathan Pagnutti, Cole Kurkowski, Thor =
Kamphefner, Mathias Brossard, Geoffrey Thomas, Ronen Ulanovsky, Thehbadger,=
 clement, Mark Tomlin, Raine Godmaire, Aljaz Erzen, Astrid, Julian Schmid, =
Sawyer Knoblich, David Barsky, Tanner Muro, Adam Lassek, Kamran Khan, Ula, =
Christian Bourjau, Jack Maguire, Mark Old, Luke Yue, Mateusz Wykurz, Chris =
Thackrey, Sylvie Nightshade, Leigh Oliver, Antoine Rouaze, Steven Pham, Nic=
olas Riebesel, Pete Bevin, Marty Penner, David Cornu, Kyle Lacy, prairiewol=
f, Chris Sims, Gioele Pannetto, Colin VanDervoort, Niels Abildgaard, Marcus=
 Griep, Jan De Landtsheer, Lucille Blumire, Chris Walker, Blake Johnson, Ch=
ristopher Valerio, Antoine Boegli, Enrico Zschemisch, Lyssieth, Andy Gocke,=
 Elendol, Ian McLinden, Andrew Neth, Daniel Wagner-Hall, jer, Matthew T, Di=
mitri Merejkowsky, Jelle Besseling, Yves, L0r3m1p5um, Marc-Andre Giroux, An=
toine PESTEL-ROPARS, Hamilton Chapman, Seth, James Brown, Kai Kaufman, Core=
y Alexander, Guy Waldman, Paige Ruten, Micha=C5=82 Zalewski, Senyo Simpson,=
 John Horowitz, Jonathan Adams, Marie Janssen, Romet Tagobert, Jan-Stefan J=
anetzky, Xirvik Servers, James Leitch, Sean Bryant, Alan O'Donnell</span>

   =20
</p>



    =20

 =20
   =20

    <p data-bo=3D"201">In order to increase fluency in a programming langua=
ge, one has to read a lot of
it.</p>

<p data-bo=3D"287">But how can you read a lot of it if you don=E2=80=99t kn=
ow what it means?</p>

<p data-bo=3D"354">In this article, instead of focusing on one or two conce=
pts, I=E2=80=99ll try to go
through as many Rust snippets as I can, and explain what the keywords and
symbols they contain mean.</p>

<p data-bo=3D"532">Ready? Go!</p>

<a id=3D"variable-bindings" href=3D"https://fasterthanli.me/articles/a-half=
-hour-to-learn-rust#variable-bindings" class=3D"anchor"><h2>Variable bindin=
gs</h2></a>
<a id=3D"the-let-keyword" href=3D"https://fasterthanli.me/articles/a-half-h=
our-to-learn-rust#the-let-keyword" class=3D"anchor"><h3>The <code>let</code=
> keyword</h3></a>
<p data-bo=3D"589"><code>let</code> introduces a variable binding:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"627"><code class=3D"scroll-wrapp=
er"><i class=3D"hh4">let</i> x<i class=3D"hh9">;</i> <i class=3D"hh18">// d=
eclare "x"</i>
x =3D <i class=3D"hh1">42</i><i class=3D"hh9">;</i> <i class=3D"hh18">// as=
sign 42 to "x"</i>
</code></figure><p data-bo=3D"690">This can also be written as a single lin=
e:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"734"><code class=3D"scroll-wrapp=
er"><i class=3D"hh4">let</i> x =3D <i class=3D"hh1">42</i><i class=3D"hh9">=
;</i>
</code></figure><a id=3D"type-annotation" href=3D"https://fasterthanli.me/a=
rticles/a-half-hour-to-learn-rust#type-annotation" class=3D"anchor"><h3>Typ=
e annotation</h3></a>
<p data-bo=3D"780">You can specify the variable=E2=80=99s type explicitly w=
ith <code>:</code>, that=E2=80=99s a type annotation:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"864"><code class=3D"scroll-wrapp=
er"><i class=3D"hh4">let</i> x<i class=3D"hh9">:</i> <i class=3D"hh14">i32<=
/i><i class=3D"hh9">;</i> <i class=3D"hh18">// `i32` is a signed 32-bit int=
eger</i>
x =3D <i class=3D"hh1">42</i><i class=3D"hh9">;</i>

<i class=3D"hh18">// there's i8, i16, i32, i64, i128</i>
<i class=3D"hh18">//    also u8, u16, u32, u64, u128 for unsigned</i>
</code></figure><p data-bo=3D"1017">This can also be written as a single li=
ne:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"1061"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">let</i> x<i class=3D"hh9">:</i> <i class=3D"hh14">i32=
</i> =3D <i class=3D"hh1">42</i><i class=3D"hh9">;</i>
</code></figure><a id=3D"uninitialized-variables" href=3D"https://fastertha=
nli.me/articles/a-half-hour-to-learn-rust#uninitialized-variables" class=3D=
"anchor"><h3>Uninitialized variables</h3></a>
<p data-bo=3D"1120">If you declare a name and initialize it later, the comp=
iler will prevent you
from using it before it=E2=80=99s initialized.</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"1237"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">let</i> x<i class=3D"hh9">;</i>
<i class=3D"hh3">foobar</i><i class=3D"hh8">(</i>x<i class=3D"hh8">)</i><i =
class=3D"hh9">;</i> <i class=3D"hh18">// error: borrow of possibly-uninitia=
lized variable: `x`</i>
x =3D <i class=3D"hh1">42</i><i class=3D"hh9">;</i>
</code></figure><p data-bo=3D"1333">However, doing this is completely fine:=
</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"1374"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">let</i> x<i class=3D"hh9">;</i>
x =3D <i class=3D"hh1">42</i><i class=3D"hh9">;</i>
<i class=3D"hh3">foobar</i><i class=3D"hh8">(</i>x<i class=3D"hh8">)</i><i =
class=3D"hh9">;</i> <i class=3D"hh18">// the type of `x` will be inferred f=
rom here</i>
</code></figure><a id=3D"throwing-values-away" href=3D"https://fasterthanli=
.me/articles/a-half-hour-to-learn-rust#throwing-values-away" class=3D"ancho=
r"><h3>Throwing values away</h3></a>
<p data-bo=3D"1485">The underscore <code>_</code> is a special name - or ra=
ther, a =E2=80=9Clack of name=E2=80=9D. It
basically means to throw away something:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"1598"><code class=3D"scroll-wrap=
per"><i class=3D"hh18">// this does *nothing* because 42 is a constant</i>
<i class=3D"hh4">let</i> _ =3D <i class=3D"hh1">42</i><i class=3D"hh9">;</i=
>

<i class=3D"hh18">// this calls `get_thing` but throws away its result</i>
<i class=3D"hh4">let</i> _ =3D <i class=3D"hh3">get_thing</i><i class=3D"hh=
8">(</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
</code></figure><p data-bo=3D"1746">Names that <em>start</em> with an under=
score are regular names, it=E2=80=99s just that
the compiler won=E2=80=99t warn about them being unused:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"1868"><code class=3D"scroll-wrap=
per"><i class=3D"hh18">// we may use `_x` eventually, but our code is a wor=
k-in-progress</i>
<i class=3D"hh18">// and we just wanted to get rid of a compiler warning fo=
r now.</i>
<i class=3D"hh4">let</i> _x =3D <i class=3D"hh1">42</i><i class=3D"hh9">;</=
i>
</code></figure><a id=3D"shadowing-bindings" href=3D"https://fasterthanli.m=
e/articles/a-half-hour-to-learn-rust#shadowing-bindings" class=3D"anchor"><=
h3>Shadowing bindings</h3></a>
<p data-bo=3D"2048">Separate bindings with the same name can be introduced =
- you can <em>shadow</em>
a variable binding:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"2143"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">let</i> x =3D <i class=3D"hh1">13</i><i class=3D"hh9"=
>;</i>
<i class=3D"hh4">let</i> x =3D x + <i class=3D"hh1">3</i><i class=3D"hh9">;=
</i>
<i class=3D"hh18">// using `x` after that line only refers to the second `x=
`,</i>
<i class=3D"hh18">//</i>
<i class=3D"hh18">// although the first `x` still exists (it'll be dropped<=
/i>
<i class=3D"hh18">// when going out of scope), you can no longer refer to i=
t.</i>
</code></figure><a id=3D"tuples" href=3D"https://fasterthanli.me/articles/a=
-half-hour-to-learn-rust#tuples" class=3D"anchor"><h2>Tuples</h2></a>
<p data-bo=3D"2374">Rust has tuples, which you can think of as =E2=80=9Cfix=
ed-length collections
of values of different types=E2=80=9D.</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"2475"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">let</i> pair =3D <i class=3D"hh8">(</i><i class=3D"hh=
10">'a'</i><i class=3D"hh9">,</i> <i class=3D"hh1">17</i><i class=3D"hh8">)=
</i><i class=3D"hh9">;</i>
pair<i class=3D"hh9">.</i><i class=3D"hh1">0</i><i class=3D"hh9">;</i> <i c=
lass=3D"hh18">// this is 'a'</i>
pair<i class=3D"hh9">.</i><i class=3D"hh1">1</i><i class=3D"hh9">;</i> <i c=
lass=3D"hh18">// this is 17</i>
</code></figure><p data-bo=3D"2555">If we really wanted to annotate the typ=
e of <code>pair</code>, we would write:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"2624"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">let</i> pair<i class=3D"hh9">:</i> <i class=3D"hh8">(=
</i><i class=3D"hh14">char</i><i class=3D"hh9">,</i> <i class=3D"hh14">i32<=
/i><i class=3D"hh8">)</i> =3D <i class=3D"hh8">(</i><i class=3D"hh10">'a'</=
i><i class=3D"hh9">,</i> <i class=3D"hh1">17</i><i class=3D"hh8">)</i><i cl=
ass=3D"hh9">;</i>
</code></figure><a id=3D"destructuring-tuples" href=3D"https://fasterthanli=
.me/articles/a-half-hour-to-learn-rust#destructuring-tuples" class=3D"ancho=
r"><h3>Destructuring tuples</h3></a>
<p data-bo=3D"2698">Tuples can be <em>destructured</em> when doing an assig=
nment, which means
they=E2=80=99re broken down into their individual fields:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"2816"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">let</i> <i class=3D"hh8">(</i>some_char<i class=3D"hh=
9">,</i> some_int<i class=3D"hh8">)</i> =3D <i class=3D"hh8">(</i><i class=
=3D"hh10">'a'</i><i class=3D"hh9">,</i> <i class=3D"hh1">17</i><i class=3D"=
hh8">)</i><i class=3D"hh9">;</i>
<i class=3D"hh18">// now, `some_char` is 'a', and `some_int` is 17</i>
</code></figure><p data-bo=3D"2917">This is especially useful when a functi=
on returns a tuple:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"2977"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">let</i> <i class=3D"hh8">(</i>left<i class=3D"hh9">,<=
/i> right<i class=3D"hh8">)</i> =3D slice<i class=3D"hh9">.</i><i class=3D"=
hh3">split_at</i><i class=3D"hh8">(</i>middle<i class=3D"hh8">)</i><i class=
=3D"hh9">;</i>
</code></figure><p data-bo=3D"3034">Of course, when destructuring a tuple, =
<code>_</code> can be used to throw away part of it:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"3116"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">let</i> <i class=3D"hh8">(</i>_<i class=3D"hh9">,</i>=
 right<i class=3D"hh8">)</i> =3D slice<i class=3D"hh9">.</i><i class=3D"hh3=
">split_at</i><i class=3D"hh8">(</i>middle<i class=3D"hh8">)</i><i class=3D=
"hh9">;</i>
</code></figure><a id=3D"statements" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#statements" class=3D"anchor"><h2>Statements</h=
2></a>
<p data-bo=3D"3185">The semi-colon marks the end of a statement:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"3231"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">let</i> x =3D <i class=3D"hh1">3</i><i class=3D"hh9">=
;</i>
<i class=3D"hh4">let</i> y =3D <i class=3D"hh1">5</i><i class=3D"hh9">;</i>
<i class=3D"hh4">let</i> z =3D y + x<i class=3D"hh9">;</i>
</code></figure><p data-bo=3D"3281">Which means statements can span multipl=
e lines:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"3330"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">let</i> x =3D <i class=3D"hh3">vec</i><i class=3D"hh3=
">!</i><i class=3D"hh8">[</i><i class=3D"hh1">1</i><i class=3D"hh9">,</i> <=
i class=3D"hh1">2</i><i class=3D"hh9">,</i> <i class=3D"hh1">3</i><i class=
=3D"hh9">,</i> <i class=3D"hh1">4</i><i class=3D"hh9">,</i> <i class=3D"hh1=
">5</i><i class=3D"hh9">,</i> <i class=3D"hh1">6</i><i class=3D"hh9">,</i> =
<i class=3D"hh1">7</i><i class=3D"hh9">,</i> <i class=3D"hh1">8</i><i class=
=3D"hh8">]</i><i class=3D"hh9"></i>
    <i class=3D"hh9">.</i><i class=3D"hh3">iter</i><i class=3D"hh8">(</i><i=
 class=3D"hh8">)</i>
    <i class=3D"hh9">.</i><i class=3D"hh3">map</i><i class=3D"hh8">(</i>|x|=
 x + <i class=3D"hh1">3</i><i class=3D"hh8">)</i>
    <i class=3D"hh9">.</i><i class=3D"hh3">fold</i><i class=3D"hh8">(</i><i=
 class=3D"hh1">0</i><i class=3D"hh9">,</i> |x<i class=3D"hh9">,</i> y| x + =
y<i class=3D"hh8">)</i><i class=3D"hh9">;</i>
</code></figure><p data-bo=3D"3440">(We=E2=80=99ll go over what those actua=
lly mean later).</p>

<a id=3D"functions" href=3D"https://fasterthanli.me/articles/a-half-hour-to=
-learn-rust#functions" class=3D"anchor"><h2>Functions</h2></a>
<p data-bo=3D"3503"><code>fn</code> declares a function.</p>

<p data-bo=3D"3530">Here=E2=80=99s a void function:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"3555"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">fn</i> <i class=3D"hh3">greet</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"Hi there!"</i><i class=3D"hh8">)</i><i class=3D"hh9"></=
i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"3610">And here=E2=80=99s a function that retu=
rns a 32-bit signed integer. The
arrow indicates its return type:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"3708"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">fn</i> <i class=3D"hh3">fair_dice_roll</i><i class=3D=
"hh8">(</i><i class=3D"hh8">)</i> -&gt; <i class=3D"hh14">i32</i> <i class=
=3D"hh8">{</i>
    <i class=3D"hh1">4</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"blocks" href=3D"https://fasterthanli.me/articles/a=
-half-hour-to-learn-rust#blocks" class=3D"anchor"><h2>Blocks</h2></a>
<p data-bo=3D"3769">A pair of brackets declares a block, which has its own =
scope:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"3832"><code class=3D"scroll-wrap=
per"><i class=3D"hh18">// This prints "in", then "out"</i>
<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> x =3D <i class=3D"hh10">"out"</i><i class=3D"h=
h9">;</i>
    <i class=3D"hh8">{</i>
        <i class=3D"hh18">// this is a different `x`</i>
        <i class=3D"hh4">let</i> x =3D <i class=3D"hh10">"in"</i><i class=
=3D"hh9">;</i>
        <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">=
(</i><i class=3D"hh10">"{}"</i><i class=3D"hh9">,</i> x<i class=3D"hh8">)</=
i><i class=3D"hh9">;</i>
    <i class=3D"hh8">}</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{}"</i><i class=3D"hh9">,</i> x<i class=3D"hh8">)</i><i=
 class=3D"hh9">;</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"blocks-are-expressions" href=3D"https://fasterthan=
li.me/articles/a-half-hour-to-learn-rust#blocks-are-expressions" class=3D"a=
nchor"><h3>Blocks are expressions</h3></a>
<p data-bo=3D"4057">Blocks are also expressions, which mean they evaluate t=
o a value.</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"4124"><code class=3D"scroll-wrap=
per"><i class=3D"hh18">// this:</i>
<i class=3D"hh4">let</i> x =3D <i class=3D"hh1">42</i><i class=3D"hh9">;</i=
>

<i class=3D"hh18">// is equivalent to this:</i>
<i class=3D"hh4">let</i> x =3D <i class=3D"hh8">{</i> <i class=3D"hh1">42</=
i> <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
</code></figure><p data-bo=3D"4201">Inside a block, there can be multiple s=
tatements:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"4252"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">let</i> x =3D <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> y =3D <i class=3D"hh1">1</i><i class=3D"hh9">;=
</i> <i class=3D"hh18">// first statement</i>
    <i class=3D"hh4">let</i> z =3D <i class=3D"hh1">2</i><i class=3D"hh9">;=
</i> <i class=3D"hh18">// second statement</i>
    y + z <i class=3D"hh18">// this is the *tail* - what the whole block wi=
ll evaluate to</i>
<i class=3D"hh8">}</i><i class=3D"hh9">;</i>
</code></figure><a id=3D"implicit-return" href=3D"https://fasterthanli.me/a=
rticles/a-half-hour-to-learn-rust#implicit-return" class=3D"anchor"><h3>Imp=
licit return</h3></a>
<p data-bo=3D"4440">And that=E2=80=99s why =E2=80=9Comitting the semicolon =
at the end of a function=E2=80=9D is the same
as returning, ie. these are equivalent:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"4558"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">fn</i> <i class=3D"hh3">fair_dice_roll</i><i class=3D=
"hh8">(</i><i class=3D"hh8">)</i> -&gt; <i class=3D"hh14">i32</i> <i class=
=3D"hh8">{</i>
    <i class=3D"hh4">return</i> <i class=3D"hh1">4</i><i class=3D"hh9">;</i=
>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">fair_dice_roll</i><i class=3D"hh8"=
>(</i><i class=3D"hh8">)</i> -&gt; <i class=3D"hh14">i32</i> <i class=3D"hh=
8">{</i>
    <i class=3D"hh1">4</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"everything-is-an-expression" href=3D"https://faste=
rthanli.me/articles/a-half-hour-to-learn-rust#everything-is-an-expression" =
class=3D"anchor"><h3>Everything is an expression</h3></a>
<p data-bo=3D"4687"><code>if</code> conditionals are also expressions:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"4728"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">fn</i> <i class=3D"hh3">fair_dice_roll</i><i class=3D=
"hh8">(</i><i class=3D"hh8">)</i> -&gt; <i class=3D"hh14">i32</i> <i class=
=3D"hh8">{</i>
    <i class=3D"hh4">if</i> feeling_lucky <i class=3D"hh8">{</i>
        <i class=3D"hh1">6</i>
    <i class=3D"hh8">}</i> <i class=3D"hh4">else</i> <i class=3D"hh8">{</i>
        <i class=3D"hh1">4</i>
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"4834">A <code>match</code> is also an express=
ion:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"4868"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">fn</i> <i class=3D"hh3">fair_dice_roll</i><i class=3D=
"hh8">(</i><i class=3D"hh8">)</i> -&gt; <i class=3D"hh14">i32</i> <i class=
=3D"hh8">{</i>
    <i class=3D"hh4">match</i> feeling_lucky <i class=3D"hh8">{</i>
        <i class=3D"hh1">true</i> =3D&gt; <i class=3D"hh1">6</i><i class=3D=
"hh9">,</i>
        <i class=3D"hh1">false</i> =3D&gt; <i class=3D"hh1">4</i><i class=
=3D"hh9">,</i>
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"field-access-and-method-calling" href=3D"https://f=
asterthanli.me/articles/a-half-hour-to-learn-rust#field-access-and-method-c=
alling" class=3D"anchor"><h2>Field access and method calling</h2></a>
<p data-bo=3D"5019">Dots are typically used to access fields of a value:</p=
>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"5073"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">let</i> a =3D <i class=3D"hh8">(</i><i class=3D"hh1">=
10</i><i class=3D"hh9">,</i> <i class=3D"hh1">20</i><i class=3D"hh8">)</i><=
i class=3D"hh9">;</i>
a<i class=3D"hh9">.</i><i class=3D"hh1">0</i><i class=3D"hh9">;</i> <i clas=
s=3D"hh18">// this is 10</i>

<i class=3D"hh4">let</i> amos =3D <i class=3D"hh3">get_some_struct</i><i cl=
ass=3D"hh8">(</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
amos<i class=3D"hh9">.</i><i class=3D"hh6">nickname</i><i class=3D"hh9">;</=
i> <i class=3D"hh18">// this is "fasterthanlime"</i>
</code></figure><p data-bo=3D"5197">Or call a method on a value:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"5227"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">let</i> nick =3D <i class=3D"hh10">"fasterthanlime"</=
i><i class=3D"hh9">;</i>
nick<i class=3D"hh9">.</i><i class=3D"hh3">len</i><i class=3D"hh8">(</i><i =
class=3D"hh8">)</i><i class=3D"hh9">;</i> <i class=3D"hh18">// this is 14</=
i>
</code></figure><a id=3D"modules-use-syntax" href=3D"https://fasterthanli.m=
e/articles/a-half-hour-to-learn-rust#modules-use-syntax" class=3D"anchor"><=
h2>Modules, <code>use</code> syntax</h2></a>
<p data-bo=3D"5321">The double-colon, <code>::</code>, is similar but it op=
erates on namespaces.</p>

<p data-bo=3D"5388">In this example, <code>std</code> is a <em>crate</em> (=
~ a library), <code>cmp</code> is a <em>module</em>
(~ a source file), and <code>min</code> is a <em>function</em>:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"5506"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">let</i> least =3D std<i class=3D"hh9">::</i>cmp<i cla=
ss=3D"hh9">::</i><i class=3D"hh3">min</i><i class=3D"hh8">(</i><i class=3D"=
hh1">3</i><i class=3D"hh9">,</i> <i class=3D"hh1">8</i><i class=3D"hh8">)</=
i><i class=3D"hh9">;</i> <i class=3D"hh18">// this is 3</i>
</code></figure><p data-bo=3D"5565"><code>use</code> directives can be used=
 to =E2=80=9Cbring in scope=E2=80=9D names from other
namespace:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"5643"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">use</i> std<i class=3D"hh9">::</i>cmp<i class=3D"hh9"=
>::</i>min<i class=3D"hh9">;</i>

<i class=3D"hh4">let</i> least =3D <i class=3D"hh3">min</i><i class=3D"hh8"=
>(</i><i class=3D"hh1">7</i><i class=3D"hh9">,</i> <i class=3D"hh1">1</i><i=
 class=3D"hh8">)</i><i class=3D"hh9">;</i> <i class=3D"hh18">// this is 1</=
i>
</code></figure><p data-bo=3D"5712">Within <code>use</code> directives, cur=
ly brackets have another meaning: they=E2=80=99re
=E2=80=9Cglobs=E2=80=9D. If we want to import both <code>min</code> and <co=
de>max</code>, we can do any
of these:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"5859"><code class=3D"scroll-wrap=
per"><i class=3D"hh18">// this works:</i>
<i class=3D"hh4">use</i> std<i class=3D"hh9">::</i>cmp<i class=3D"hh9">::</=
i>min<i class=3D"hh9">;</i>
<i class=3D"hh4">use</i> std<i class=3D"hh9">::</i>cmp<i class=3D"hh9">::</=
i>max<i class=3D"hh9">;</i>

<i class=3D"hh18">// this also works:</i>
<i class=3D"hh4">use</i> std<i class=3D"hh9">::</i>cmp<i class=3D"hh9">::</=
i><i class=3D"hh8">{</i>min<i class=3D"hh9">,</i> max<i class=3D"hh8">}</i>=
<i class=3D"hh9">;</i>

<i class=3D"hh18">// this also works!</i>
<i class=3D"hh4">use</i> std<i class=3D"hh9">::</i><i class=3D"hh8">{</i>cm=
p<i class=3D"hh9">::</i>min<i class=3D"hh9">,</i> cmp<i class=3D"hh9">::</i=
>max<i class=3D"hh8">}</i><i class=3D"hh9">;</i>
</code></figure><p data-bo=3D"6024">A wildcard (<code>*</code>) lets you im=
port every symbol from a namespace:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"6089"><code class=3D"scroll-wrap=
per"><i class=3D"hh18">// this brings `min` and `max` in scope, and many ot=
her things</i>
<i class=3D"hh4">use</i> std<i class=3D"hh9">::</i>cmp<i class=3D"hh9">::</=
i><i class=3D"hh5">*</i><i class=3D"hh9">;</i>
</code></figure><a id=3D"types-are-namespaces-too" href=3D"https://fasterth=
anli.me/articles/a-half-hour-to-learn-rust#types-are-namespaces-too" class=
=3D"anchor"><h3>Types are namespaces too</h3></a>
<p data-bo=3D"6212">Types are namespaces too, and methods can be called as =
regular functions:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"6287"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">let</i> x =3D <i class=3D"hh10">"amos"</i><i class=3D=
"hh9">.</i><i class=3D"hh3">len</i><i class=3D"hh8">(</i><i class=3D"hh8">)=
</i><i class=3D"hh9">;</i> <i class=3D"hh18">// this is 4</i>
<i class=3D"hh4">let</i> x =3D str<i class=3D"hh9">::</i><i class=3D"hh3">l=
en</i><i class=3D"hh8">(</i><i class=3D"hh10">"amos"</i><i class=3D"hh8">)<=
/i><i class=3D"hh9">;</i> <i class=3D"hh18">// this is also 4</i>
</code></figure><a id=3D"the-libstd-prelude" href=3D"https://fasterthanli.m=
e/articles/a-half-hour-to-learn-rust#the-libstd-prelude" class=3D"anchor"><=
h3>The libstd prelude</h3></a>
<p data-bo=3D"6403"><code>str</code> is a primitive type, but many non-prim=
itive types are also in scope
by default.</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"6490"><code class=3D"scroll-wrap=
per"><i class=3D"hh18">// `Vec` is a regular struct, not a primitive type</=
i>
<i class=3D"hh4">let</i> v =3D <i class=3D"hh13">Vec</i><i class=3D"hh9">::=
</i><i class=3D"hh3">new</i><i class=3D"hh8">(</i><i class=3D"hh8">)</i><i =
class=3D"hh9">;</i>

<i class=3D"hh18">// this is exactly the same code, but with the *full* pat=
h to `Vec`</i>
<i class=3D"hh4">let</i> v =3D std<i class=3D"hh9">::</i>vec<i class=3D"hh9=
">::</i><i class=3D"hh13">Vec</i><i class=3D"hh9">::</i><i class=3D"hh3">ne=
w</i><i class=3D"hh8">(</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
</code></figure><p data-bo=3D"6673">This works because Rust inserts this at=
 the beginning of every module:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"6745"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">use</i> std<i class=3D"hh9">::</i>prelude<i class=3D"=
hh9">::</i>v1<i class=3D"hh9">::</i><i class=3D"hh5">*</i><i class=3D"hh9">=
;</i>
</code></figure><p data-bo=3D"6783">(Which in turns re-exports a lot of sym=
bols, like <code>Vec</code>, <code>String</code>, <code>Option</code> and <=
code>Result</code>).</p>

<a id=3D"structs" href=3D"https://fasterthanli.me/articles/a-half-hour-to-l=
earn-rust#structs" class=3D"anchor"><h2>Structs</h2></a>
<p data-bo=3D"6887">Structs are declared with the <code>struct</code> keywo=
rd:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"6936"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">struct</i> <i class=3D"hh13">Vec2</i> <i class=3D"hh8=
">{</i>
    <i class=3D"hh6">x</i><i class=3D"hh9">:</i> <i class=3D"hh14">f64</i><=
i class=3D"hh9">,</i> <i class=3D"hh18">// 64-bit floating point, aka "doub=
le precision"</i>
    <i class=3D"hh6">y</i><i class=3D"hh9">:</i> <i class=3D"hh14">f64</i><=
i class=3D"hh9">,</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"7038">They can be initialized using <em>struc=
t literals</em>:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"7088"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">let</i> v1 =3D <i class=3D"hh13">Vec2</i> <i class=3D=
"hh8">{</i> <i class=3D"hh6">x</i><i class=3D"hh9">:</i> <i class=3D"hh1">1=
.0</i><i class=3D"hh9">,</i> <i class=3D"hh6">y</i><i class=3D"hh9">:</i> <=
i class=3D"hh1">3.0</i> <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
<i class=3D"hh4">let</i> v2 =3D <i class=3D"hh13">Vec2</i> <i class=3D"hh8"=
>{</i> <i class=3D"hh6">y</i><i class=3D"hh9">:</i> <i class=3D"hh1">2.0</i=
><i class=3D"hh9">,</i> <i class=3D"hh6">x</i><i class=3D"hh9">:</i> <i cla=
ss=3D"hh1">4.0</i> <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
<i class=3D"hh18">// the order does not matter, only the names do</i>
</code></figure><a id=3D"struct-update-syntax" href=3D"https://fasterthanli=
.me/articles/a-half-hour-to-learn-rust#struct-update-syntax" class=3D"ancho=
r"><h3>Struct update syntax</h3></a>
<p data-bo=3D"7243">There is a shortcut for initializing the <em>rest of th=
e fields</em> from
another struct:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"7327"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">let</i> v3 =3D <i class=3D"hh13">Vec2</i> <i class=3D=
"hh8">{</i>
    <i class=3D"hh6">x</i><i class=3D"hh9">:</i> <i class=3D"hh1">14.0</i><=
i class=3D"hh9">,</i>
    ..v2
<i class=3D"hh8">}</i><i class=3D"hh9">;</i>
</code></figure><p data-bo=3D"7381">This is called =E2=80=9Cstruct update s=
yntax=E2=80=9D, can only happen in last position,
and cannot be followed by a comma.</p>

<p data-bo=3D"7490">Note that <em>the rest of the fields</em> can mean <em>=
all the fields</em>:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"7553"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">let</i> v4 =3D <i class=3D"hh13">Vec2</i> <i class=3D=
"hh8">{</i> ..v3 <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
</code></figure><a id=3D"destructuring-structs" href=3D"https://fasterthanl=
i.me/articles/a-half-hour-to-learn-rust#destructuring-structs" class=3D"anc=
hor"><h3>Destructuring structs</h3></a>
<p data-bo=3D"7617">Structs, like tuples, can be destructured.</p>

<p data-bo=3D"7661">Just like this is a valid <code>let</code> pattern:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"2977"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">let</i> <i class=3D"hh8">(</i>left<i class=3D"hh9">,<=
/i> right<i class=3D"hh8">)</i> =3D slice<i class=3D"hh9">.</i><i class=3D"=
hh3">split_at</i><i class=3D"hh8">(</i>middle<i class=3D"hh8">)</i><i class=
=3D"hh9">;</i>
</code></figure><p data-bo=3D"7760">So is this:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"7773"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">let</i> v =3D <i class=3D"hh13">Vec2</i> <i class=3D"=
hh8">{</i> <i class=3D"hh6">x</i><i class=3D"hh9">:</i> <i class=3D"hh1">3.=
0</i><i class=3D"hh9">,</i> <i class=3D"hh6">y</i><i class=3D"hh9">:</i> <i=
 class=3D"hh1">6.0</i> <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
<i class=3D"hh4">let</i> <i class=3D"hh13">Vec2</i> <i class=3D"hh8">{</i> =
x<i class=3D"hh9">,</i> y <i class=3D"hh8">}</i> =3D v<i class=3D"hh9">;</i=
>
<i class=3D"hh18">// `x` is now 3.0, `y` is now `6.0`</i>
</code></figure><p data-bo=3D"7878">And this:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"7889"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">let</i> <i class=3D"hh13">Vec2</i> <i class=3D"hh8">{=
</i> x<i class=3D"hh9">,</i> .. <i class=3D"hh8">}</i> =3D v<i class=3D"hh9=
">;</i>
<i class=3D"hh18">// this throws away `v.y`</i>
</code></figure><a id=3D"patterns-and-destructuring" href=3D"https://faster=
thanli.me/articles/a-half-hour-to-learn-rust#patterns-and-destructuring" cl=
ass=3D"anchor"><h2>Patterns and destructuring</h2></a>
<a id=3D"destructuring-with-if-let" href=3D"https://fasterthanli.me/article=
s/a-half-hour-to-learn-rust#destructuring-with-if-let" class=3D"anchor"><h3=
>Destructuring with <code>if let</code></h3></a>
<p data-bo=3D"8016"><code>let</code> patterns can be used as conditions in =
<code>if</code>:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"8067"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">struct</i> <i class=3D"hh13">Number</i> <i class=3D"h=
h8">{</i>
    <i class=3D"hh6">odd</i><i class=3D"hh9">:</i> <i class=3D"hh14">bool</=
i><i class=3D"hh9">,</i>
    <i class=3D"hh6">value</i><i class=3D"hh9">:</i> <i class=3D"hh14">i32<=
/i><i class=3D"hh9">,</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> one =3D <i class=3D"hh13">Number</i> <i class=
=3D"hh8">{</i> <i class=3D"hh6">odd</i><i class=3D"hh9">:</i> <i class=3D"h=
h1">true</i><i class=3D"hh9">,</i> <i class=3D"hh6">value</i><i class=3D"hh=
9">:</i> <i class=3D"hh1">1</i> <i class=3D"hh8">}</i><i class=3D"hh9">;</i=
>
    <i class=3D"hh4">let</i> two =3D <i class=3D"hh13">Number</i> <i class=
=3D"hh8">{</i> <i class=3D"hh6">odd</i><i class=3D"hh9">:</i> <i class=3D"h=
h1">false</i><i class=3D"hh9">,</i> <i class=3D"hh6">value</i><i class=3D"h=
h9">:</i> <i class=3D"hh1">2</i> <i class=3D"hh8">}</i><i class=3D"hh9">;</=
i>
    <i class=3D"hh3">print_number</i><i class=3D"hh8">(</i>one<i class=3D"h=
h8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">print_number</i><i class=3D"hh8">(</i>two<i class=3D"h=
h8">)</i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">print_number</i><i class=3D"hh8">(=
</i><i class=3D"hh17">n</i><i class=3D"hh9">:</i> <i class=3D"hh13">Number<=
/i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">if</i> <i class=3D"hh4">let</i> <i class=3D"hh13">Numb=
er</i> <i class=3D"hh8">{</i> <i class=3D"hh6">odd</i><i class=3D"hh9">:</i=
> <i class=3D"hh1">true</i><i class=3D"hh9">,</i> value <i class=3D"hh8">}<=
/i> =3D n <i class=3D"hh8">{</i>
        <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">=
(</i><i class=3D"hh10">"Odd number: {}"</i><i class=3D"hh9">,</i> value<i c=
lass=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
    <i class=3D"hh8">}</i> <i class=3D"hh4">else</i> <i class=3D"hh4">if</i=
> <i class=3D"hh4">let</i> <i class=3D"hh13">Number</i> <i class=3D"hh8">{<=
/i> <i class=3D"hh6">odd</i><i class=3D"hh9">:</i> <i class=3D"hh1">false</=
i><i class=3D"hh9">,</i> value <i class=3D"hh8">}</i> =3D n <i class=3D"hh8=
">{</i>
        <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">=
(</i><i class=3D"hh10">"Even number: {}"</i><i class=3D"hh9">,</i> value<i =
class=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>

<i class=3D"hh18">// this prints:</i>
<i class=3D"hh18">// Odd number: 1</i>
<i class=3D"hh18">// Even number: 2</i>
</code></figure><a id=3D"match-arms-are-patterns" href=3D"https://fastertha=
nli.me/articles/a-half-hour-to-learn-rust#match-arms-are-patterns" class=3D=
"anchor"><h3>Match arms are patterns</h3></a>
<p data-bo=3D"8587"><code>match</code> arms are also patterns, just like <c=
ode>if let</code>:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"8640"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">fn</i> <i class=3D"hh3">print_number</i><i class=3D"h=
h8">(</i><i class=3D"hh17">n</i><i class=3D"hh9">:</i> <i class=3D"hh13">Nu=
mber</i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">match</i> n <i class=3D"hh8">{</i>
        <i class=3D"hh13">Number</i> <i class=3D"hh8">{</i> <i class=3D"hh6=
">odd</i><i class=3D"hh9">:</i> <i class=3D"hh1">true</i><i class=3D"hh9">,=
</i> value <i class=3D"hh8">}</i> =3D&gt; <i class=3D"hh3">println</i><i cl=
ass=3D"hh3">!</i><i class=3D"hh8">(</i><i class=3D"hh10">"Odd number: {}"</=
i><i class=3D"hh9">,</i> value<i class=3D"hh8">)</i><i class=3D"hh9"></i><i=
 class=3D"hh9">,</i>
        <i class=3D"hh13">Number</i> <i class=3D"hh8">{</i> <i class=3D"hh6=
">odd</i><i class=3D"hh9">:</i> <i class=3D"hh1">false</i><i class=3D"hh9">=
,</i> value <i class=3D"hh8">}</i> =3D&gt; <i class=3D"hh3">println</i><i c=
lass=3D"hh3">!</i><i class=3D"hh8">(</i><i class=3D"hh10">"Even number: {}"=
</i><i class=3D"hh9">,</i> value<i class=3D"hh8">)</i><i class=3D"hh9"></i>=
<i class=3D"hh9">,</i>
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>

<i class=3D"hh18">// this prints the same as before</i>
</code></figure><a id=3D"exhaustive-matches" href=3D"https://fasterthanli.m=
e/articles/a-half-hour-to-learn-rust#exhaustive-matches" class=3D"anchor"><=
h3>Exhaustive matches</h3></a>
<p data-bo=3D"8913">A <code>match</code> has to be exhaustive: at least one=
 arm needs to match.</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"8979"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">fn</i> <i class=3D"hh3">print_number</i><i class=3D"h=
h8">(</i><i class=3D"hh17">n</i><i class=3D"hh9">:</i> <i class=3D"hh13">Nu=
mber</i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">match</i> n <i class=3D"hh8">{</i>
        <i class=3D"hh13">Number</i> <i class=3D"hh8">{</i> <i class=3D"hh6=
">value</i><i class=3D"hh9">:</i> <i class=3D"hh1">1</i><i class=3D"hh9">,<=
/i> .. <i class=3D"hh8">}</i> =3D&gt; <i class=3D"hh3">println</i><i class=
=3D"hh3">!</i><i class=3D"hh8">(</i><i class=3D"hh10">"One"</i><i class=3D"=
hh8">)</i><i class=3D"hh9">,</i>
        <i class=3D"hh13">Number</i> <i class=3D"hh8">{</i> <i class=3D"hh6=
">value</i><i class=3D"hh9">:</i> <i class=3D"hh1">2</i><i class=3D"hh9">,<=
/i> .. <i class=3D"hh8">}</i> =3D&gt; <i class=3D"hh3">println</i><i class=
=3D"hh3">!</i><i class=3D"hh8">(</i><i class=3D"hh10">"Two"</i><i class=3D"=
hh8">)</i><i class=3D"hh9">,</i>
        <i class=3D"hh13">Number</i> <i class=3D"hh8">{</i> value<i class=
=3D"hh9">,</i> .. <i class=3D"hh8">}</i> =3D&gt; <i class=3D"hh3">println</=
i><i class=3D"hh3">!</i><i class=3D"hh8">(</i><i class=3D"hh10">"{}"</i><i =
class=3D"hh9">,</i> value<i class=3D"hh8">)</i><i class=3D"hh9"></i><i clas=
s=3D"hh9">,</i>
        <i class=3D"hh18">// if that last arm didn't exist, we would get a =
compile-time error</i>
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"9278">If that=E2=80=99s hard, <code>_</code> =
can be used as a =E2=80=9Ccatch-all=E2=80=9D pattern:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"9337"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">fn</i> <i class=3D"hh3">print_number</i><i class=3D"h=
h8">(</i><i class=3D"hh17">n</i><i class=3D"hh9">:</i> <i class=3D"hh13">Nu=
mber</i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">match</i> n<i class=3D"hh9">.</i><i class=3D"hh6">valu=
e</i> <i class=3D"hh8">{</i>
        <i class=3D"hh1">1</i> =3D&gt; <i class=3D"hh3">println</i><i class=
=3D"hh3">!</i><i class=3D"hh8">(</i><i class=3D"hh10">"One"</i><i class=3D"=
hh8">)</i><i class=3D"hh9">,</i>
        <i class=3D"hh1">2</i> =3D&gt; <i class=3D"hh3">println</i><i class=
=3D"hh3">!</i><i class=3D"hh8">(</i><i class=3D"hh10">"Two"</i><i class=3D"=
hh8">)</i><i class=3D"hh9">,</i>
        _ =3D&gt; <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i clas=
s=3D"hh8">(</i><i class=3D"hh10">"{}"</i><i class=3D"hh9">,</i> n<i class=
=3D"hh9">.</i><i class=3D"hh6">value</i><i class=3D"hh8">)</i><i class=3D"h=
h9"></i><i class=3D"hh9">,</i>
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"methods" href=3D"https://fasterthanli.me/articles/=
a-half-hour-to-learn-rust#methods" class=3D"anchor"><h2>Methods</h2></a>
<p data-bo=3D"9517">You can declare methods on your own types:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"9561"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">struct</i> <i class=3D"hh13">Number</i> <i class=3D"h=
h8">{</i>
    <i class=3D"hh6">odd</i><i class=3D"hh9">:</i> <i class=3D"hh14">bool</=
i><i class=3D"hh9">,</i>
    <i class=3D"hh6">value</i><i class=3D"hh9">:</i> <i class=3D"hh14">i32<=
/i><i class=3D"hh9">,</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">impl</i> <i class=3D"hh13">Number</i> <i class=3D"hh8">{</=
i>
    <i class=3D"hh4">fn</i> <i class=3D"hh3">is_strictly_positive</i><i cla=
ss=3D"hh8">(</i><i class=3D"hh16">self</i><i class=3D"hh8">)</i> -&gt; <i c=
lass=3D"hh14">bool</i> <i class=3D"hh8">{</i>
        <i class=3D"hh16">self</i><i class=3D"hh9">.</i><i class=3D"hh6">va=
lue</i> &gt; <i class=3D"hh1">0</i>
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"9713">And use them like usual:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"9739"><code class=3D"scroll-wrap=
per"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i=
><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> minus_two =3D <i class=3D"hh13">Number</i> <i =
class=3D"hh8">{</i>
        <i class=3D"hh6">odd</i><i class=3D"hh9">:</i> <i class=3D"hh1">fal=
se</i><i class=3D"hh9">,</i>
        <i class=3D"hh6">value</i><i class=3D"hh9">:</i> -<i class=3D"hh1">=
2</i><i class=3D"hh9">,</i>
    <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"positive? {}"</i><i class=3D"hh9">,</i> minus_two<i cla=
ss=3D"hh9">.</i><i class=3D"hh3">is_strictly_positive</i><i class=3D"hh8">(=
</i><i class=3D"hh8">)</i><i class=3D"hh8">)</i><i class=3D"hh9"></i><i cla=
ss=3D"hh9">;</i>
    <i class=3D"hh18">// this prints "positive? false"</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"immutability" href=3D"https://fasterthanli.me/arti=
cles/a-half-hour-to-learn-rust#immutability" class=3D"anchor"><h2>Immutabil=
ity</h2></a>
<p data-bo=3D"9959">Variable bindings are immutable by default, which means=
 their
interior can=E2=80=99t be mutated:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"10049"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> n =3D <i class=3D"hh13">Number</i> <i class=3D=
"hh8">{</i>
        <i class=3D"hh6">odd</i><i class=3D"hh9">:</i> <i class=3D"hh1">tru=
e</i><i class=3D"hh9">,</i>
        <i class=3D"hh6">value</i><i class=3D"hh9">:</i> <i class=3D"hh1">1=
7</i><i class=3D"hh9">,</i>
    <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    n<i class=3D"hh9">.</i><i class=3D"hh6">odd</i> =3D <i class=3D"hh1">fa=
lse</i><i class=3D"hh9">;</i> <i class=3D"hh18">// error: cannot assign to =
`n.odd`,</i>
                   <i class=3D"hh18">// as `n` is not declared to be mutabl=
e</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"10256">And also that they cannot be assigned =
to:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"10299"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> n =3D <i class=3D"hh13">Number</i> <i class=3D=
"hh8">{</i>
        <i class=3D"hh6">odd</i><i class=3D"hh9">:</i> <i class=3D"hh1">tru=
e</i><i class=3D"hh9">,</i>
        <i class=3D"hh6">value</i><i class=3D"hh9">:</i> <i class=3D"hh1">1=
7</i><i class=3D"hh9">,</i>
    <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    n =3D <i class=3D"hh13">Number</i> <i class=3D"hh8">{</i>
        <i class=3D"hh6">odd</i><i class=3D"hh9">:</i> <i class=3D"hh1">fal=
se</i><i class=3D"hh9">,</i>
        <i class=3D"hh6">value</i><i class=3D"hh9">:</i> <i class=3D"hh1">2=
2</i><i class=3D"hh9">,</i>
    <i class=3D"hh8">}</i><i class=3D"hh9">;</i> <i class=3D"hh18">// error=
: cannot assign twice to immutable variable `n`</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"10511"><code>mut</code> makes a variable bind=
ing mutable:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"10552"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> <i class=3D"hh4">mut</i> n =3D <i class=3D"hh1=
3">Number</i> <i class=3D"hh8">{</i>
        <i class=3D"hh6">odd</i><i class=3D"hh9">:</i> <i class=3D"hh1">tru=
e</i><i class=3D"hh9">,</i>
        <i class=3D"hh6">value</i><i class=3D"hh9">:</i> <i class=3D"hh1">1=
7</i><i class=3D"hh9">,</i>
    <i class=3D"hh8">}</i>
    n<i class=3D"hh9">.</i><i class=3D"hh6">value</i> =3D <i class=3D"hh1">=
19</i><i class=3D"hh9">;</i> <i class=3D"hh18">// all good</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"traits" href=3D"https://fasterthanli.me/articles/a=
-half-hour-to-learn-rust#traits" class=3D"anchor"><h2>Traits</h2></a>
<p data-bo=3D"10689">Traits are something multiple types can have in common=
:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"10746"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">trait</i> <i class=3D"hh13">Signed</i> <i class=3D"h=
h8">{</i>
    <i class=3D"hh4">fn</i> <i class=3D"hh3">is_strictly_negative</i><i cla=
ss=3D"hh8">(</i><i class=3D"hh16">self</i><i class=3D"hh8">)</i> -&gt; <i c=
lass=3D"hh14">bool</i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"orphan-rules" href=3D"https://fasterthanli.me/arti=
cles/a-half-hour-to-learn-rust#orphan-rules" class=3D"anchor"><h3>Orphan ru=
les</h3></a>
<p data-bo=3D"10837">You can implement:</p>

<ul><li>one of your traits on anyone=E2=80=99s type</li>
<li>anyone=E2=80=99s trait on one of your types</li>
<li>but not a foreign trait on a foreign type</li>
</ul>
<p data-bo=3D"10984">These are called the =E2=80=9Corphan rules=E2=80=9D.</=
p>

<p data-bo=3D"11022">Here=E2=80=99s an implementation of our trait on our t=
ype:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"11074"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">impl</i> <i class=3D"hh13">Signed</i> <i class=3D"hh=
4">for</i> <i class=3D"hh13">Number</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">fn</i> <i class=3D"hh3">is_strictly_negative</i><i cla=
ss=3D"hh8">(</i><i class=3D"hh16">self</i><i class=3D"hh8">)</i> -&gt; <i c=
lass=3D"hh14">bool</i> <i class=3D"hh8">{</i>
        <i class=3D"hh16">self</i><i class=3D"hh9">.</i><i class=3D"hh6">va=
lue</i> &lt; <i class=3D"hh1">0</i>
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> n =3D <i class=3D"hh13">Number</i> <i class=3D=
"hh8">{</i> <i class=3D"hh6">odd</i><i class=3D"hh9">:</i> <i class=3D"hh1"=
>false</i><i class=3D"hh9">,</i> <i class=3D"hh6">value</i><i class=3D"hh9"=
>:</i> -<i class=3D"hh1">44</i> <i class=3D"hh8">}</i><i class=3D"hh9">;</i=
>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{}"</i><i class=3D"hh9">,</i> n<i class=3D"hh9">.</i><i=
 class=3D"hh3">is_strictly_negative</i><i class=3D"hh8">(</i><i class=3D"hh=
8">)</i><i class=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i> <=
i class=3D"hh18">// prints "true"</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"11312">Our trait on a foreign type (a primiti=
ve type, even):</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"11367"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">impl</i> <i class=3D"hh13">Signed</i> <i class=3D"hh=
4">for</i> <i class=3D"hh14">i32</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">fn</i> <i class=3D"hh3">is_strictly_negative</i><i cla=
ss=3D"hh8">(</i><i class=3D"hh16">self</i><i class=3D"hh8">)</i> -&gt; <i c=
lass=3D"hh14">bool</i> <i class=3D"hh8">{</i>
        <i class=3D"hh16">self</i> &lt; <i class=3D"hh1">0</i>
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> n<i class=3D"hh9">:</i> <i class=3D"hh14">i32<=
/i> =3D -<i class=3D"hh1">44</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{}"</i><i class=3D"hh9">,</i> n<i class=3D"hh9">.</i><i=
 class=3D"hh3">is_strictly_negative</i><i class=3D"hh8">(</i><i class=3D"hh=
8">)</i><i class=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i> <=
i class=3D"hh18">// prints "true"</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"11571">A foreign trait on our type:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"11601"><code class=3D"scroll-wra=
pper"><i class=3D"hh18">// the `Neg` trait is used to overload `-`, the</i>
<i class=3D"hh18">// unary minus operator.</i>
<i class=3D"hh4">impl</i> std<i class=3D"hh9">::</i>ops<i class=3D"hh9">::<=
/i><i class=3D"hh13">Neg</i> <i class=3D"hh4">for</i> <i class=3D"hh13">Num=
ber</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">type</i> <i class=3D"hh13">Output</i> =3D <i class=3D"=
hh13">Number</i><i class=3D"hh9">;</i>

    <i class=3D"hh4">fn</i> <i class=3D"hh3">neg</i><i class=3D"hh8">(</i><=
i class=3D"hh16">self</i><i class=3D"hh8">)</i> -&gt; <i class=3D"hh13">Num=
ber</i> <i class=3D"hh8">{</i>
        <i class=3D"hh13">Number</i> <i class=3D"hh8">{</i>
            <i class=3D"hh6">value</i><i class=3D"hh9">:</i> -<i class=3D"h=
h16">self</i><i class=3D"hh9">.</i><i class=3D"hh6">value</i><i class=3D"hh=
9">,</i>
            <i class=3D"hh6">odd</i><i class=3D"hh9">:</i> <i class=3D"hh16=
">self</i><i class=3D"hh9">.</i><i class=3D"hh6">odd</i><i class=3D"hh9">,<=
/i>
        <i class=3D"hh8">}</i>
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> n =3D <i class=3D"hh13">Number</i> <i class=3D=
"hh8">{</i> <i class=3D"hh6">odd</i><i class=3D"hh9">:</i> <i class=3D"hh1"=
>true</i><i class=3D"hh9">,</i> <i class=3D"hh6">value</i><i class=3D"hh9">=
:</i> <i class=3D"hh1">987</i> <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> m =3D -n<i class=3D"hh9">;</i> <i class=3D"hh1=
8">// this is only possible because we implemented `Neg`</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{}"</i><i class=3D"hh9">,</i> m<i class=3D"hh9">.</i><i=
 class=3D"hh6">value</i><i class=3D"hh8">)</i><i class=3D"hh9"></i><i class=
=3D"hh9">;</i> <i class=3D"hh18">// prints "-987"</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"the-self-type" href=3D"https://fasterthanli.me/art=
icles/a-half-hour-to-learn-rust#the-self-type" class=3D"anchor"><h3>The <co=
de>Self</code> type</h3></a>
<p data-bo=3D"12067">An <code>impl</code> block is always <em>for</em> a ty=
pe, so, inside that block, <code>Self</code>
means that type:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"12155"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">impl</i> std<i class=3D"hh9">::</i>ops<i class=3D"hh=
9">::</i><i class=3D"hh13">Neg</i> <i class=3D"hh4">for</i> <i class=3D"hh1=
3">Number</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">type</i> <i class=3D"hh13">Output</i> =3D <i class=3D"=
hh13">Self</i><i class=3D"hh9">;</i>

    <i class=3D"hh4">fn</i> <i class=3D"hh3">neg</i><i class=3D"hh8">(</i><=
i class=3D"hh16">self</i><i class=3D"hh8">)</i> -&gt; <i class=3D"hh13">Sel=
f</i> <i class=3D"hh8">{</i>
        <i class=3D"hh13">Self</i> <i class=3D"hh8">{</i>
            <i class=3D"hh6">value</i><i class=3D"hh9">:</i> -<i class=3D"h=
h16">self</i><i class=3D"hh9">.</i><i class=3D"hh6">value</i><i class=3D"hh=
9">,</i>
            <i class=3D"hh6">odd</i><i class=3D"hh9">:</i> <i class=3D"hh16=
">self</i><i class=3D"hh9">.</i><i class=3D"hh6">odd</i><i class=3D"hh9">,<=
/i>
        <i class=3D"hh8">}</i>
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"marker-traits" href=3D"https://fasterthanli.me/art=
icles/a-half-hour-to-learn-rust#marker-traits" class=3D"anchor"><h3>Marker =
traits</h3></a>
<p data-bo=3D"12363">Some traits are <em>markers</em> - they don=E2=80=99t =
say that a type implements
some methods, they say that certain things can be done with a type.</p>

<p data-bo=3D"12498">For example, <code>i32</code> implements trait <code>C=
opy</code> (in short, <code>i32</code> <em>is</em> <code>Copy</code>),
so this works:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"12588"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> a<i class=3D"hh9">:</i> <i class=3D"hh14">i32<=
/i> =3D <i class=3D"hh1">15</i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> b =3D a<i class=3D"hh9">;</i> <i class=3D"hh18=
">// `a` is copied</i>
    <i class=3D"hh4">let</i> c =3D a<i class=3D"hh9">;</i> <i class=3D"hh18=
">// `a` is copied again</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"12706">And this also works:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"12728"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">print_i32</i><i class=3D"hh8=
">(</i><i class=3D"hh17">x</i><i class=3D"hh9">:</i> <i class=3D"hh14">i32<=
/i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"x =3D {}"</i><i class=3D"hh9">,</i> x<i class=3D"hh8">)=
</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> a<i class=3D"hh9">:</i> <i class=3D"hh14">i32<=
/i> =3D <i class=3D"hh1">15</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">print_i32</i><i class=3D"hh8">(</i>a<i class=3D"hh8">)=
</i><i class=3D"hh9">;</i> <i class=3D"hh18">// `a` is copied</i>
    <i class=3D"hh3">print_i32</i><i class=3D"hh8">(</i>a<i class=3D"hh8">)=
</i><i class=3D"hh9">;</i> <i class=3D"hh18">// `a` is copied again</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"12905">But the <code>Number</code> struct is =
not <code>Copy</code>, so this doesn=E2=80=99t work:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"12967"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> n =3D <i class=3D"hh13">Number</i> <i class=3D=
"hh8">{</i> <i class=3D"hh6">odd</i><i class=3D"hh9">:</i> <i class=3D"hh1"=
>true</i><i class=3D"hh9">,</i> <i class=3D"hh6">value</i><i class=3D"hh9">=
:</i> <i class=3D"hh1">51</i> <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> m =3D n<i class=3D"hh9">;</i> <i class=3D"hh18=
">// `n` is moved into `m`</i>
    <i class=3D"hh4">let</i> o =3D n<i class=3D"hh9">;</i> <i class=3D"hh18=
">// error: use of moved value: `n`</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"13128">And neither does this:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"13152"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">print_number</i><i class=3D"=
hh8">(</i><i class=3D"hh17">n</i><i class=3D"hh9">:</i> <i class=3D"hh13">N=
umber</i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{} number {}"</i><i class=3D"hh9">,</i> <i class=3D"hh4=
">if</i> n<i class=3D"hh9">.</i><i class=3D"hh6">odd</i> <i class=3D"hh8">{=
</i> <i class=3D"hh10">"odd"</i> <i class=3D"hh8">}</i> <i class=3D"hh4">el=
se</i> <i class=3D"hh8">{</i> <i class=3D"hh10">"even"</i> <i class=3D"hh8"=
>}</i><i class=3D"hh9">,</i> n<i class=3D"hh9">.</i><i class=3D"hh6">value<=
/i><i class=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> n =3D <i class=3D"hh13">Number</i> <i class=3D=
"hh8">{</i> <i class=3D"hh6">odd</i><i class=3D"hh9">:</i> <i class=3D"hh1"=
>true</i><i class=3D"hh9">,</i> <i class=3D"hh6">value</i><i class=3D"hh9">=
:</i> <i class=3D"hh1">51</i> <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">print_number</i><i class=3D"hh8">(</i>n<i class=3D"hh8=
">)</i><i class=3D"hh9">;</i> <i class=3D"hh18">// `n` is moved</i>
    <i class=3D"hh3">print_number</i><i class=3D"hh8">(</i>n<i class=3D"hh8=
">)</i><i class=3D"hh9">;</i> <i class=3D"hh18">// error: use of moved valu=
e: `n`</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"13423">But it works if <code>print_number</co=
de> takes an immutable reference instead:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"13493"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">print_number</i><i class=3D"=
hh8">(</i><i class=3D"hh17">n</i><i class=3D"hh9">:</i> <i class=3D"hh5">&a=
mp;</i><i class=3D"hh13">Number</i><i class=3D"hh8">)</i> <i class=3D"hh8">=
{</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{} number {}"</i><i class=3D"hh9">,</i> <i class=3D"hh4=
">if</i> n<i class=3D"hh9">.</i><i class=3D"hh6">odd</i> <i class=3D"hh8">{=
</i> <i class=3D"hh10">"odd"</i> <i class=3D"hh8">}</i> <i class=3D"hh4">el=
se</i> <i class=3D"hh8">{</i> <i class=3D"hh10">"even"</i> <i class=3D"hh8"=
>}</i><i class=3D"hh9">,</i> n<i class=3D"hh9">.</i><i class=3D"hh6">value<=
/i><i class=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> n =3D <i class=3D"hh13">Number</i> <i class=3D=
"hh8">{</i> <i class=3D"hh6">odd</i><i class=3D"hh9">:</i> <i class=3D"hh1"=
>true</i><i class=3D"hh9">,</i> <i class=3D"hh6">value</i><i class=3D"hh9">=
:</i> <i class=3D"hh1">51</i> <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">print_number</i><i class=3D"hh8">(</i><i class=3D"hh5"=
>&amp;</i>n<i class=3D"hh8">)</i><i class=3D"hh9">;</i> <i class=3D"hh18">/=
/ `n` is borrowed for the time of the call</i>
    <i class=3D"hh3">print_number</i><i class=3D"hh8">(</i><i class=3D"hh5"=
>&amp;</i>n<i class=3D"hh8">)</i><i class=3D"hh9">;</i> <i class=3D"hh18">/=
/ `n` is borrowed again</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"13786">It also works if a function takes a <e=
m>mutable</em> reference - but only
if our variable binding is also <code>mut</code>.</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"13893"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">invert</i><i class=3D"hh8">(=
</i><i class=3D"hh17">n</i><i class=3D"hh9">:</i> <i class=3D"hh5">&amp;</i=
><i class=3D"hh4">mut</i> <i class=3D"hh13">Number</i><i class=3D"hh8">)</i=
> <i class=3D"hh8">{</i>
    n<i class=3D"hh9">.</i><i class=3D"hh6">value</i> =3D -n<i class=3D"hh9=
">.</i><i class=3D"hh6">value</i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">print_number</i><i class=3D"hh8">(=
</i><i class=3D"hh17">n</i><i class=3D"hh9">:</i> <i class=3D"hh5">&amp;</i=
><i class=3D"hh13">Number</i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{} number {}"</i><i class=3D"hh9">,</i> <i class=3D"hh4=
">if</i> n<i class=3D"hh9">.</i><i class=3D"hh6">odd</i> <i class=3D"hh8">{=
</i> <i class=3D"hh10">"odd"</i> <i class=3D"hh8">}</i> <i class=3D"hh4">el=
se</i> <i class=3D"hh8">{</i> <i class=3D"hh10">"even"</i> <i class=3D"hh8"=
>}</i><i class=3D"hh9">,</i> n<i class=3D"hh9">.</i><i class=3D"hh6">value<=
/i><i class=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh18">// this time, `n` is mutable</i>
    <i class=3D"hh4">let</i> <i class=3D"hh4">mut</i> n =3D <i class=3D"hh1=
3">Number</i> <i class=3D"hh8">{</i> <i class=3D"hh6">odd</i><i class=3D"hh=
9">:</i> <i class=3D"hh1">true</i><i class=3D"hh9">,</i> <i class=3D"hh6">v=
alue</i><i class=3D"hh9">:</i> <i class=3D"hh1">51</i> <i class=3D"hh8">}</=
i><i class=3D"hh9">;</i>
    <i class=3D"hh3">print_number</i><i class=3D"hh8">(</i><i class=3D"hh5"=
>&amp;</i>n<i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">invert</i><i class=3D"hh8">(</i><i class=3D"hh5">&amp;=
</i><i class=3D"hh4">mut</i> n<i class=3D"hh8">)</i><i class=3D"hh9">;</i> =
<i class=3D"hh18">// `n is borrowed mutably - everything is explicit</i>
    <i class=3D"hh3">print_number</i><i class=3D"hh8">(</i><i class=3D"hh5"=
>&amp;</i>n<i class=3D"hh8">)</i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"trait-method-receivers" href=3D"https://fasterthan=
li.me/articles/a-half-hour-to-learn-rust#trait-method-receivers" class=3D"a=
nchor"><h3>Trait method receivers</h3></a>
<p data-bo=3D"14308">Trait methods can also take <code>self</code> by refer=
ence or mutable reference:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"14379"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">impl</i> std<i class=3D"hh9">::</i>clone<i class=3D"=
hh9">::</i><i class=3D"hh13">Clone</i> <i class=3D"hh4">for</i> <i class=3D=
"hh13">Number</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">fn</i> <i class=3D"hh3">clone</i><i class=3D"hh8">(</i=
><i class=3D"hh5">&amp;</i><i class=3D"hh16">self</i><i class=3D"hh8">)</i>=
 -&gt; <i class=3D"hh13">Self</i> <i class=3D"hh8">{</i>
        <i class=3D"hh13">Self</i> <i class=3D"hh8">{</i> ..<i class=3D"hh5=
">*</i><i class=3D"hh16">self</i> <i class=3D"hh8">}</i>
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"14491">When invoking trait methods, the recei=
ver is borrowed implicitly:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"14558"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> n =3D <i class=3D"hh13">Number</i> <i class=3D=
"hh8">{</i> <i class=3D"hh6">odd</i><i class=3D"hh9">:</i> <i class=3D"hh1"=
>true</i><i class=3D"hh9">,</i> <i class=3D"hh6">value</i><i class=3D"hh9">=
:</i> <i class=3D"hh1">51</i> <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> <i class=3D"hh4">mut</i> m =3D n<i class=3D"hh=
9">.</i><i class=3D"hh3">clone</i><i class=3D"hh8">(</i><i class=3D"hh8">)<=
/i><i class=3D"hh9">;</i>
    m<i class=3D"hh9">.</i><i class=3D"hh6">value</i> +=3D <i class=3D"hh1"=
>100</i><i class=3D"hh9">;</i>

    <i class=3D"hh3">print_number</i><i class=3D"hh8">(</i><i class=3D"hh5"=
>&amp;</i>n<i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">print_number</i><i class=3D"hh8">(</i><i class=3D"hh5"=
>&amp;</i>m<i class=3D"hh8">)</i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"14722">To highlight this: these are equivalen=
t:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"14764"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">let</i> m =3D n<i class=3D"hh9">.</i><i class=3D"hh3=
">clone</i><i class=3D"hh8">(</i><i class=3D"hh8">)</i><i class=3D"hh9">;</=
i>

<i class=3D"hh4">let</i> m =3D std<i class=3D"hh9">::</i>clone<i class=3D"h=
h9">::</i><i class=3D"hh13">Clone</i><i class=3D"hh9">::</i><i class=3D"hh3=
">clone</i><i class=3D"hh8">(</i><i class=3D"hh5">&amp;</i>n<i class=3D"hh8=
">)</i><i class=3D"hh9">;</i>
</code></figure><p data-bo=3D"14835">Marker traits like <code>Copy</code> h=
ave no methods:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"14879"><code class=3D"scroll-wra=
pper"><i class=3D"hh18">// note: `Copy` requires that `Clone` is implemente=
d too</i>
<i class=3D"hh4">impl</i> std<i class=3D"hh9">::</i>clone<i class=3D"hh9">:=
:</i><i class=3D"hh13">Clone</i> <i class=3D"hh4">for</i> <i class=3D"hh13"=
>Number</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">fn</i> <i class=3D"hh3">clone</i><i class=3D"hh8">(</i=
><i class=3D"hh5">&amp;</i><i class=3D"hh16">self</i><i class=3D"hh8">)</i>=
 -&gt; <i class=3D"hh13">Self</i> <i class=3D"hh8">{</i>
        <i class=3D"hh13">Self</i> <i class=3D"hh8">{</i> ..<i class=3D"hh5=
">*</i><i class=3D"hh16">self</i> <i class=3D"hh8">}</i>
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">impl</i> std<i class=3D"hh9">::</i>marker<i class=3D"hh9">=
::</i><i class=3D"hh13">Copy</i> <i class=3D"hh4">for</i> <i class=3D"hh13"=
>Number</i> <i class=3D"hh8">{</i><i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"15086">Now, <code>Clone</code> can still be u=
sed:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"15119"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> n =3D <i class=3D"hh13">Number</i> <i class=3D=
"hh8">{</i> <i class=3D"hh6">odd</i><i class=3D"hh9">:</i> <i class=3D"hh1"=
>true</i><i class=3D"hh9">,</i> <i class=3D"hh6">value</i><i class=3D"hh9">=
:</i> <i class=3D"hh1">51</i> <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> m =3D n<i class=3D"hh9">.</i><i class=3D"hh3">=
clone</i><i class=3D"hh8">(</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> o =3D n<i class=3D"hh9">.</i><i class=3D"hh3">=
clone</i><i class=3D"hh8">(</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"15237">But <code>Number</code> values will no=
 longer be moved:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"15283"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> n =3D <i class=3D"hh13">Number</i> <i class=3D=
"hh8">{</i> <i class=3D"hh6">odd</i><i class=3D"hh9">:</i> <i class=3D"hh1"=
>true</i><i class=3D"hh9">,</i> <i class=3D"hh6">value</i><i class=3D"hh9">=
:</i> <i class=3D"hh1">51</i> <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> m =3D n<i class=3D"hh9">;</i> <i class=3D"hh18=
">// `m` is a copy of `n`</i>
    <i class=3D"hh4">let</i> o =3D n<i class=3D"hh9">;</i> <i class=3D"hh18=
">// same. `n` is neither moved nor borrowed.</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"deriving-traits" href=3D"https://fasterthanli.me/a=
rticles/a-half-hour-to-learn-rust#deriving-traits" class=3D"anchor"><h3>Der=
iving traits</h3></a>
<p data-bo=3D"15474">Some traits are so common, they can be implemented aut=
omatically
by using the <code>derive</code> attribute:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"15573"><code class=3D"scroll-wra=
pper"><i class=3D"hh0">#<i class=3D"hh8">[</i>derive<i class=3D"hh8">(</i>C=
lone<i class=3D"hh9">,</i> Copy<i class=3D"hh8">)</i><i class=3D"hh8">]</i>=
</i>
<i class=3D"hh4">struct</i> <i class=3D"hh13">Number</i> <i class=3D"hh8">{=
</i>
    <i class=3D"hh6">odd</i><i class=3D"hh9">:</i> <i class=3D"hh14">bool</=
i><i class=3D"hh9">,</i>
    <i class=3D"hh6">value</i><i class=3D"hh9">:</i> <i class=3D"hh14">i32<=
/i><i class=3D"hh9">,</i>
<i class=3D"hh8">}</i>

<i class=3D"hh18">// this expands to `impl Clone for Number` and `impl Copy=
 for Number` blocks.</i>
</code></figure><a id=3D"generics" href=3D"https://fasterthanli.me/articles=
/a-half-hour-to-learn-rust#generics" class=3D"anchor"><h2>Generics</h2></a>
<a id=3D"generic-functions" href=3D"https://fasterthanli.me/articles/a-half=
-hour-to-learn-rust#generic-functions" class=3D"anchor"><h3>Generic functio=
ns</h3></a>
<p data-bo=3D"15773">Functions can be generic:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"15800"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">foobar</i><i class=3D"hh8">&=
lt;</i><i class=3D"hh13">T</i><i class=3D"hh8">&gt;</i><i class=3D"hh8">(</=
i><i class=3D"hh17">arg</i><i class=3D"hh9">:</i> <i class=3D"hh13">T</i><i=
 class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh18">// do something with `arg`</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"15869">They can have multiple <em>type parame=
ters</em>, which can then be used in the
function=E2=80=99s declaration and its body, instead of concrete types:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"16006"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">foobar</i><i class=3D"hh8">&=
lt;</i><i class=3D"hh13">L</i><i class=3D"hh9">,</i> <i class=3D"hh13">R</i=
><i class=3D"hh8">&gt;</i><i class=3D"hh8">(</i><i class=3D"hh17">left</i><=
i class=3D"hh9">:</i> <i class=3D"hh13">L</i><i class=3D"hh9">,</i> <i clas=
s=3D"hh17">right</i><i class=3D"hh9">:</i> <i class=3D"hh13">R</i><i class=
=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh18">// do something with `left` and `right`</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"type-parameter-constraints-trait-bounds" href=3D"h=
ttps://fasterthanli.me/articles/a-half-hour-to-learn-rust#type-parameter-co=
nstraints-trait-bounds" class=3D"anchor"><h3>Type parameter constraints (tr=
ait bounds)</h3></a>
<p data-bo=3D"16149">Type parameters usually have <em>constraints</em>, so =
you can actually
do something with them.</p>

<p data-bo=3D"16238">The simplest constraints are just trait names:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"16286"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">print</i><i class=3D"hh8">&l=
t;</i><i class=3D"hh13">T</i><i class=3D"hh9">:</i> <i class=3D"hh13">Displ=
ay</i><i class=3D"hh8">&gt;</i><i class=3D"hh8">(</i><i class=3D"hh17">valu=
e</i><i class=3D"hh9">:</i> <i class=3D"hh13">T</i><i class=3D"hh8">)</i> <=
i class=3D"hh8">{</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"value =3D {}"</i><i class=3D"hh9">,</i> value<i class=
=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">print</i><i class=3D"hh8">&lt;</i>=
<i class=3D"hh13">T</i><i class=3D"hh9">:</i> <i class=3D"hh13">Debug</i><i=
 class=3D"hh8">&gt;</i><i class=3D"hh8">(</i><i class=3D"hh17">value</i><i =
class=3D"hh9">:</i> <i class=3D"hh13">T</i><i class=3D"hh8">)</i> <i class=
=3D"hh8">{</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"value =3D {:?}"</i><i class=3D"hh9">,</i> value<i class=
=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"16440">There=E2=80=99s a longer syntax for ty=
pe parameter constraints:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"16497"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">print</i><i class=3D"hh8">&l=
t;</i><i class=3D"hh13">T</i><i class=3D"hh8">&gt;</i><i class=3D"hh8">(</i=
><i class=3D"hh17">value</i><i class=3D"hh9">:</i> <i class=3D"hh13">T</i><=
i class=3D"hh8">)</i>
<i class=3D"hh4">where</i>
    <i class=3D"hh13">T</i><i class=3D"hh9">:</i> <i class=3D"hh13">Display=
</i><i class=3D"hh9">,</i>
<i class=3D"hh8">{</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"value =3D {}"</i><i class=3D"hh9">,</i> value<i class=
=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"16593">Constraints can be more complicated: t=
hey can require a type parameter
to implement multiple traits:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"16695"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">use</i> std<i class=3D"hh9">::</i>fmt<i class=3D"hh9=
">::</i>Debug<i class=3D"hh9">;</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">compare</i><i class=3D"hh8">&lt;</=
i><i class=3D"hh13">T</i><i class=3D"hh8">&gt;</i><i class=3D"hh8">(</i><i =
class=3D"hh17">left</i><i class=3D"hh9">:</i> <i class=3D"hh13">T</i><i cla=
ss=3D"hh9">,</i> <i class=3D"hh17">right</i><i class=3D"hh9">:</i> <i class=
=3D"hh13">T</i><i class=3D"hh8">)</i>
<i class=3D"hh4">where</i>
    <i class=3D"hh13">T</i><i class=3D"hh9">:</i> <i class=3D"hh13">Debug</=
i> + <i class=3D"hh13">PartialEq</i><i class=3D"hh9">,</i>
<i class=3D"hh8">{</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{:?} {} {:?}"</i><i class=3D"hh9">,</i> left<i class=3D=
"hh9">,</i> <i class=3D"hh4">if</i> left =3D=3D right <i class=3D"hh8">{</i=
> <i class=3D"hh10">"=3D=3D"</i> <i class=3D"hh8">}</i> <i class=3D"hh4">el=
se</i> <i class=3D"hh8">{</i> <i class=3D"hh10">"!=3D"</i> <i class=3D"hh8"=
>}</i><i class=3D"hh9">,</i> right<i class=3D"hh8">)</i><i class=3D"hh9"></=
i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh3">compare</i><i class=3D"hh8">(</i><i class=3D"hh10">"te=
a"</i><i class=3D"hh9">,</i> <i class=3D"hh10">"coffee"</i><i class=3D"hh8"=
>)</i><i class=3D"hh9">;</i>
    <i class=3D"hh18">// prints: "tea" !=3D "coffee"</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"monomorphization" href=3D"https://fasterthanli.me/=
articles/a-half-hour-to-learn-rust#monomorphization" class=3D"anchor"><h3>M=
onomorphization</h3></a>
<p data-bo=3D"16983">Generic functions can be thought of as namespaces, con=
taining an infinity
of functions with different concrete types.</p>

<p data-bo=3D"17102">Same as with crates, and modules, and types, generic f=
unctions can be =E2=80=9Cexplored=E2=80=9D
(navigated?) using <code>::</code></p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"17208"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">use</i> std<i class=3D"hh9">::</i>any<i class=3D"hh9">=
::</i>type_name<i class=3D"hh9">;</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{}"</i><i class=3D"hh9">,</i> <i class=3D"hh3">type_nam=
e</i><i class=3D"hh9">::</i><i class=3D"hh8">&lt;</i><i class=3D"hh14">i32<=
/i><i class=3D"hh8">&gt;</i><i class=3D"hh8">(</i><i class=3D"hh8">)</i><i =
class=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i> <i class=3D"=
hh18">// prints "i32"</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{}"</i><i class=3D"hh9">,</i> <i class=3D"hh3">type_nam=
e</i><i class=3D"hh9">::</i><i class=3D"hh8">&lt;</i><i class=3D"hh8">(</i>=
<i class=3D"hh14">f64</i><i class=3D"hh9">,</i> <i class=3D"hh14">char</i><=
i class=3D"hh8">)</i><i class=3D"hh8">&gt;</i><i class=3D"hh8">(</i><i clas=
s=3D"hh8">)</i><i class=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">=
;</i> <i class=3D"hh18">// prints "(f64, char)"</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"17392">This is lovingly called <a href=3D"htt=
ps://turbo.fish/">turbofish syntax</a>, because
<code>::&lt;&gt;</code> looks like a fish.</p>

<a id=3D"generic-structs" href=3D"https://fasterthanli.me/articles/a-half-h=
our-to-learn-rust#generic-structs" class=3D"anchor"><h3>Generic structs</h3=
></a>
<p data-bo=3D"17513">Structs can be generic too:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"17542"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">struct</i> <i class=3D"hh13">Pair</i><i class=3D"hh8=
">&lt;</i><i class=3D"hh13">T</i><i class=3D"hh8">&gt;</i> <i class=3D"hh8"=
>{</i>
    <i class=3D"hh6">a</i><i class=3D"hh9">:</i> <i class=3D"hh13">T</i><i =
class=3D"hh9">,</i>
    <i class=3D"hh6">b</i><i class=3D"hh9">:</i> <i class=3D"hh13">T</i><i =
class=3D"hh9">,</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">print_type_name</i><i class=3D"hh8=
">&lt;</i><i class=3D"hh13">T</i><i class=3D"hh8">&gt;</i><i class=3D"hh8">=
(</i><i class=3D"hh17">_val</i><i class=3D"hh9">:</i> <i class=3D"hh5">&amp=
;</i><i class=3D"hh13">T</i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{}"</i><i class=3D"hh9">,</i> std<i class=3D"hh9">::</i=
>any<i class=3D"hh9">::</i><i class=3D"hh3">type_name</i><i class=3D"hh9">:=
:</i><i class=3D"hh8">&lt;</i><i class=3D"hh13">T</i><i class=3D"hh8">&gt;<=
/i><i class=3D"hh8">(</i><i class=3D"hh8">)</i><i class=3D"hh8">)</i><i cla=
ss=3D"hh9"></i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> p1 =3D <i class=3D"hh13">Pair</i> <i class=3D"=
hh8">{</i> <i class=3D"hh6">a</i><i class=3D"hh9">:</i> <i class=3D"hh1">3<=
/i><i class=3D"hh9">,</i> <i class=3D"hh6">b</i><i class=3D"hh9">:</i> <i c=
lass=3D"hh1">9</i> <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> p2 =3D <i class=3D"hh13">Pair</i> <i class=3D"=
hh8">{</i> <i class=3D"hh6">a</i><i class=3D"hh9">:</i> <i class=3D"hh1">tr=
ue</i><i class=3D"hh9">,</i> <i class=3D"hh6">b</i><i class=3D"hh9">:</i> <=
i class=3D"hh1">false</i> <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">print_type_name</i><i class=3D"hh8">(</i><i class=3D"h=
h5">&amp;</i>p1<i class=3D"hh8">)</i><i class=3D"hh9">;</i> <i class=3D"hh1=
8">// prints "Pair&lt;i32&gt;"</i>
    <i class=3D"hh3">print_type_name</i><i class=3D"hh8">(</i><i class=3D"h=
h5">&amp;</i>p2<i class=3D"hh8">)</i><i class=3D"hh9">;</i> <i class=3D"hh1=
8">// prints "Pair&lt;bool&gt;"</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"example-vec-t" href=3D"https://fasterthanli.me/art=
icles/a-half-hour-to-learn-rust#example-vec-t" class=3D"anchor"><h3>Example=
: <code>Vec&lt;T&gt;</code></h3></a>
<p data-bo=3D"17889">The standard library type <code>Vec</code> (~ a heap-a=
llocated array), is generic:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"17962"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> <i class=3D"hh4">mut</i> v1 =3D <i class=3D"hh=
13">Vec</i><i class=3D"hh9">::</i><i class=3D"hh3">new</i><i class=3D"hh8">=
(</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    v1<i class=3D"hh9">.</i><i class=3D"hh3">push</i><i class=3D"hh8">(</i>=
<i class=3D"hh1">1</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> <i class=3D"hh4">mut</i> v2 =3D <i class=3D"hh=
13">Vec</i><i class=3D"hh9">::</i><i class=3D"hh3">new</i><i class=3D"hh8">=
(</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    v2<i class=3D"hh9">.</i><i class=3D"hh3">push</i><i class=3D"hh8">(</i>=
<i class=3D"hh1">false</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">print_type_name</i><i class=3D"hh8">(</i><i class=3D"h=
h5">&amp;</i>v1<i class=3D"hh8">)</i><i class=3D"hh9">;</i> <i class=3D"hh1=
8">// prints "Vec&lt;i32&gt;"</i>
    <i class=3D"hh3">print_type_name</i><i class=3D"hh8">(</i><i class=3D"h=
h5">&amp;</i>v2<i class=3D"hh8">)</i><i class=3D"hh9">;</i> <i class=3D"hh1=
8">// prints "Vec&lt;bool&gt;"</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"18178">Speaking of <code>Vec</code>, it comes=
 with a macro that gives more or less =E2=80=9Cvec literals=E2=80=9D:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"18260"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> v1 =3D <i class=3D"hh3">vec</i><i class=3D"hh3=
">!</i><i class=3D"hh8">[</i><i class=3D"hh1">1</i><i class=3D"hh9">,</i> <=
i class=3D"hh1">2</i><i class=3D"hh9">,</i> <i class=3D"hh1">3</i><i class=
=3D"hh8">]</i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> v2 =3D <i class=3D"hh3">vec</i><i class=3D"hh3=
">!</i><i class=3D"hh8">[</i><i class=3D"hh1">true</i><i class=3D"hh9">,</i=
> <i class=3D"hh1">false</i><i class=3D"hh9">,</i> <i class=3D"hh1">true</i=
><i class=3D"hh8">]</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
    <i class=3D"hh3">print_type_name</i><i class=3D"hh8">(</i><i class=3D"h=
h5">&amp;</i>v1<i class=3D"hh8">)</i><i class=3D"hh9">;</i> <i class=3D"hh1=
8">// prints "Vec&lt;i32&gt;"</i>
    <i class=3D"hh3">print_type_name</i><i class=3D"hh8">(</i><i class=3D"h=
h5">&amp;</i>v2<i class=3D"hh8">)</i><i class=3D"hh9">;</i> <i class=3D"hh1=
8">// prints "Vec&lt;bool&gt;"</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"macros" href=3D"https://fasterthanli.me/articles/a=
-half-hour-to-learn-rust#macros" class=3D"anchor"><h2>Macros</h2></a>
<p data-bo=3D"18459">All of <code>name!()</code>, <code>name![]</code> or <=
code>name!{}</code> invoke a macro. Macros just expand to
regular code.</p>

<p data-bo=3D"18553">In fact, <code>println</code> is a macro:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"18585"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{}"</i><i class=3D"hh9">,</i> <i class=3D"hh10">"Hello =
there!"</i><i class=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i=
>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"18648">This expands to something that has the=
 same effect as:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"18704"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">use</i> std<i class=3D"hh9">::</i>io<i class=3D"hh9">:=
:</i><i class=3D"hh8">{</i><i class=3D"hh16">self</i><i class=3D"hh9">,</i>=
 Write<i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    io<i class=3D"hh9">::</i><i class=3D"hh3">stdout</i><i class=3D"hh8">(<=
/i><i class=3D"hh8">)</i><i class=3D"hh9">.</i><i class=3D"hh3">lock</i><i =
class=3D"hh8">(</i><i class=3D"hh8">)</i><i class=3D"hh9">.</i><i class=3D"=
hh3">write_all</i><i class=3D"hh8">(</i><i class=3D"hh10">b"Hello there!\n"=
</i><i class=3D"hh8">)</i><i class=3D"hh9">.</i><i class=3D"hh3">unwrap</i>=
<i class=3D"hh8">(</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"the-panic-macro" href=3D"https://fasterthanli.me/a=
rticles/a-half-hour-to-learn-rust#the-panic-macro" class=3D"anchor"><h2>The=
 <code>panic!</code> macro</h2></a>
<p data-bo=3D"18849"><code>panic</code> is also a macro. It violently stops=
 execution with an error
message, and the file name / line number of the error, if enabled:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"18985"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh3">panic</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i><=
i class=3D"hh10">"This panics"</i><i class=3D"hh8">)</i><i class=3D"hh9"></=
i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>
<i class=3D"hh18">// output: thread 'main' panicked at 'This panics', src/m=
ain.rs:3:5</i>
</code></figure><a id=3D"functions-that-panic" href=3D"https://fasterthanli=
.me/articles/a-half-hour-to-learn-rust#functions-that-panic" class=3D"ancho=
r"><h2>Functions that panic</h2></a>
<p data-bo=3D"19132">Some methods also panic. For example, the <code>Option=
</code> type can contain something,
or it can contain nothing. If <code>.unwrap()</code> is called on it, and i=
t contains
nothing, it panics:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"19307"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> o1<i class=3D"hh9">:</i> <i class=3D"hh13">Opt=
ion</i><i class=3D"hh8">&lt;</i><i class=3D"hh14">i32</i><i class=3D"hh8">&=
gt;</i> =3D <i class=3D"hh3">Some</i><i class=3D"hh8">(</i><i class=3D"hh1"=
>128</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    o1<i class=3D"hh9">.</i><i class=3D"hh3">unwrap</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i><i class=3D"hh9">;</i> <i class=3D"hh18">// this is=
 fine</i>

    <i class=3D"hh4">let</i> o2<i class=3D"hh9">:</i> <i class=3D"hh13">Opt=
ion</i><i class=3D"hh8">&lt;</i><i class=3D"hh14">i32</i><i class=3D"hh8">&=
gt;</i> =3D None<i class=3D"hh9">;</i>
    o2<i class=3D"hh9">.</i><i class=3D"hh3">unwrap</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i><i class=3D"hh9">;</i> <i class=3D"hh18">// this pa=
nics!</i>
<i class=3D"hh8">}</i>

<i class=3D"hh18">// output: thread 'main' panicked at 'called `Option::unw=
rap()` on a `None` value', src/libcore/option.rs:378:21</i>
</code></figure><a id=3D"enums-sum-types" href=3D"https://fasterthanli.me/a=
rticles/a-half-hour-to-learn-rust#enums-sum-types" class=3D"anchor"><h2>Enu=
ms (sum types)</h2></a>
<p data-bo=3D"19606"><code>Option</code> is not a struct - it=E2=80=99s an =
<code>enum</code>, with two variants.</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"19669"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">enum</i> <i class=3D"hh13">Option</i><i class=3D"hh8=
">&lt;</i><i class=3D"hh13">T</i><i class=3D"hh8">&gt;</i> <i class=3D"hh8"=
>{</i>
    None<i class=3D"hh9">,</i>
    Some<i class=3D"hh8">(</i><i class=3D"hh13">T</i><i class=3D"hh8">)</i>=
<i class=3D"hh9">,</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">impl</i><i class=3D"hh8">&lt;</i><i class=3D"hh13">T</i><i=
 class=3D"hh8">&gt;</i> <i class=3D"hh13">Option</i><i class=3D"hh8">&lt;</=
i><i class=3D"hh13">T</i><i class=3D"hh8">&gt;</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">fn</i> <i class=3D"hh3">unwrap</i><i class=3D"hh8">(</=
i><i class=3D"hh16">self</i><i class=3D"hh8">)</i> -&gt; <i class=3D"hh13">=
T</i> <i class=3D"hh8">{</i>
        <i class=3D"hh18">// enums variants can be used in patterns:</i>
        <i class=3D"hh4">match</i> <i class=3D"hh16">self</i> <i class=3D"h=
h8">{</i>
            <i class=3D"hh13">Self</i><i class=3D"hh9">::</i>Some<i class=
=3D"hh8">(</i>t<i class=3D"hh8">)</i> =3D&gt; t<i class=3D"hh9">,</i>
            <i class=3D"hh13">Self</i><i class=3D"hh9">::</i>None =3D&gt; <=
i class=3D"hh3">panic</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i><i cla=
ss=3D"hh10">".unwrap() called on a None option"</i><i class=3D"hh8">)</i><i=
 class=3D"hh9"></i><i class=3D"hh9">,</i>
        <i class=3D"hh8">}</i>
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">use</i> <i class=3D"hh16">self</i><i class=3D"hh9">::</i>O=
ption<i class=3D"hh9">::</i><i class=3D"hh8">{</i>None<i class=3D"hh9">,</i=
> Some<i class=3D"hh8">}</i><i class=3D"hh9">;</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> o1<i class=3D"hh9">:</i> <i class=3D"hh13">Opt=
ion</i><i class=3D"hh8">&lt;</i><i class=3D"hh14">i32</i><i class=3D"hh8">&=
gt;</i> =3D <i class=3D"hh3">Some</i><i class=3D"hh8">(</i><i class=3D"hh1"=
>128</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    o1<i class=3D"hh9">.</i><i class=3D"hh3">unwrap</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i><i class=3D"hh9">;</i> <i class=3D"hh18">// this is=
 fine</i>

    <i class=3D"hh4">let</i> o2<i class=3D"hh9">:</i> <i class=3D"hh13">Opt=
ion</i><i class=3D"hh8">&lt;</i><i class=3D"hh14">i32</i><i class=3D"hh8">&=
gt;</i> =3D None<i class=3D"hh9">;</i>
    o2<i class=3D"hh9">.</i><i class=3D"hh3">unwrap</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i><i class=3D"hh9">;</i> <i class=3D"hh18">// this pa=
nics!</i>
<i class=3D"hh8">}</i>

<i class=3D"hh18">// output: thread 'main' panicked at '.unwrap() called on=
 a None option', src/main.rs:11:27</i>
</code></figure><p data-bo=3D"20242"><code>Result</code> is also an enum, i=
t can either contain something, or an error:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"20315"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">enum</i> <i class=3D"hh13">Result</i><i class=3D"hh8=
">&lt;</i><i class=3D"hh13">T</i><i class=3D"hh9">,</i> <i class=3D"hh13">E=
</i><i class=3D"hh8">&gt;</i> <i class=3D"hh8">{</i>
    Ok<i class=3D"hh8">(</i><i class=3D"hh13">T</i><i class=3D"hh8">)</i><i=
 class=3D"hh9">,</i>
    Err<i class=3D"hh8">(</i><i class=3D"hh13">E</i><i class=3D"hh8">)</i><=
i class=3D"hh9">,</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"20373">It also panics when unwrapped and cont=
aining an error.</p>

<a id=3D"lifetimes" href=3D"https://fasterthanli.me/articles/a-half-hour-to=
-learn-rust#lifetimes" class=3D"anchor"><h2>Lifetimes</h2></a>
<p data-bo=3D"20443">Variables bindings have a =E2=80=9Clifetime=E2=80=9D:<=
/p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"20482"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh18">// `x` doesn't exist yet</i>
    <i class=3D"hh8">{</i>
        <i class=3D"hh4">let</i> x =3D <i class=3D"hh1">42</i><i class=3D"h=
h9">;</i> <i class=3D"hh18">// `x` starts existing</i>
        <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">=
(</i><i class=3D"hh10">"x =3D {}"</i><i class=3D"hh9">,</i> x<i class=3D"hh=
8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
        <i class=3D"hh18">// `x` stops existing</i>
    <i class=3D"hh8">}</i>
    <i class=3D"hh18">// `x` no longer exists</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"20682">Similarly, references have a lifetime:=
</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"20722"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh18">// `x` doesn't exist yet</i>
    <i class=3D"hh8">{</i>
        <i class=3D"hh4">let</i> x =3D <i class=3D"hh1">42</i><i class=3D"h=
h9">;</i> <i class=3D"hh18">// `x` starts existing</i>
        <i class=3D"hh4">let</i> x_ref =3D <i class=3D"hh5">&amp;</i>x<i cl=
ass=3D"hh9">;</i> <i class=3D"hh18">// `x_ref` starts existing - it borrows=
 `x`</i>
        <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">=
(</i><i class=3D"hh10">"x_ref =3D {}"</i><i class=3D"hh9">,</i> x_ref<i cla=
ss=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
        <i class=3D"hh18">// `x_ref` stops existing</i>
        <i class=3D"hh18">// `x` stops existing</i>
    <i class=3D"hh8">}</i>
    <i class=3D"hh18">// `x` no longer exists</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"21032">The lifetime of a reference cannot exc=
eed the lifetime of the variable
binding it borrows:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"21124"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> x_ref =3D <i class=3D"hh8">{</i>
        <i class=3D"hh4">let</i> x =3D <i class=3D"hh1">42</i><i class=3D"h=
h9">;</i>
        <i class=3D"hh5">&amp;</i>x
    <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"x_ref =3D {}"</i><i class=3D"hh9">,</i> x_ref<i class=
=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
    <i class=3D"hh18">// error: `x` does not live long enough</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"borrowing-rules-one-or-more-immutable-borrows-xor-=
one-mutable-borrow" href=3D"https://fasterthanli.me/articles/a-half-hour-to=
-learn-rust#borrowing-rules-one-or-more-immutable-borrows-xor-one-mutable-b=
orrow" class=3D"anchor"><h3>Borrowing rules (one or more immutable borrows =
XOR one mutable borrow)</h3></a>
<p data-bo=3D"21362">A variable binding can be immutably borrowed multiple =
times:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"21424"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> x =3D <i class=3D"hh1">42</i><i class=3D"hh9">=
;</i>
    <i class=3D"hh4">let</i> x_ref1 =3D <i class=3D"hh5">&amp;</i>x<i class=
=3D"hh9">;</i>
    <i class=3D"hh4">let</i> x_ref2 =3D <i class=3D"hh5">&amp;</i>x<i class=
=3D"hh9">;</i>
    <i class=3D"hh4">let</i> x_ref3 =3D <i class=3D"hh5">&amp;</i>x<i class=
=3D"hh9">;</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{} {} {}"</i><i class=3D"hh9">,</i> x_ref1<i class=3D"h=
h9">,</i> x_ref2<i class=3D"hh9">,</i> x_ref3<i class=3D"hh8">)</i><i class=
=3D"hh9"></i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"21580">While borrowed, a variable binding can=
not be mutated:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"21635"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> <i class=3D"hh4">mut</i> x =3D <i class=3D"hh1=
">42</i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> x_ref =3D <i class=3D"hh5">&amp;</i>x<i class=
=3D"hh9">;</i>
    x =3D <i class=3D"hh1">13</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"x_ref =3D {}"</i><i class=3D"hh9">,</i> x_ref<i class=
=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
    <i class=3D"hh18">// error: cannot assign to `x` because it is borrowed=
</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"21807">While immutably borrowed, a variable c=
annot be <em>mutably borrowed</em>:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"21875"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> <i class=3D"hh4">mut</i> x =3D <i class=3D"hh1=
">42</i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> x_ref1 =3D <i class=3D"hh5">&amp;</i>x<i class=
=3D"hh9">;</i>
    <i class=3D"hh4">let</i> x_ref2 =3D <i class=3D"hh5">&amp;</i><i class=
=3D"hh4">mut</i> x<i class=3D"hh9">;</i>
    <i class=3D"hh18">// error: cannot borrow `x` as mutable because it is =
also borrowed as immutable</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"x_ref1 =3D {}"</i><i class=3D"hh9">,</i> x_ref1<i class=
=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"functions-generic-over-lifetimes" href=3D"https://=
fasterthanli.me/articles/a-half-hour-to-learn-rust#functions-generic-over-l=
ifetimes" class=3D"anchor"><h3>Functions generic over lifetimes</h3></a>
<p data-bo=3D"22127">References in function arguments also have lifetimes:<=
/p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"22182"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">print</i><i class=3D"hh8">(<=
/i><i class=3D"hh17">x</i><i class=3D"hh9">:</i> <i class=3D"hh5">&amp;</i>=
<i class=3D"hh14">i32</i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh18">// `x` is borrowed (from the outside) for the</i>
    <i class=3D"hh18">// entire time this function is called.</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"22311">Functions with reference arguments can=
 be called with borrows
that have different lifetimes, so:</p>

<ul><li>All functions that take references are generic</li>
<li>Lifetimes are generic parameters</li>
</ul>
<p data-bo=3D"22498">Lifetimes=E2=80=99 names start with a single quote, <c=
ode>'</code>:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"22548"><code class=3D"scroll-wra=
pper"><i class=3D"hh18">// elided (non-named) lifetimes:</i>
<i class=3D"hh4">fn</i> <i class=3D"hh3">print</i><i class=3D"hh8">(</i><i =
class=3D"hh17">x</i><i class=3D"hh9">:</i> <i class=3D"hh5">&amp;</i><i cla=
ss=3D"hh14">i32</i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i><i class=3D=
"hh8">}</i>

<i class=3D"hh18">// named lifetimes:</i>
<i class=3D"hh4">fn</i> <i class=3D"hh3">print</i><i class=3D"hh8">&lt;</i>=
<i class=3D"hh5">'</i><i class=3D"hh20">a</i><i class=3D"hh8">&gt;</i><i cl=
ass=3D"hh8">(</i><i class=3D"hh17">x</i><i class=3D"hh9">:</i> <i class=3D"=
hh5">&amp;</i><i class=3D"hh5">'</i><i class=3D"hh20">a</i> <i class=3D"hh1=
4">i32</i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i><i class=3D"hh8">}</=
i>
</code></figure><p data-bo=3D"22664">This allows returning references whose=
 lifetime depend on the
lifetime of the arguments:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"22754"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">struct</i> <i class=3D"hh13">Number</i> <i class=3D"=
hh8">{</i>
    <i class=3D"hh6">value</i><i class=3D"hh9">:</i> <i class=3D"hh14">i32<=
/i><i class=3D"hh9">,</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">number_value</i><i class=3D"hh8">&=
lt;</i><i class=3D"hh5">'</i><i class=3D"hh20">a</i><i class=3D"hh8">&gt;</=
i><i class=3D"hh8">(</i><i class=3D"hh17">num</i><i class=3D"hh9">:</i> <i =
class=3D"hh5">&amp;</i><i class=3D"hh5">'</i><i class=3D"hh20">a</i> <i cla=
ss=3D"hh13">Number</i><i class=3D"hh8">)</i> -&gt; <i class=3D"hh5">&amp;</=
i><i class=3D"hh5">'</i><i class=3D"hh20">a</i> <i class=3D"hh14">i32</i> <=
i class=3D"hh8">{</i>
    <i class=3D"hh5">&amp;</i>num<i class=3D"hh9">.</i><i class=3D"hh6">val=
ue</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> n =3D <i class=3D"hh13">Number</i> <i class=3D=
"hh8">{</i> <i class=3D"hh6">value</i><i class=3D"hh9">:</i> <i class=3D"hh=
1">47</i> <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> v =3D <i class=3D"hh3">number_value</i><i clas=
s=3D"hh8">(</i><i class=3D"hh5">&amp;</i>n<i class=3D"hh8">)</i><i class=3D=
"hh9">;</i>
    <i class=3D"hh18">// `v` borrows `n` (immutably), thus: `v` cannot outl=
ive `n`.</i>
    <i class=3D"hh18">// While `v` exists, `n` cannot be mutably borrowed, =
mutated, moved, etc.</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"lifetime-elision" href=3D"https://fasterthanli.me/=
articles/a-half-hour-to-learn-rust#lifetime-elision" class=3D"anchor"><h3>L=
ifetime elision</h3></a>
<p data-bo=3D"23114">When there is a <em>single</em> input lifetime, it doe=
sn=E2=80=99t need to be named,
and everything has the same lifetime, so the two functions below are
equivalent:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"23266"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">number_value</i><i class=3D"=
hh8">&lt;</i><i class=3D"hh5">'</i><i class=3D"hh20">a</i><i class=3D"hh8">=
&gt;</i><i class=3D"hh8">(</i><i class=3D"hh17">num</i><i class=3D"hh9">:</=
i> <i class=3D"hh5">&amp;</i><i class=3D"hh5">'</i><i class=3D"hh20">a</i> =
<i class=3D"hh13">Number</i><i class=3D"hh8">)</i> -&gt; <i class=3D"hh5">&=
amp;</i><i class=3D"hh5">'</i><i class=3D"hh20">a</i> <i class=3D"hh14">i32=
</i> <i class=3D"hh8">{</i>
    <i class=3D"hh5">&amp;</i>num<i class=3D"hh9">.</i><i class=3D"hh6">val=
ue</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">number_value</i><i class=3D"hh8">(=
</i><i class=3D"hh17">num</i><i class=3D"hh9">:</i> <i class=3D"hh5">&amp;<=
/i><i class=3D"hh13">Number</i><i class=3D"hh8">)</i> -&gt; <i class=3D"hh5=
">&amp;</i><i class=3D"hh14">i32</i> <i class=3D"hh8">{</i>
    <i class=3D"hh5">&amp;</i>num<i class=3D"hh9">.</i><i class=3D"hh6">val=
ue</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"structs-generic-over-lifetimes" href=3D"https://fa=
sterthanli.me/articles/a-half-hour-to-learn-rust#structs-generic-over-lifet=
imes" class=3D"anchor"><h3>Structs generic over lifetimes</h3></a>
<p data-bo=3D"23440">Structs can also be <em>generic over lifetimes</em>, w=
hich allows them to
hold references:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"23525"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">struct</i> <i class=3D"hh13">NumRef</i><i class=3D"h=
h8">&lt;</i><i class=3D"hh5">'</i><i class=3D"hh20">a</i><i class=3D"hh8">&=
gt;</i> <i class=3D"hh8">{</i>
    <i class=3D"hh6">x</i><i class=3D"hh9">:</i> <i class=3D"hh5">&amp;</i>=
<i class=3D"hh5">'</i><i class=3D"hh20">a</i> <i class=3D"hh14">i32</i><i c=
lass=3D"hh9">,</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> x<i class=3D"hh9">:</i> <i class=3D"hh14">i32<=
/i> =3D <i class=3D"hh1">99</i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> x_ref =3D <i class=3D"hh13">NumRef</i> <i clas=
s=3D"hh8">{</i> <i class=3D"hh6">x</i><i class=3D"hh9">:</i> <i class=3D"hh=
5">&amp;</i>x <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    <i class=3D"hh18">// `x_ref` cannot outlive `x`, etc.</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"23686">The same code, but with an additional =
function:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"23735"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">struct</i> <i class=3D"hh13">NumRef</i><i class=3D"h=
h8">&lt;</i><i class=3D"hh5">'</i><i class=3D"hh20">a</i><i class=3D"hh8">&=
gt;</i> <i class=3D"hh8">{</i>
    <i class=3D"hh6">x</i><i class=3D"hh9">:</i> <i class=3D"hh5">&amp;</i>=
<i class=3D"hh5">'</i><i class=3D"hh20">a</i> <i class=3D"hh14">i32</i><i c=
lass=3D"hh9">,</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">as_num_ref</i><i class=3D"hh8">&lt=
;</i><i class=3D"hh5">'</i><i class=3D"hh20">a</i><i class=3D"hh8">&gt;</i>=
<i class=3D"hh8">(</i><i class=3D"hh17">x</i><i class=3D"hh9">:</i> <i clas=
s=3D"hh5">&amp;</i><i class=3D"hh5">'</i><i class=3D"hh20">a</i> <i class=
=3D"hh14">i32</i><i class=3D"hh8">)</i> -&gt; <i class=3D"hh13">NumRef</i><=
i class=3D"hh8">&lt;</i><i class=3D"hh5">'</i><i class=3D"hh20">a</i><i cla=
ss=3D"hh8">&gt;</i> <i class=3D"hh8">{</i>
    <i class=3D"hh13">NumRef</i> <i class=3D"hh8">{</i> <i class=3D"hh6">x<=
/i><i class=3D"hh9">:</i> <i class=3D"hh5">&amp;</i>x <i class=3D"hh8">}</i=
>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> x<i class=3D"hh9">:</i> <i class=3D"hh14">i32<=
/i> =3D <i class=3D"hh1">99</i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> x_ref =3D <i class=3D"hh3">as_num_ref</i><i cl=
ass=3D"hh8">(</i><i class=3D"hh5">&amp;</i>x<i class=3D"hh8">)</i><i class=
=3D"hh9">;</i>
    <i class=3D"hh18">// `x_ref` cannot outlive `x`, etc.</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"23964">The same code, but with =E2=80=9Celide=
d=E2=80=9D lifetimes:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"24009"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">struct</i> <i class=3D"hh13">NumRef</i><i class=3D"h=
h8">&lt;</i><i class=3D"hh5">'</i><i class=3D"hh20">a</i><i class=3D"hh8">&=
gt;</i> <i class=3D"hh8">{</i>
    <i class=3D"hh6">x</i><i class=3D"hh9">:</i> <i class=3D"hh5">&amp;</i>=
<i class=3D"hh5">'</i><i class=3D"hh20">a</i> <i class=3D"hh14">i32</i><i c=
lass=3D"hh9">,</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">as_num_ref</i><i class=3D"hh8">(</=
i><i class=3D"hh17">x</i><i class=3D"hh9">:</i> <i class=3D"hh5">&amp;</i><=
i class=3D"hh14">i32</i><i class=3D"hh8">)</i> -&gt; <i class=3D"hh13">NumR=
ef</i><i class=3D"hh8">&lt;</i><i class=3D"hh5">'</i><i class=3D"hh20">_</i=
><i class=3D"hh8">&gt;</i> <i class=3D"hh8">{</i>
    <i class=3D"hh13">NumRef</i> <i class=3D"hh8">{</i> <i class=3D"hh6">x<=
/i><i class=3D"hh9">:</i> <i class=3D"hh5">&amp;</i>x <i class=3D"hh8">}</i=
>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> x<i class=3D"hh9">:</i> <i class=3D"hh14">i32<=
/i> =3D <i class=3D"hh1">99</i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> x_ref =3D <i class=3D"hh3">as_num_ref</i><i cl=
ass=3D"hh8">(</i><i class=3D"hh5">&amp;</i>x<i class=3D"hh8">)</i><i class=
=3D"hh9">;</i>
    <i class=3D"hh18">// `x_ref` cannot outlive `x`, etc.</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"implementations-generic-over-lifetimes" href=3D"ht=
tps://fasterthanli.me/articles/a-half-hour-to-learn-rust#implementations-ge=
neric-over-lifetimes" class=3D"anchor"><h3>Implementations generic over lif=
etimes</h3></a>
<p data-bo=3D"24275"><code>impl</code> blocks can be generic over lifetimes=
 too:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"24325"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">impl</i><i class=3D"hh8">&lt;</i><i class=3D"hh5">'<=
/i><i class=3D"hh20">a</i><i class=3D"hh8">&gt;</i> <i class=3D"hh13">NumRe=
f</i><i class=3D"hh8">&lt;</i><i class=3D"hh5">'</i><i class=3D"hh20">a</i>=
<i class=3D"hh8">&gt;</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">fn</i> <i class=3D"hh3">as_i32_ref</i><i class=3D"hh8"=
>(</i><i class=3D"hh5">&amp;</i><i class=3D"hh5">'</i><i class=3D"hh20">a</=
i> <i class=3D"hh16">self</i><i class=3D"hh8">)</i> -&gt; <i class=3D"hh5">=
&amp;</i><i class=3D"hh5">'</i><i class=3D"hh20">a</i> <i class=3D"hh14">i3=
2</i> <i class=3D"hh8">{</i>
        <i class=3D"hh16">self</i><i class=3D"hh9">.</i><i class=3D"hh6">x<=
/i>
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> x<i class=3D"hh9">:</i> <i class=3D"hh14">i32<=
/i> =3D <i class=3D"hh1">99</i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> x_num_ref =3D <i class=3D"hh13">NumRef</i> <i =
class=3D"hh8">{</i> <i class=3D"hh6">x</i><i class=3D"hh9">:</i> <i class=
=3D"hh5">&amp;</i>x <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> x_i32_ref =3D x_num_ref<i class=3D"hh9">.</i><=
i class=3D"hh3">as_i32_ref</i><i class=3D"hh8">(</i><i class=3D"hh8">)</i><=
i class=3D"hh9">;</i>
    <i class=3D"hh18">// neither ref can outlive `x`</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"24577">But you can do elision (=E2=80=9Cto el=
ide=E2=80=9D) there too:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"24625"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">impl</i><i class=3D"hh8">&lt;</i><i class=3D"hh5">'<=
/i><i class=3D"hh20">a</i><i class=3D"hh8">&gt;</i> <i class=3D"hh13">NumRe=
f</i><i class=3D"hh8">&lt;</i><i class=3D"hh5">'</i><i class=3D"hh20">a</i>=
<i class=3D"hh8">&gt;</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">fn</i> <i class=3D"hh3">as_i32_ref</i><i class=3D"hh8"=
>(</i><i class=3D"hh5">&amp;</i><i class=3D"hh16">self</i><i class=3D"hh8">=
)</i> -&gt; <i class=3D"hh5">&amp;</i><i class=3D"hh14">i32</i> <i class=3D=
"hh8">{</i>
        <i class=3D"hh16">self</i><i class=3D"hh9">.</i><i class=3D"hh6">x<=
/i>
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"24718">You can elide even harder, if you neve=
r need the name:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"24774"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">impl</i> <i class=3D"hh13">NumRef</i><i class=3D"hh8=
">&lt;</i><i class=3D"hh5">'</i><i class=3D"hh20">_</i><i class=3D"hh8">&gt=
;</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">fn</i> <i class=3D"hh3">as_i32_ref</i><i class=3D"hh8"=
>(</i><i class=3D"hh5">&amp;</i><i class=3D"hh16">self</i><i class=3D"hh8">=
)</i> -&gt; <i class=3D"hh5">&amp;</i><i class=3D"hh14">i32</i> <i class=3D=
"hh8">{</i>
        <i class=3D"hh16">self</i><i class=3D"hh9">.</i><i class=3D"hh6">x<=
/i>
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"the-static-lifetime" href=3D"https://fasterthanli.=
me/articles/a-half-hour-to-learn-rust#the-static-lifetime" class=3D"anchor"=
><h2>The <code>'static</code> lifetime</h2></a>
<p data-bo=3D"24890">There is a special lifetime, named <code>'static</code=
>, which is valid for the
entire program=E2=80=99s lifetime.</p>

<p data-bo=3D"24987">String literals are <code>'static</code>:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"25019"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">struct</i> <i class=3D"hh13">Person</i> <i class=3D"=
hh8">{</i>
    <i class=3D"hh6">name</i><i class=3D"hh9">:</i> <i class=3D"hh5">&amp;<=
/i><i class=3D"hh5">'</i><i class=3D"hh20">static</i> <i class=3D"hh14">str=
</i><i class=3D"hh9">,</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> p =3D <i class=3D"hh13">Person</i> <i class=3D=
"hh8">{</i>
        <i class=3D"hh6">name</i><i class=3D"hh9">:</i> <i class=3D"hh10">"=
fasterthanlime"</i><i class=3D"hh9">,</i>
    <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"25149">But references to a <code>String</code=
> are not static:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"25195"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">struct</i> <i class=3D"hh13">Person</i> <i class=3D"=
hh8">{</i>
    <i class=3D"hh6">name</i><i class=3D"hh9">:</i> <i class=3D"hh5">&amp;<=
/i><i class=3D"hh5">'</i><i class=3D"hh20">static</i> <i class=3D"hh14">str=
</i><i class=3D"hh9">,</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> name =3D <i class=3D"hh3">format</i><i class=
=3D"hh3">!</i><i class=3D"hh8">(</i><i class=3D"hh10">"fasterthan{}"</i><i =
class=3D"hh9">,</i> <i class=3D"hh10">"lime"</i><i class=3D"hh8">)</i><i cl=
ass=3D"hh9"></i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> p =3D <i class=3D"hh13">Person</i> <i class=3D=
"hh8">{</i> <i class=3D"hh6">name</i><i class=3D"hh9">:</i> <i class=3D"hh5=
">&amp;</i>name <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    <i class=3D"hh18">// error: `name` does not live long enough</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"25396">In that last example, the local <code>=
name</code> is not a <code>&amp;'static str</code>, it=E2=80=99s a
<code>String</code>. It=E2=80=99s been allocated dynamically, and it will b=
e freed. Its lifetime
is <em>less</em> than the whole program (even though it happens to be in <c=
ode>main</code>).</p>

<p data-bo=3D"25621">To store a non-<code>'static</code> string in <code>Pe=
rson</code>, it needs to either:</p>

<p data-bo=3D"25687">A) Be generic over a lifetime:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"25719"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">struct</i> <i class=3D"hh13">Person</i><i class=3D"h=
h8">&lt;</i><i class=3D"hh5">'</i><i class=3D"hh20">a</i><i class=3D"hh8">&=
gt;</i> <i class=3D"hh8">{</i>
    <i class=3D"hh6">name</i><i class=3D"hh9">:</i> <i class=3D"hh5">&amp;<=
/i><i class=3D"hh5">'</i><i class=3D"hh20">a</i> <i class=3D"hh14">str</i><=
i class=3D"hh9">,</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> name =3D <i class=3D"hh3">format</i><i class=
=3D"hh3">!</i><i class=3D"hh8">(</i><i class=3D"hh10">"fasterthan{}"</i><i =
class=3D"hh9">,</i> <i class=3D"hh10">"lime"</i><i class=3D"hh8">)</i><i cl=
ass=3D"hh9"></i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> p =3D <i class=3D"hh13">Person</i> <i class=3D=
"hh8">{</i> <i class=3D"hh6">name</i><i class=3D"hh9">:</i> <i class=3D"hh5=
">&amp;</i>name <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    <i class=3D"hh18">// `p` cannot outlive `name`</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"25905">or</p>

<p data-bo=3D"25909">B) Take ownership of the string</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"25942"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">struct</i> <i class=3D"hh13">Person</i> <i class=3D"=
hh8">{</i>
    <i class=3D"hh6">name</i><i class=3D"hh9">:</i> <i class=3D"hh13">Strin=
g</i><i class=3D"hh9">,</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> name =3D <i class=3D"hh3">format</i><i class=
=3D"hh3">!</i><i class=3D"hh8">(</i><i class=3D"hh10">"fasterthan{}"</i><i =
class=3D"hh9">,</i> <i class=3D"hh10">"lime"</i><i class=3D"hh8">)</i><i cl=
ass=3D"hh9"></i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> p =3D <i class=3D"hh13">Person</i> <i class=3D=
"hh8">{</i> <i class=3D"hh6">name</i><i class=3D"hh9">:</i> name <i class=
=3D"hh8">}</i><i class=3D"hh9">;</i>
    <i class=3D"hh18">// `name` was moved into `p`, their lifetimes are no =
longer tied.</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"struct-literal-assignment-shorthand" href=3D"https=
://fasterthanli.me/articles/a-half-hour-to-learn-rust#struct-literal-assign=
ment-shorthand" class=3D"anchor"><h2>Struct literal assignment shorthand</h=
2></a>
<p data-bo=3D"26199">Speaking of: in a struct literal, when a field is set =
to a variable binding of
the same name:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"26294"><code class=3D"scroll-wra=
pper">    <i class=3D"hh4">let</i> p =3D <i class=3D"hh13">Person</i> <i cl=
ass=3D"hh8">{</i> <i class=3D"hh6">name</i><i class=3D"hh9">:</i> name <i c=
lass=3D"hh8">}</i><i class=3D"hh9">;</i>
</code></figure><p data-bo=3D"26342">It can be shortened like this:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"26374"><code class=3D"scroll-wra=
pper">    <i class=3D"hh4">let</i> p =3D <i class=3D"hh13">Person</i> <i cl=
ass=3D"hh8">{</i> name <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
</code></figure><p data-bo=3D"26416">Tools like <a href=3D"https://doc.rust=
-lang.org/stable/clippy/usage.html">clippy</a> will
suggest making those changes, and even apply the fix programmatically if yo=
u let
it.</p>

<a id=3D"owned-types-vs-reference-types" href=3D"https://fasterthanli.me/ar=
ticles/a-half-hour-to-learn-rust#owned-types-vs-reference-types" class=3D"a=
nchor"><h2>Owned types vs reference types</h2></a>
<p data-bo=3D"26614">For many types in Rust, there are owned and non-owned =
variants:</p>

<ul><li>Strings: <code>String</code> is owned, <code>&amp;str</code> is a r=
eference.</li>
<li>Paths: <code>PathBuf</code> is owned, <code>&amp;Path</code> is a refer=
ence.</li>
<li>Collections: <code>Vec&lt;T&gt;</code> is owned, <code>&amp;[T]</code> =
is a reference.</li>
</ul>
<a id=3D"slices" href=3D"https://fasterthanli.me/articles/a-half-hour-to-le=
arn-rust#slices" class=3D"anchor"><h3>Slices</h3></a>
<p data-bo=3D"26861">Rust has slices - they=E2=80=99re a reference to multi=
ple contiguous elements.</p>

<p data-bo=3D"26933">You can borrow a slice of a vector, for example:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"26983"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> v =3D <i class=3D"hh3">vec</i><i class=3D"hh3"=
>!</i><i class=3D"hh8">[</i><i class=3D"hh1">1</i><i class=3D"hh9">,</i> <i=
 class=3D"hh1">2</i><i class=3D"hh9">,</i> <i class=3D"hh1">3</i><i class=
=3D"hh9">,</i> <i class=3D"hh1">4</i><i class=3D"hh9">,</i> <i class=3D"hh1=
">5</i><i class=3D"hh8">]</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> v2 =3D <i class=3D"hh5">&amp;</i>v<i class=3D"=
hh8">[</i><i class=3D"hh1">2</i>..<i class=3D"hh1">4</i><i class=3D"hh8">]<=
/i><i class=3D"hh9">;</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"v2 =3D {:?}"</i><i class=3D"hh9">,</i> v2<i class=3D"hh=
8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh18">// output:</i>
<i class=3D"hh18">// v2 =3D [3, 4]</i>
</code></figure><a id=3D"operator-overloading" href=3D"https://fasterthanli=
.me/articles/a-half-hour-to-learn-rust#operator-overloading" class=3D"ancho=
r"><h3>Operator overloading</h3></a>
<p data-bo=3D"27150">The above is not magical. The indexing operator (<code=
>foo[index]</code>) is
overloaded with the <code>Index</code> and <code>IndexMut</code> traits.</p=
>

<p data-bo=3D"27268">The <code>..</code> syntax is just range literals. Ran=
ges are just a few
structs defined in the standard library.</p>

<p data-bo=3D"27372">They can be open-ended, and their rightmost bound can =
be inclusive,
if it=E2=80=99s preceded by <code>=3D</code>.</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"27466"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh18">// 0 or greater</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{:?}"</i><i class=3D"hh9">,</i> <i class=3D"hh8">(</i><=
i class=3D"hh1">0</i>..<i class=3D"hh8">)</i><i class=3D"hh9">.</i><i class=
=3D"hh3">contains</i><i class=3D"hh8">(</i><i class=3D"hh5">&amp;</i><i cla=
ss=3D"hh1">100</i><i class=3D"hh8">)</i><i class=3D"hh8">)</i><i class=3D"h=
h9"></i><i class=3D"hh9">;</i> <i class=3D"hh18">// true</i>
    <i class=3D"hh18">// strictly less than 20</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{:?}"</i><i class=3D"hh9">,</i> <i class=3D"hh8">(</i>.=
.<i class=3D"hh1">20</i><i class=3D"hh8">)</i><i class=3D"hh9">.</i><i clas=
s=3D"hh3">contains</i><i class=3D"hh8">(</i><i class=3D"hh5">&amp;</i><i cl=
ass=3D"hh1">20</i><i class=3D"hh8">)</i><i class=3D"hh8">)</i><i class=3D"h=
h9"></i><i class=3D"hh9">;</i> <i class=3D"hh18">// false</i>
    <i class=3D"hh18">// 20 or less than 20</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{:?}"</i><i class=3D"hh9">,</i> <i class=3D"hh8">(</i>.=
.=3D<i class=3D"hh1">20</i><i class=3D"hh8">)</i><i class=3D"hh9">.</i><i c=
lass=3D"hh3">contains</i><i class=3D"hh8">(</i><i class=3D"hh5">&amp;</i><i=
 class=3D"hh1">20</i><i class=3D"hh8">)</i><i class=3D"hh8">)</i><i class=
=3D"hh9"></i><i class=3D"hh9">;</i> <i class=3D"hh18">// true</i>
    <i class=3D"hh18">// only 3, 4, 5</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{:?}"</i><i class=3D"hh9">,</i> <i class=3D"hh8">(</i><=
i class=3D"hh1">3</i>..<i class=3D"hh1">6</i><i class=3D"hh8">)</i><i class=
=3D"hh9">.</i><i class=3D"hh3">contains</i><i class=3D"hh8">(</i><i class=
=3D"hh5">&amp;</i><i class=3D"hh1">4</i><i class=3D"hh8">)</i><i class=3D"h=
h8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i> <i class=3D"hh18">// t=
rue</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"borrowing-rules-and-slices" href=3D"https://faster=
thanli.me/articles/a-half-hour-to-learn-rust#borrowing-rules-and-slices" cl=
ass=3D"anchor"><h3>Borrowing rules and slices</h3></a>
<p data-bo=3D"27829">Borrowing rules apply to slices.</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"27863"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">tail</i><i class=3D"hh8">(</=
i><i class=3D"hh17">s</i><i class=3D"hh9">:</i> <i class=3D"hh5">&amp;</i><=
i class=3D"hh8">[</i><i class=3D"hh14">u8</i><i class=3D"hh8">]</i><i class=
=3D"hh8">)</i> -&gt; <i class=3D"hh5">&amp;</i><i class=3D"hh8">[</i><i cla=
ss=3D"hh14">u8</i><i class=3D"hh8">]</i> <i class=3D"hh8">{</i>
  <i class=3D"hh5">&amp;</i>s<i class=3D"hh8">[</i><i class=3D"hh1">1</i>..=
<i class=3D"hh8">]</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> x =3D <i class=3D"hh5">&amp;</i><i class=3D"hh=
8">[</i><i class=3D"hh1">1</i><i class=3D"hh9">,</i> <i class=3D"hh1">2</i>=
<i class=3D"hh9">,</i> <i class=3D"hh1">3</i><i class=3D"hh9">,</i> <i clas=
s=3D"hh1">4</i><i class=3D"hh9">,</i> <i class=3D"hh1">5</i><i class=3D"hh8=
">]</i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> y =3D <i class=3D"hh3">tail</i><i class=3D"hh8=
">(</i>x<i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"y =3D {:?}"</i><i class=3D"hh9">,</i> y<i class=3D"hh8"=
>)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"28012">This is the same as:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"28034"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">tail</i><i class=3D"hh8">&lt=
;</i><i class=3D"hh5">'</i><i class=3D"hh20">a</i><i class=3D"hh8">&gt;</i>=
<i class=3D"hh8">(</i><i class=3D"hh17">s</i><i class=3D"hh9">:</i> <i clas=
s=3D"hh5">&amp;</i><i class=3D"hh5">'</i><i class=3D"hh20">a</i> <i class=
=3D"hh8">[</i><i class=3D"hh14">u8</i><i class=3D"hh8">]</i><i class=3D"hh8=
">)</i> -&gt; <i class=3D"hh5">&amp;</i><i class=3D"hh5">'</i><i class=3D"h=
h20">a</i> <i class=3D"hh8">[</i><i class=3D"hh14">u8</i><i class=3D"hh8">]=
</i> <i class=3D"hh8">{</i>
  <i class=3D"hh5">&amp;</i>s<i class=3D"hh8">[</i><i class=3D"hh1">1</i>..=
<i class=3D"hh8">]</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"28098">This is legal:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"28114"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> y =3D <i class=3D"hh8">{</i>
        <i class=3D"hh4">let</i> x =3D <i class=3D"hh5">&amp;</i><i class=
=3D"hh8">[</i><i class=3D"hh1">1</i><i class=3D"hh9">,</i> <i class=3D"hh1"=
>2</i><i class=3D"hh9">,</i> <i class=3D"hh1">3</i><i class=3D"hh9">,</i> <=
i class=3D"hh1">4</i><i class=3D"hh9">,</i> <i class=3D"hh1">5</i><i class=
=3D"hh8">]</i><i class=3D"hh9">;</i>
        <i class=3D"hh3">tail</i><i class=3D"hh8">(</i>x<i class=3D"hh8">)<=
/i>
    <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"y =3D {:?}"</i><i class=3D"hh9">,</i> y<i class=3D"hh8"=
>)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"28241">=E2=80=A6but only because <code>[1, 2,=
 3, 4, 5]</code> is a <code>'static</code> array.</p>

<p data-bo=3D"28302">So, this is illegal:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"28324"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> y =3D <i class=3D"hh8">{</i>
        <i class=3D"hh4">let</i> v =3D <i class=3D"hh3">vec</i><i class=3D"=
hh3">!</i><i class=3D"hh8">[</i><i class=3D"hh1">1</i><i class=3D"hh9">,</i=
> <i class=3D"hh1">2</i><i class=3D"hh9">,</i> <i class=3D"hh1">3</i><i cla=
ss=3D"hh9">,</i> <i class=3D"hh1">4</i><i class=3D"hh9">,</i> <i class=3D"h=
h1">5</i><i class=3D"hh8">]</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
        <i class=3D"hh3">tail</i><i class=3D"hh8">(</i><i class=3D"hh5">&am=
p;</i>v<i class=3D"hh8">)</i>
        <i class=3D"hh18">// error: `v` does not live long enough</i>
    <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"y =3D {:?}"</i><i class=3D"hh9">,</i> y<i class=3D"hh8"=
>)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"28503">=E2=80=A6because a vector is heap-allo=
cated, and it has a non-<code>'static</code> lifetime.</p>

<a id=3D"string-slices-str" href=3D"https://fasterthanli.me/articles/a-half=
-hour-to-learn-rust#string-slices-str" class=3D"anchor"><h3>String slices (=
<code>&amp;str</code>)</h3></a>
<p data-bo=3D"28608"><code>&amp;str</code> values are really slices.</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"28642"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">file_ext</i><i class=3D"hh8"=
>(</i><i class=3D"hh17">name</i><i class=3D"hh9">:</i> <i class=3D"hh5">&am=
p;</i><i class=3D"hh14">str</i><i class=3D"hh8">)</i> -&gt; <i class=3D"hh1=
3">Option</i><i class=3D"hh8">&lt;</i><i class=3D"hh5">&amp;</i><i class=3D=
"hh14">str</i><i class=3D"hh8">&gt;</i> <i class=3D"hh8">{</i>
    <i class=3D"hh18">// this does not create a new string - it returns</i>
    <i class=3D"hh18">// a slice of the argument.</i>
    name<i class=3D"hh9">.</i><i class=3D"hh3">split</i><i class=3D"hh8">(<=
/i><i class=3D"hh10">"."</i><i class=3D"hh8">)</i><i class=3D"hh9">.</i><i =
class=3D"hh3">last</i><i class=3D"hh8">(</i><i class=3D"hh8">)</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> name =3D <i class=3D"hh10">"Read me. Or don't.=
txt"</i><i class=3D"hh9">;</i>
    <i class=3D"hh4">if</i> <i class=3D"hh4">let</i> Some<i class=3D"hh8">(=
</i>ext<i class=3D"hh8">)</i> =3D <i class=3D"hh3">file_ext</i><i class=3D"=
hh8">(</i>name<i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
        <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">=
(</i><i class=3D"hh10">"file extension: {}"</i><i class=3D"hh9">,</i> ext<i=
 class=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
    <i class=3D"hh8">}</i> <i class=3D"hh4">else</i> <i class=3D"hh8">{</i>
        <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">=
(</i><i class=3D"hh10">"no file extension"</i><i class=3D"hh8">)</i><i clas=
s=3D"hh9"></i><i class=3D"hh9">;</i>
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"29010">=E2=80=A6so the borrow rules apply her=
e too:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"29050"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> ext =3D <i class=3D"hh8">{</i>
        <i class=3D"hh4">let</i> name =3D <i class=3D"hh13">String</i><i cl=
ass=3D"hh9">::</i><i class=3D"hh3">from</i><i class=3D"hh8">(</i><i class=
=3D"hh10">"Read me. Or don't.txt"</i><i class=3D"hh8">)</i><i class=3D"hh9"=
>;</i>
        <i class=3D"hh3">file_ext</i><i class=3D"hh8">(</i><i class=3D"hh5"=
>&amp;</i>name<i class=3D"hh8">)</i><i class=3D"hh9">.</i><i class=3D"hh3">=
unwrap_or</i><i class=3D"hh8">(</i><i class=3D"hh10">""</i><i class=3D"hh8"=
>)</i>
        <i class=3D"hh18">// error: `name` does not live long enough</i>
    <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"extension: {:?}"</i><i class=3D"hh9">,</i> ext<i class=
=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"fallible-functions-result-t-e" href=3D"https://fas=
terthanli.me/articles/a-half-hour-to-learn-rust#fallible-functions-result-t=
-e" class=3D"anchor"><h2>Fallible functions (<code>Result&lt;T, E&gt;</code=
>)</h2></a>
<p data-bo=3D"29325">Functions that can fail typically return a <code>Resul=
t</code>:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"29379"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> s =3D std<i class=3D"hh9">::</i>str<i class=3D=
"hh9">::</i><i class=3D"hh3">from_utf8</i><i class=3D"hh8">(</i><i class=3D=
"hh5">&amp;</i><i class=3D"hh8">[</i><i class=3D"hh1">240</i><i class=3D"hh=
9">,</i> <i class=3D"hh1">159</i><i class=3D"hh9">,</i> <i class=3D"hh1">14=
1</i><i class=3D"hh9">,</i> <i class=3D"hh1">137</i><i class=3D"hh8">]</i><=
i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{:?}"</i><i class=3D"hh9">,</i> s<i class=3D"hh8">)</i>=
<i class=3D"hh9"></i><i class=3D"hh9">;</i>
    <i class=3D"hh18">// prints: Ok("=F0=9F=8D=89")</i>

    <i class=3D"hh4">let</i> s =3D std<i class=3D"hh9">::</i>str<i class=3D=
"hh9">::</i><i class=3D"hh3">from_utf8</i><i class=3D"hh8">(</i><i class=3D=
"hh5">&amp;</i><i class=3D"hh8">[</i><i class=3D"hh1">195</i><i class=3D"hh=
9">,</i> <i class=3D"hh1">40</i><i class=3D"hh8">]</i><i class=3D"hh8">)</i=
><i class=3D"hh9">;</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{:?}"</i><i class=3D"hh9">,</i> s<i class=3D"hh8">)</i>=
<i class=3D"hh9"></i><i class=3D"hh9">;</i>
    <i class=3D"hh18">// prints: Err(Utf8Error { valid_up_to: 0, error_len:=
 Some(1) })</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"29653">If you want to panic in case of failur=
e, you can <code>.unwrap()</code>:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"29716"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> s =3D std<i class=3D"hh9">::</i>str<i class=3D=
"hh9">::</i><i class=3D"hh3">from_utf8</i><i class=3D"hh8">(</i><i class=3D=
"hh5">&amp;</i><i class=3D"hh8">[</i><i class=3D"hh1">240</i><i class=3D"hh=
9">,</i> <i class=3D"hh1">159</i><i class=3D"hh9">,</i> <i class=3D"hh1">14=
1</i><i class=3D"hh9">,</i> <i class=3D"hh1">137</i><i class=3D"hh8">]</i><=
i class=3D"hh8">)</i><i class=3D"hh9">.</i><i class=3D"hh3">unwrap</i><i cl=
ass=3D"hh8">(</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{:?}"</i><i class=3D"hh9">,</i> s<i class=3D"hh8">)</i>=
<i class=3D"hh9"></i><i class=3D"hh9">;</i>
    <i class=3D"hh18">// prints: "=F0=9F=8D=89"</i>

    <i class=3D"hh4">let</i> s =3D std<i class=3D"hh9">::</i>str<i class=3D=
"hh9">::</i><i class=3D"hh3">from_utf8</i><i class=3D"hh8">(</i><i class=3D=
"hh5">&amp;</i><i class=3D"hh8">[</i><i class=3D"hh1">195</i><i class=3D"hh=
9">,</i> <i class=3D"hh1">40</i><i class=3D"hh8">]</i><i class=3D"hh8">)</i=
><i class=3D"hh9">.</i><i class=3D"hh3">unwrap</i><i class=3D"hh8">(</i><i =
class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh18">// prints: thread 'main' panicked at 'called `Result:=
:unwrap()`</i>
    <i class=3D"hh18">// on an `Err` value: Utf8Error { valid_up_to: 0, err=
or_len: Some(1) }',</i>
    <i class=3D"hh18">// src/libcore/result.rs:1165:5</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"30091">Or <code>.expect()</code>, for a custo=
m message:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"30130"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> s =3D std<i class=3D"hh9">::</i>str<i class=3D=
"hh9">::</i><i class=3D"hh3">from_utf8</i><i class=3D"hh8">(</i><i class=3D=
"hh5">&amp;</i><i class=3D"hh8">[</i><i class=3D"hh1">195</i><i class=3D"hh=
9">,</i> <i class=3D"hh1">40</i><i class=3D"hh8">]</i><i class=3D"hh8">)</i=
><i class=3D"hh9">.</i><i class=3D"hh3">expect</i><i class=3D"hh8">(</i><i =
class=3D"hh10">"valid utf-8"</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i=
>
    <i class=3D"hh18">// prints: thread 'main' panicked at 'valid utf-8: Ut=
f8Error</i>
    <i class=3D"hh18">// { valid_up_to: 0, error_len: Some(1) }', src/libco=
re/result.rs:1165:5</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"30366">Or, you can <code>match</code>:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"30388"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">match</i> std<i class=3D"hh9">::</i>str<i class=3D"hh9=
">::</i><i class=3D"hh3">from_utf8</i><i class=3D"hh8">(</i><i class=3D"hh5=
">&amp;</i><i class=3D"hh8">[</i><i class=3D"hh1">240</i><i class=3D"hh9">,=
</i> <i class=3D"hh1">159</i><i class=3D"hh9">,</i> <i class=3D"hh1">141</i=
><i class=3D"hh9">,</i> <i class=3D"hh1">137</i><i class=3D"hh8">]</i><i cl=
ass=3D"hh8">)</i> <i class=3D"hh8">{</i>
        Ok<i class=3D"hh8">(</i>s<i class=3D"hh8">)</i> =3D&gt; <i class=3D=
"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i><i class=3D"hh=
10">"{}"</i><i class=3D"hh9">,</i> s<i class=3D"hh8">)</i><i class=3D"hh9">=
,</i>
        Err<i class=3D"hh8">(</i>e<i class=3D"hh8">)</i> =3D&gt; <i class=
=3D"hh3">panic</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i>e<i class=3D"=
hh8">)</i><i class=3D"hh9">,</i>
    <i class=3D"hh8">}</i>
    <i class=3D"hh18">// prints =F0=9F=8D=89</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"30560">Or you can <code>if let</code>:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"30582"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">if</i> <i class=3D"hh4">let</i> Ok<i class=3D"hh8">(</=
i>s<i class=3D"hh8">)</i> =3D std<i class=3D"hh9">::</i>str<i class=3D"hh9"=
>::</i><i class=3D"hh3">from_utf8</i><i class=3D"hh8">(</i><i class=3D"hh5"=
>&amp;</i><i class=3D"hh8">[</i><i class=3D"hh1">240</i><i class=3D"hh9">,<=
/i> <i class=3D"hh1">159</i><i class=3D"hh9">,</i> <i class=3D"hh1">141</i>=
<i class=3D"hh9">,</i> <i class=3D"hh1">137</i><i class=3D"hh8">]</i><i cla=
ss=3D"hh8">)</i> <i class=3D"hh8">{</i>
        <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">=
(</i><i class=3D"hh10">"{}"</i><i class=3D"hh9">,</i> s<i class=3D"hh8">)</=
i><i class=3D"hh9">;</i>
    <i class=3D"hh8">}</i>
    <i class=3D"hh18">// prints =F0=9F=8D=89</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"30725">Or you can bubble up the error:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"30758"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> -&gt; <i class=3D"hh13">Result</i><i class=3D"hh8"=
>&lt;</i><i class=3D"hh8">(</i><i class=3D"hh8">)</i><i class=3D"hh9">,</i>=
 std<i class=3D"hh9">::</i>str<i class=3D"hh9">::</i><i class=3D"hh13">Utf8=
Error</i><i class=3D"hh8">&gt;</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">match</i> std<i class=3D"hh9">::</i>str<i class=3D"hh9=
">::</i><i class=3D"hh3">from_utf8</i><i class=3D"hh8">(</i><i class=3D"hh5=
">&amp;</i><i class=3D"hh8">[</i><i class=3D"hh1">240</i><i class=3D"hh9">,=
</i> <i class=3D"hh1">159</i><i class=3D"hh9">,</i> <i class=3D"hh1">141</i=
><i class=3D"hh9">,</i> <i class=3D"hh1">137</i><i class=3D"hh8">]</i><i cl=
ass=3D"hh8">)</i> <i class=3D"hh8">{</i>
        Ok<i class=3D"hh8">(</i>s<i class=3D"hh8">)</i> =3D&gt; <i class=3D=
"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i><i class=3D"hh=
10">"{}"</i><i class=3D"hh9">,</i> s<i class=3D"hh8">)</i><i class=3D"hh9">=
,</i>
        Err<i class=3D"hh8">(</i>e<i class=3D"hh8">)</i> =3D&gt; <i class=
=3D"hh4">return</i> <i class=3D"hh3">Err</i><i class=3D"hh8">(</i>e<i class=
=3D"hh8">)</i><i class=3D"hh9">,</i>
    <i class=3D"hh8">}</i>
    <i class=3D"hh3">Ok</i><i class=3D"hh8">(</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i><i class=3D"hh8">)</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"30961">Or you can use <code>?</code> to do it=
 the concise way:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"31007"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> -&gt; <i class=3D"hh13">Result</i><i class=3D"hh8"=
>&lt;</i><i class=3D"hh8">(</i><i class=3D"hh8">)</i><i class=3D"hh9">,</i>=
 std<i class=3D"hh9">::</i>str<i class=3D"hh9">::</i><i class=3D"hh13">Utf8=
Error</i><i class=3D"hh8">&gt;</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> s =3D std<i class=3D"hh9">::</i>str<i class=3D=
"hh9">::</i><i class=3D"hh3">from_utf8</i><i class=3D"hh8">(</i><i class=3D=
"hh5">&amp;</i><i class=3D"hh8">[</i><i class=3D"hh1">240</i><i class=3D"hh=
9">,</i> <i class=3D"hh1">159</i><i class=3D"hh9">,</i> <i class=3D"hh1">14=
1</i><i class=3D"hh9">,</i> <i class=3D"hh1">137</i><i class=3D"hh8">]</i><=
i class=3D"hh8">)</i>?<i class=3D"hh9">;</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{}"</i><i class=3D"hh9">,</i> s<i class=3D"hh8">)</i><i=
 class=3D"hh9">;</i>
    <i class=3D"hh3">Ok</i><i class=3D"hh8">(</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i><i class=3D"hh8">)</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"dereferencing" href=3D"https://fasterthanli.me/art=
icles/a-half-hour-to-learn-rust#dereferencing" class=3D"anchor"><h2>Derefer=
encing</h2></a>
<p data-bo=3D"31178">The <code>*</code> operator can be used to <em>derefer=
ence</em>, but you don=E2=80=99t need to do
that to access fields or call methods:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"31290"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">struct</i> <i class=3D"hh13">Point</i> <i class=3D"h=
h8">{</i>
    <i class=3D"hh6">x</i><i class=3D"hh9">:</i> <i class=3D"hh14">f64</i><=
i class=3D"hh9">,</i>
    <i class=3D"hh6">y</i><i class=3D"hh9">:</i> <i class=3D"hh14">f64</i><=
i class=3D"hh9">,</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> p =3D <i class=3D"hh13">Point</i> <i class=3D"=
hh8">{</i> <i class=3D"hh6">x</i><i class=3D"hh9">:</i> <i class=3D"hh1">1.=
0</i><i class=3D"hh9">,</i> <i class=3D"hh6">y</i><i class=3D"hh9">:</i> <i=
 class=3D"hh1">3.0</i> <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> p_ref =3D <i class=3D"hh5">&amp;</i>p<i class=
=3D"hh9">;</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"({}, {})"</i><i class=3D"hh9">,</i> p_ref<i class=3D"hh=
9">.</i><i class=3D"hh6">x</i><i class=3D"hh9">,</i> p_ref<i class=3D"hh9">=
.</i><i class=3D"hh6">y</i><i class=3D"hh8">)</i><i class=3D"hh9"></i><i cl=
ass=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh18">// prints `(1, 3)`</i>
</code></figure><p data-bo=3D"31481">And you can only do it if the type is =
<code>Copy</code>:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"31528"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">struct</i> <i class=3D"hh13">Point</i> <i class=3D"h=
h8">{</i>
    <i class=3D"hh6">x</i><i class=3D"hh9">:</i> <i class=3D"hh14">f64</i><=
i class=3D"hh9">,</i>
    <i class=3D"hh6">y</i><i class=3D"hh9">:</i> <i class=3D"hh14">f64</i><=
i class=3D"hh9">,</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">negate</i><i class=3D"hh8">(</i><i=
 class=3D"hh17">p</i><i class=3D"hh9">:</i> <i class=3D"hh13">Point</i><i c=
lass=3D"hh8">)</i> -&gt; <i class=3D"hh13">Point</i> <i class=3D"hh8">{</i>
    <i class=3D"hh13">Point</i> <i class=3D"hh8">{</i>
        <i class=3D"hh6">x</i><i class=3D"hh9">:</i> -p<i class=3D"hh9">.</=
i><i class=3D"hh6">x</i><i class=3D"hh9">,</i>
        <i class=3D"hh6">y</i><i class=3D"hh9">:</i> -p<i class=3D"hh9">.</=
i><i class=3D"hh6">y</i><i class=3D"hh9">,</i>
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> p =3D <i class=3D"hh13">Point</i> <i class=3D"=
hh8">{</i> <i class=3D"hh6">x</i><i class=3D"hh9">:</i> <i class=3D"hh1">1.=
0</i><i class=3D"hh9">,</i> <i class=3D"hh6">y</i><i class=3D"hh9">:</i> <i=
 class=3D"hh1">3.0</i> <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> p_ref =3D <i class=3D"hh5">&amp;</i>p<i class=
=3D"hh9">;</i>
    <i class=3D"hh3">negate</i><i class=3D"hh8">(</i><i class=3D"hh5">*</i>=
p_ref<i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh18">// error: cannot move out of `*p_ref` which is behind=
 a shared reference</i>
<i class=3D"hh8">}</i>
</code></figure><figure role=3D"region" aria-label=3D"Code block" class=3D"=
code-block" translate=3D"no" data-lang=3D"rust" data-bo=3D"31838"><code cla=
ss=3D"scroll-wrapper"><i class=3D"hh18">// now `Point` is `Copy`</i>
<i class=3D"hh0">#<i class=3D"hh8">[</i>derive<i class=3D"hh8">(</i>Clone<i=
 class=3D"hh9">,</i> Copy<i class=3D"hh8">)</i><i class=3D"hh8">]</i></i>
<i class=3D"hh4">struct</i> <i class=3D"hh13">Point</i> <i class=3D"hh8">{<=
/i>
    <i class=3D"hh6">x</i><i class=3D"hh9">:</i> <i class=3D"hh14">f64</i><=
i class=3D"hh9">,</i>
    <i class=3D"hh6">y</i><i class=3D"hh9">:</i> <i class=3D"hh14">f64</i><=
i class=3D"hh9">,</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">negate</i><i class=3D"hh8">(</i><i=
 class=3D"hh17">p</i><i class=3D"hh9">:</i> <i class=3D"hh13">Point</i><i c=
lass=3D"hh8">)</i> -&gt; <i class=3D"hh13">Point</i> <i class=3D"hh8">{</i>
    <i class=3D"hh13">Point</i> <i class=3D"hh8">{</i>
        <i class=3D"hh6">x</i><i class=3D"hh9">:</i> -p<i class=3D"hh9">.</=
i><i class=3D"hh6">x</i><i class=3D"hh9">,</i>
        <i class=3D"hh6">y</i><i class=3D"hh9">:</i> -p<i class=3D"hh9">.</=
i><i class=3D"hh6">y</i><i class=3D"hh9">,</i>
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> p =3D <i class=3D"hh13">Point</i> <i class=3D"=
hh8">{</i> <i class=3D"hh6">x</i><i class=3D"hh9">:</i> <i class=3D"hh1">1.=
0</i><i class=3D"hh9">,</i> <i class=3D"hh6">y</i><i class=3D"hh9">:</i> <i=
 class=3D"hh1">3.0</i> <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    <i class=3D"hh4">let</i> p_ref =3D <i class=3D"hh5">&amp;</i>p<i class=
=3D"hh9">;</i>
    <i class=3D"hh3">negate</i><i class=3D"hh8">(</i><i class=3D"hh5">*</i>=
p_ref<i class=3D"hh8">)</i><i class=3D"hh9">;</i> <i class=3D"hh18">// ...a=
nd now this works</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"function-types-closures" href=3D"https://fastertha=
nli.me/articles/a-half-hour-to-learn-rust#function-types-closures" class=3D=
"anchor"><h2>Function types, closures</h2></a>
<p data-bo=3D"32173">Closures are just functions of type <code>Fn</code>, <=
code>FnMut</code> or <code>FnOnce</code> with some captured context.</p>

<p data-bo=3D"32264">Their parameters are a comma-separated list of names w=
ithin a pair of pipes
(<code>|</code>). They don=E2=80=99t <em>need</em> curly braces, unless you=
 want to have multiple statements.</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"32425"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">for_each_planet</i><i class=
=3D"hh8">&lt;</i><i class=3D"hh13">F</i><i class=3D"hh8">&gt;</i><i class=
=3D"hh8">(</i><i class=3D"hh17">f</i><i class=3D"hh9">:</i> <i class=3D"hh1=
3">F</i><i class=3D"hh8">)</i>
    <i class=3D"hh4">where</i> <i class=3D"hh13">F</i><i class=3D"hh9">:</i=
> <i class=3D"hh13">Fn</i><i class=3D"hh8">(</i><i class=3D"hh5">&amp;</i><=
i class=3D"hh5">'</i><i class=3D"hh20">static</i> <i class=3D"hh14">str</i>=
<i class=3D"hh8">)</i>
<i class=3D"hh8">{</i>
    <i class=3D"hh3">f</i><i class=3D"hh8">(</i><i class=3D"hh10">"Earth"</=
i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">f</i><i class=3D"hh8">(</i><i class=3D"hh10">"Mars"</i=
><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">f</i><i class=3D"hh8">(</i><i class=3D"hh10">"Jupiter"=
</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh3">for_each_planet</i><i class=3D"hh8">(</i>|planet| <i c=
lass=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i><i clas=
s=3D"hh10">"Hello, {}"</i><i class=3D"hh9">,</i> planet<i class=3D"hh8">)</=
i><i class=3D"hh9"></i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh18">// prints:</i>
<i class=3D"hh18">// Hello, Earth</i>
<i class=3D"hh18">// Hello, Mars</i>
<i class=3D"hh18">// Hello, Jupiter</i>
</code></figure><p data-bo=3D"32686">The borrow rules apply to them too:</p=
>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"32723"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">for_each_planet</i><i class=
=3D"hh8">&lt;</i><i class=3D"hh13">F</i><i class=3D"hh8">&gt;</i><i class=
=3D"hh8">(</i><i class=3D"hh17">f</i><i class=3D"hh9">:</i> <i class=3D"hh1=
3">F</i><i class=3D"hh8">)</i>
    <i class=3D"hh4">where</i> <i class=3D"hh13">F</i><i class=3D"hh9">:</i=
> <i class=3D"hh13">Fn</i><i class=3D"hh8">(</i><i class=3D"hh5">&amp;</i><=
i class=3D"hh5">'</i><i class=3D"hh20">static</i> <i class=3D"hh14">str</i>=
<i class=3D"hh8">)</i>
<i class=3D"hh8">{</i>
    <i class=3D"hh3">f</i><i class=3D"hh8">(</i><i class=3D"hh10">"Earth"</=
i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">f</i><i class=3D"hh8">(</i><i class=3D"hh10">"Mars"</i=
><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">f</i><i class=3D"hh8">(</i><i class=3D"hh10">"Jupiter"=
</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> greeting =3D <i class=3D"hh13">String</i><i cl=
ass=3D"hh9">::</i><i class=3D"hh3">from</i><i class=3D"hh8">(</i><i class=
=3D"hh10">"Good to see you"</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">for_each_planet</i><i class=3D"hh8">(</i>|planet| <i c=
lass=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i><i clas=
s=3D"hh10">"{}, {}"</i><i class=3D"hh9">,</i> greeting<i class=3D"hh9">,</i=
> planet<i class=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh8">)</i><i=
 class=3D"hh9">;</i>
    <i class=3D"hh18">// our closure borrows `greeting`, so it cannot outli=
ve it</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"33045">For example, this would not work:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"33080"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">for_each_planet</i><i class=
=3D"hh8">&lt;</i><i class=3D"hh13">F</i><i class=3D"hh8">&gt;</i><i class=
=3D"hh8">(</i><i class=3D"hh17">f</i><i class=3D"hh9">:</i> <i class=3D"hh1=
3">F</i><i class=3D"hh8">)</i>
    <i class=3D"hh4">where</i> <i class=3D"hh13">F</i><i class=3D"hh9">:</i=
> <i class=3D"hh13">Fn</i><i class=3D"hh8">(</i><i class=3D"hh5">&amp;</i><=
i class=3D"hh5">'</i><i class=3D"hh20">static</i> <i class=3D"hh14">str</i>=
<i class=3D"hh8">)</i> + <i class=3D"hh5">'</i><i class=3D"hh20">static</i>=
 <i class=3D"hh18">// `F` must now have "'static" lifetime</i>
<i class=3D"hh8">{</i>
    <i class=3D"hh3">f</i><i class=3D"hh8">(</i><i class=3D"hh10">"Earth"</=
i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">f</i><i class=3D"hh8">(</i><i class=3D"hh10">"Mars"</i=
><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">f</i><i class=3D"hh8">(</i><i class=3D"hh10">"Jupiter"=
</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> greeting =3D <i class=3D"hh13">String</i><i cl=
ass=3D"hh9">::</i><i class=3D"hh3">from</i><i class=3D"hh8">(</i><i class=
=3D"hh10">"Good to see you"</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">for_each_planet</i><i class=3D"hh8">(</i>|planet| <i c=
lass=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i><i clas=
s=3D"hh10">"{}, {}"</i><i class=3D"hh9">,</i> greeting<i class=3D"hh9">,</i=
> planet<i class=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh8">)</i><i=
 class=3D"hh9">;</i>
    <i class=3D"hh18">// error: closure may outlive the current function, b=
ut it borrows</i>
    <i class=3D"hh18">// `greeting`, which is owned by the current function=
</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"33518">But this would:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"33535"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> greeting =3D <i class=3D"hh13">String</i><i cl=
ass=3D"hh9">::</i><i class=3D"hh3">from</i><i class=3D"hh8">(</i><i class=
=3D"hh10">"You're doing great"</i><i class=3D"hh8">)</i><i class=3D"hh9">;<=
/i>
    <i class=3D"hh3">for_each_planet</i><i class=3D"hh8">(</i><i class=3D"h=
h4">move</i> |planet| <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i =
class=3D"hh8">(</i><i class=3D"hh10">"{}, {}"</i><i class=3D"hh9">,</i> gre=
eting<i class=3D"hh9">,</i> planet<i class=3D"hh8">)</i><i class=3D"hh9"></=
i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh18">// `greeting` is no longer borrowed, it is *moved* in=
to</i>
    <i class=3D"hh18">// the closure.</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"fnmut-and-borrowing-rules" href=3D"https://fastert=
hanli.me/articles/a-half-hour-to-learn-rust#fnmut-and-borrowing-rules" clas=
s=3D"anchor"><h3>FnMut and borrowing rules</h3></a>
<p data-bo=3D"33801">An <code>FnMut</code> needs to be mutably borrowed to =
be called, so it can
only be called once at a time.</p>

<p data-bo=3D"33897">This is legal:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"33913"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">foobar</i><i class=3D"hh8">&=
lt;</i><i class=3D"hh13">F</i><i class=3D"hh8">&gt;</i><i class=3D"hh8">(</=
i><i class=3D"hh17">f</i><i class=3D"hh9">:</i> <i class=3D"hh13">F</i><i c=
lass=3D"hh8">)</i>
    <i class=3D"hh4">where</i> <i class=3D"hh13">F</i><i class=3D"hh9">:</i=
> <i class=3D"hh13">Fn</i><i class=3D"hh8">(</i><i class=3D"hh14">i32</i><i=
 class=3D"hh8">)</i> -&gt; <i class=3D"hh14">i32</i>
<i class=3D"hh8">{</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{}"</i><i class=3D"hh9">,</i> <i class=3D"hh3">f</i><i =
class=3D"hh8">(</i><i class=3D"hh3">f</i><i class=3D"hh8">(</i><i class=3D"=
hh1">2</i><i class=3D"hh8">)</i><i class=3D"hh8">)</i><i class=3D"hh8">)</i=
><i class=3D"hh9"></i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh3">foobar</i><i class=3D"hh8">(</i>|x| x <i class=3D"hh5"=
>*</i> <i class=3D"hh1">2</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh18">// output: 8</i>
</code></figure><p data-bo=3D"34058">This isn=E2=80=99t:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"34071"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">foobar</i><i class=3D"hh8">&=
lt;</i><i class=3D"hh13">F</i><i class=3D"hh8">&gt;</i><i class=3D"hh8">(</=
i><i class=3D"hh4">mut</i> <i class=3D"hh17">f</i><i class=3D"hh9">:</i> <i=
 class=3D"hh13">F</i><i class=3D"hh8">)</i>
    <i class=3D"hh4">where</i> <i class=3D"hh13">F</i><i class=3D"hh9">:</i=
> <i class=3D"hh13">FnMut</i><i class=3D"hh8">(</i><i class=3D"hh14">i32</i=
><i class=3D"hh8">)</i> -&gt; <i class=3D"hh14">i32</i>
<i class=3D"hh8">{</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{}"</i><i class=3D"hh9">,</i> <i class=3D"hh3">f</i><i =
class=3D"hh8">(</i><i class=3D"hh3">f</i><i class=3D"hh8">(</i><i class=3D"=
hh1">2</i><i class=3D"hh8">)</i><i class=3D"hh8">)</i><i class=3D"hh8">)</i=
><i class=3D"hh9"></i><i class=3D"hh9">;</i>
    <i class=3D"hh18">// error: cannot borrow `f` as mutable more than once=
 at a time</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh3">foobar</i><i class=3D"hh8">(</i>|x| x <i class=3D"hh5"=
>*</i> <i class=3D"hh1">2</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"34277">This is legal again:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"34299"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">foobar</i><i class=3D"hh8">&=
lt;</i><i class=3D"hh13">F</i><i class=3D"hh8">&gt;</i><i class=3D"hh8">(</=
i><i class=3D"hh4">mut</i> <i class=3D"hh17">f</i><i class=3D"hh9">:</i> <i=
 class=3D"hh13">F</i><i class=3D"hh8">)</i>
    <i class=3D"hh4">where</i> <i class=3D"hh13">F</i><i class=3D"hh9">:</i=
> <i class=3D"hh13">FnMut</i><i class=3D"hh8">(</i><i class=3D"hh14">i32</i=
><i class=3D"hh8">)</i> -&gt; <i class=3D"hh14">i32</i>
<i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> tmp =3D <i class=3D"hh3">f</i><i class=3D"hh8"=
>(</i><i class=3D"hh1">2</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{}"</i><i class=3D"hh9">,</i> <i class=3D"hh3">f</i><i =
class=3D"hh8">(</i>tmp<i class=3D"hh8">)</i><i class=3D"hh8">)</i><i class=
=3D"hh9"></i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh3">foobar</i><i class=3D"hh8">(</i>|x| x <i class=3D"hh5"=
>*</i> <i class=3D"hh1">2</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh18">// output: 8</i>
</code></figure><p data-bo=3D"34470"><code>FnMut</code> exists because some=
 closures <em>mutably borrow</em> local variables:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"34542"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">foobar</i><i class=3D"hh8">&=
lt;</i><i class=3D"hh13">F</i><i class=3D"hh8">&gt;</i><i class=3D"hh8">(</=
i><i class=3D"hh4">mut</i> <i class=3D"hh17">f</i><i class=3D"hh9">:</i> <i=
 class=3D"hh13">F</i><i class=3D"hh8">)</i>
    <i class=3D"hh4">where</i> <i class=3D"hh13">F</i><i class=3D"hh9">:</i=
> <i class=3D"hh13">FnMut</i><i class=3D"hh8">(</i><i class=3D"hh14">i32</i=
><i class=3D"hh8">)</i> -&gt; <i class=3D"hh14">i32</i>
<i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> tmp =3D <i class=3D"hh3">f</i><i class=3D"hh8"=
>(</i><i class=3D"hh1">2</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{}"</i><i class=3D"hh9">,</i> <i class=3D"hh3">f</i><i =
class=3D"hh8">(</i>tmp<i class=3D"hh8">)</i><i class=3D"hh8">)</i><i class=
=3D"hh9"></i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> <i class=3D"hh4">mut</i> acc =3D <i class=3D"h=
h1">2</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">foobar</i><i class=3D"hh8">(</i>|x| <i class=3D"hh8">{=
</i>
        acc +=3D <i class=3D"hh1">1</i><i class=3D"hh9">;</i>
        x <i class=3D"hh5">*</i> acc
    <i class=3D"hh8">}</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh18">// output: 24</i>
</code></figure><p data-bo=3D"34771">Those closures cannot be passed to fun=
ctions expecting <code>Fn</code>:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"34833"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">foobar</i><i class=3D"hh8">&=
lt;</i><i class=3D"hh13">F</i><i class=3D"hh8">&gt;</i><i class=3D"hh8">(</=
i><i class=3D"hh17">f</i><i class=3D"hh9">:</i> <i class=3D"hh13">F</i><i c=
lass=3D"hh8">)</i>
    <i class=3D"hh4">where</i> <i class=3D"hh13">F</i><i class=3D"hh9">:</i=
> <i class=3D"hh13">Fn</i><i class=3D"hh8">(</i><i class=3D"hh14">i32</i><i=
 class=3D"hh8">)</i> -&gt; <i class=3D"hh14">i32</i>
<i class=3D"hh8">{</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{}"</i><i class=3D"hh9">,</i> <i class=3D"hh3">f</i><i =
class=3D"hh8">(</i><i class=3D"hh3">f</i><i class=3D"hh8">(</i><i class=3D"=
hh1">2</i><i class=3D"hh8">)</i><i class=3D"hh8">)</i><i class=3D"hh8">)</i=
><i class=3D"hh9"></i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> <i class=3D"hh4">mut</i> acc =3D <i class=3D"h=
h1">2</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">foobar</i><i class=3D"hh8">(</i>|x| <i class=3D"hh8">{=
</i>
        acc +=3D <i class=3D"hh1">1</i><i class=3D"hh9">;</i>
        <i class=3D"hh18">// error: cannot assign to `acc`, as it is a</i>
        <i class=3D"hh18">// captured variable in a `Fn` closure.</i>
        <i class=3D"hh18">// the compiler suggests "changing foobar</i>
        <i class=3D"hh18">// to accept closures that implement `FnMut`"</i>
        x <i class=3D"hh5">*</i> acc
    <i class=3D"hh8">}</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"35226"><code>FnOnce</code> closures can only =
be called once. They exist because some closure
move out variables that have been moved when captured:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"35357"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">foobar</i><i class=3D"hh8">&=
lt;</i><i class=3D"hh13">F</i><i class=3D"hh8">&gt;</i><i class=3D"hh8">(</=
i><i class=3D"hh17">f</i><i class=3D"hh9">:</i> <i class=3D"hh13">F</i><i c=
lass=3D"hh8">)</i>
    <i class=3D"hh4">where</i> <i class=3D"hh13">F</i><i class=3D"hh9">:</i=
> <i class=3D"hh13">FnOnce</i><i class=3D"hh8">(</i><i class=3D"hh8">)</i> =
-&gt; <i class=3D"hh13">String</i>
<i class=3D"hh8">{</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{}"</i><i class=3D"hh9">,</i> <i class=3D"hh3">f</i><i =
class=3D"hh8">(</i><i class=3D"hh8">)</i><i class=3D"hh8">)</i><i class=3D"=
hh9"></i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> s =3D <i class=3D"hh13">String</i><i class=3D"=
hh9">::</i><i class=3D"hh3">from</i><i class=3D"hh8">(</i><i class=3D"hh10"=
>"alright"</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">foobar</i><i class=3D"hh8">(</i><i class=3D"hh4">move<=
/i> || s<i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh18">// `s` was moved into our closure, and our</i>
    <i class=3D"hh18">// closures moves it to the caller by returning</i>
    <i class=3D"hh18">// it. Remember that `String` is not `Copy`.</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"35673">This is enforced naturally, as <code>F=
nOnce</code> closures need to be <em>moved</em>
in order to be called.</p>

<p data-bo=3D"35765">So, for example, this is illegal:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"35800"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">foobar</i><i class=3D"hh8">&=
lt;</i><i class=3D"hh13">F</i><i class=3D"hh8">&gt;</i><i class=3D"hh8">(</=
i><i class=3D"hh17">f</i><i class=3D"hh9">:</i> <i class=3D"hh13">F</i><i c=
lass=3D"hh8">)</i>
    <i class=3D"hh4">where</i> <i class=3D"hh13">F</i><i class=3D"hh9">:</i=
> <i class=3D"hh13">FnOnce</i><i class=3D"hh8">(</i><i class=3D"hh8">)</i> =
-&gt; <i class=3D"hh13">String</i>
<i class=3D"hh8">{</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{}"</i><i class=3D"hh9">,</i> <i class=3D"hh3">f</i><i =
class=3D"hh8">(</i><i class=3D"hh8">)</i><i class=3D"hh8">)</i><i class=3D"=
hh9"></i><i class=3D"hh9">;</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{}"</i><i class=3D"hh9">,</i> <i class=3D"hh3">f</i><i =
class=3D"hh8">(</i><i class=3D"hh8">)</i><i class=3D"hh8">)</i><i class=3D"=
hh9"></i><i class=3D"hh9">;</i>
    <i class=3D"hh18">// error: use of moved value: `f`</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"35956">And, if you need convincing that our c=
losure <em>does</em> move <code>s</code>,
this is illegal too:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"36040"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> s =3D <i class=3D"hh13">String</i><i class=3D"=
hh9">::</i><i class=3D"hh3">from</i><i class=3D"hh8">(</i><i class=3D"hh10"=
>"alright"</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">foobar</i><i class=3D"hh8">(</i><i class=3D"hh4">move<=
/i> || s<i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">foobar</i><i class=3D"hh8">(</i><i class=3D"hh4">move<=
/i> || s<i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh18">// use of moved value: `s`</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"36181">But this is fine:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"36200"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> s =3D <i class=3D"hh13">String</i><i class=3D"=
hh9">::</i><i class=3D"hh3">from</i><i class=3D"hh8">(</i><i class=3D"hh10"=
>"alright"</i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">foobar</i><i class=3D"hh8">(</i>|| s<i class=3D"hh9">.=
</i><i class=3D"hh3">clone</i><i class=3D"hh8">(</i><i class=3D"hh8">)</i><=
i class=3D"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">foobar</i><i class=3D"hh8">(</i>|| s<i class=3D"hh9">.=
</i><i class=3D"hh3">clone</i><i class=3D"hh8">(</i><i class=3D"hh8">)</i><=
i class=3D"hh8">)</i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"36316">Here=E2=80=99s a closure with two argu=
ments:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"36354"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">foobar</i><i class=3D"hh8">&=
lt;</i><i class=3D"hh13">F</i><i class=3D"hh8">&gt;</i><i class=3D"hh8">(</=
i><i class=3D"hh17">x</i><i class=3D"hh9">:</i> <i class=3D"hh14">i32</i><i=
 class=3D"hh9">,</i> <i class=3D"hh17">y</i><i class=3D"hh9">:</i> <i class=
=3D"hh14">i32</i><i class=3D"hh9">,</i> <i class=3D"hh17">is_greater</i><i =
class=3D"hh9">:</i> <i class=3D"hh13">F</i><i class=3D"hh8">)</i>
    <i class=3D"hh4">where</i> <i class=3D"hh13">F</i><i class=3D"hh9">:</i=
> <i class=3D"hh13">Fn</i><i class=3D"hh8">(</i><i class=3D"hh14">i32</i><i=
 class=3D"hh9">,</i> <i class=3D"hh14">i32</i><i class=3D"hh8">)</i> -&gt; =
<i class=3D"hh14">bool</i>
<i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> <i class=3D"hh8">(</i>greater<i class=3D"hh9">=
,</i> smaller<i class=3D"hh8">)</i> =3D <i class=3D"hh4">if</i> <i class=3D=
"hh3">is_greater</i><i class=3D"hh8">(</i>x<i class=3D"hh9">,</i> y<i class=
=3D"hh8">)</i> <i class=3D"hh8">{</i>
        <i class=3D"hh8">(</i>x<i class=3D"hh9">,</i> y<i class=3D"hh8">)</=
i>
    <i class=3D"hh8">}</i> <i class=3D"hh4">else</i> <i class=3D"hh8">{</i>
        <i class=3D"hh8">(</i>y<i class=3D"hh9">,</i> x<i class=3D"hh8">)</=
i>
    <i class=3D"hh8">}</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{} is greater than {}"</i><i class=3D"hh9">,</i> greate=
r<i class=3D"hh9">,</i> smaller<i class=3D"hh8">)</i><i class=3D"hh9"></i><=
i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh3">foobar</i><i class=3D"hh8">(</i><i class=3D"hh1">32</i=
><i class=3D"hh9">,</i> <i class=3D"hh1">64</i><i class=3D"hh9">,</i> |x<i =
class=3D"hh9">,</i> y| x &gt; y<i class=3D"hh8">)</i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"36656">Here=E2=80=99s a closure ignoring both=
 its arguments:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"36703"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh3">foobar</i><i class=3D"hh8">(</i><i class=3D"hh1">32</i=
><i class=3D"hh9">,</i> <i class=3D"hh1">64</i><i class=3D"hh9">,</i> |_<i =
class=3D"hh9">,</i> _| <i class=3D"hh3">panic</i><i class=3D"hh3">!</i><i c=
lass=3D"hh8">(</i><i class=3D"hh10">"Comparing is futile!"</i><i class=3D"h=
h8">)</i><i class=3D"hh9"></i><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"36789">Here=E2=80=99s a slightly worrying clo=
sure:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"36826"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">countdown</i><i class=3D"hh8=
">&lt;</i><i class=3D"hh13">F</i><i class=3D"hh8">&gt;</i><i class=3D"hh8">=
(</i><i class=3D"hh17">count</i><i class=3D"hh9">:</i> <i class=3D"hh14">us=
ize</i><i class=3D"hh9">,</i> <i class=3D"hh17">tick</i><i class=3D"hh9">:<=
/i> <i class=3D"hh13">F</i><i class=3D"hh8">)</i>
    <i class=3D"hh4">where</i> <i class=3D"hh13">F</i><i class=3D"hh9">:</i=
> <i class=3D"hh13">Fn</i><i class=3D"hh8">(</i><i class=3D"hh14">usize</i>=
<i class=3D"hh8">)</i>
<i class=3D"hh8">{</i>
    <i class=3D"hh4">for</i> i <i class=3D"hh4">in</i> <i class=3D"hh8">(</=
i><i class=3D"hh1">1</i>..=3Dcount<i class=3D"hh8">)</i><i class=3D"hh9">.<=
/i><i class=3D"hh3">rev</i><i class=3D"hh8">(</i><i class=3D"hh8">)</i> <i =
class=3D"hh8">{</i>
        <i class=3D"hh3">tick</i><i class=3D"hh8">(</i>i<i class=3D"hh8">)<=
/i><i class=3D"hh9">;</i>
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh3">countdown</i><i class=3D"hh8">(</i><i class=3D"hh1">3<=
/i><i class=3D"hh9">,</i> |i| <i class=3D"hh3">println</i><i class=3D"hh3">=
!</i><i class=3D"hh8">(</i><i class=3D"hh10">"tick {}..."</i><i class=3D"hh=
9">,</i> i<i class=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh8">)</i>=
<i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh18">// output:</i>
<i class=3D"hh18">// tick 3...</i>
<i class=3D"hh18">// tick 2...</i>
<i class=3D"hh18">// tick 1...</i>
</code></figure><a id=3D"the-toilet-closure" href=3D"https://fasterthanli.m=
e/articles/a-half-hour-to-learn-rust#the-toilet-closure" class=3D"anchor"><=
h3>The toilet closure</h3></a>
<p data-bo=3D"37100">And here=E2=80=99s a toilet closure:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"37130"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh3">countdown</i><i class=3D"hh8">(</i><i class=3D"hh1">3<=
/i><i class=3D"hh9">,</i> |_| <i class=3D"hh8">(</i><i class=3D"hh8">)</i><=
i class=3D"hh8">)</i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"37183">It=E2=80=99s called that because <code=
>|_| ()</code> looks like a toilet.</p>

<a id=3D"loops-iterators" href=3D"https://fasterthanli.me/articles/a-half-h=
our-to-learn-rust#loops-iterators" class=3D"anchor"><h2>Loops, iterators</h=
2></a>
<p data-bo=3D"37260">Anything that is iterable can be used in a <code>for i=
n</code> loop.</p>

<p data-bo=3D"37319">We=E2=80=99ve just seen a range being used, but it als=
o works with a <code>Vec</code>:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"37388"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">for</i> i <i class=3D"hh4">in</i> <i class=3D"hh3">vec=
</i><i class=3D"hh3">!</i><i class=3D"hh8">[</i><i class=3D"hh1">52</i><i c=
lass=3D"hh9">,</i> <i class=3D"hh1">49</i><i class=3D"hh9">,</i> <i class=
=3D"hh1">21</i><i class=3D"hh8">]</i><i class=3D"hh9"></i> <i class=3D"hh8"=
>{</i>
        <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">=
(</i><i class=3D"hh10">"I like the number {}"</i><i class=3D"hh9">,</i> i<i=
 class=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>
</code></figure><p data-bo=3D"37498">Or a slice:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"37511"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">for</i> i <i class=3D"hh4">in</i> <i class=3D"hh5">&am=
p;</i><i class=3D"hh8">[</i><i class=3D"hh1">52</i><i class=3D"hh9">,</i> <=
i class=3D"hh1">49</i><i class=3D"hh9">,</i> <i class=3D"hh1">21</i><i clas=
s=3D"hh8">]</i> <i class=3D"hh8">{</i>
        <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">=
(</i><i class=3D"hh10">"I like the number {}"</i><i class=3D"hh9">,</i> i<i=
 class=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>

<i class=3D"hh18">// output:</i>
<i class=3D"hh18">// I like the number 52</i>
<i class=3D"hh18">// I like the number 49</i>
<i class=3D"hh18">// I like the number 21</i>
</code></figure><p data-bo=3D"37702">Or an actual iterator:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"37726"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh18">// note: `&amp;str` also has a `.bytes()` iterator.</=
i>
    <i class=3D"hh18">// Rust's `char` type is a "Unicode scalar value"</i>
    <i class=3D"hh4">for</i> c <i class=3D"hh4">in</i> <i class=3D"hh10">"r=
ust"</i><i class=3D"hh9">.</i><i class=3D"hh3">chars</i><i class=3D"hh8">(<=
/i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
        <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">=
(</i><i class=3D"hh10">"Give me a {}"</i><i class=3D"hh9">,</i> c<i class=
=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>

<i class=3D"hh18">// output:</i>
<i class=3D"hh18">// Give me a r</i>
<i class=3D"hh18">// Give me a u</i>
<i class=3D"hh18">// Give me a s</i>
<i class=3D"hh18">// Give me a t</i>
</code></figure><p data-bo=3D"38004">Even if the iterator items are filtere=
d and mapped and flattened:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"38071"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</=
i><i class=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">for</i> c <i class=3D"hh4">in</i> <i class=3D"hh10">"S=
uRPRISE INbOUND"</i>
        <i class=3D"hh9">.</i><i class=3D"hh3">chars</i><i class=3D"hh8">(<=
/i><i class=3D"hh8">)</i>
        <i class=3D"hh9">.</i><i class=3D"hh3">filter</i><i class=3D"hh8">(=
</i>|c| c<i class=3D"hh9">.</i><i class=3D"hh3">is_lowercase</i><i class=3D=
"hh8">(</i><i class=3D"hh8">)</i><i class=3D"hh8">)</i>
        <i class=3D"hh9">.</i><i class=3D"hh3">flat_map</i><i class=3D"hh8"=
>(</i>|c| c<i class=3D"hh9">.</i><i class=3D"hh3">to_uppercase</i><i class=
=3D"hh8">(</i><i class=3D"hh8">)</i><i class=3D"hh8">)</i>
    <i class=3D"hh8">{</i>
        <i class=3D"hh3">print</i><i class=3D"hh3">!</i><i class=3D"hh8">(<=
/i><i class=3D"hh10">"{}"</i><i class=3D"hh9">,</i> c<i class=3D"hh8">)</i>=
<i class=3D"hh9">;</i>
    <i class=3D"hh8">}</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh8">)</i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh18">// output: UB</i>
</code></figure><a id=3D"returning-closures" href=3D"https://fasterthanli.m=
e/articles/a-half-hour-to-learn-rust#returning-closures" class=3D"anchor"><=
h2>Returning closures</h2></a>
<p data-bo=3D"38316">You can return a closure from a function:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"38359"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">make_tester</i><i class=3D"h=
h8">(</i><i class=3D"hh17">answer</i><i class=3D"hh9">:</i> <i class=3D"hh1=
3">String</i><i class=3D"hh8">)</i> -&gt; <i class=3D"hh4">impl</i> <i clas=
s=3D"hh13">Fn</i><i class=3D"hh8">(</i><i class=3D"hh5">&amp;</i><i class=
=3D"hh14">str</i><i class=3D"hh8">)</i> -&gt; <i class=3D"hh14">bool</i> <i=
 class=3D"hh8">{</i>
    <i class=3D"hh4">move</i> |challenge| <i class=3D"hh8">{</i>
        challenge =3D=3D answer
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh18">// you can use `.into()` to perform conversions</i>
    <i class=3D"hh18">// between various types, here `&amp;'static str` and=
 `String`</i>
    <i class=3D"hh4">let</i> test =3D <i class=3D"hh3">make_tester</i><i cl=
ass=3D"hh8">(</i><i class=3D"hh10">"hunter2"</i><i class=3D"hh9">.</i><i cl=
ass=3D"hh3">into</i><i class=3D"hh8">(</i><i class=3D"hh8">)</i><i class=3D=
"hh8">)</i><i class=3D"hh9">;</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{}"</i><i class=3D"hh9">,</i> <i class=3D"hh3">test</i>=
<i class=3D"hh8">(</i><i class=3D"hh10">"******"</i><i class=3D"hh8">)</i><=
i class=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{}"</i><i class=3D"hh9">,</i> <i class=3D"hh3">test</i>=
<i class=3D"hh8">(</i><i class=3D"hh10">"hunter2"</i><i class=3D"hh8">)</i>=
<i class=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"capturing-into-a-closure" href=3D"https://fasterth=
anli.me/articles/a-half-hour-to-learn-rust#capturing-into-a-closure" class=
=3D"anchor"><h3>Capturing into a closure</h3></a>
<p data-bo=3D"38768">You can even move a reference to some of a function=E2=
=80=99s arguments,
into a closure it returns:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"38861"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">make_tester</i><i class=3D"h=
h8">&lt;</i><i class=3D"hh5">'</i><i class=3D"hh20">a</i><i class=3D"hh8">&=
gt;</i><i class=3D"hh8">(</i><i class=3D"hh17">answer</i><i class=3D"hh9">:=
</i> <i class=3D"hh5">&amp;</i><i class=3D"hh5">'</i><i class=3D"hh20">a</i=
> <i class=3D"hh14">str</i><i class=3D"hh8">)</i> -&gt; <i class=3D"hh4">im=
pl</i> <i class=3D"hh13">Fn</i><i class=3D"hh8">(</i><i class=3D"hh5">&amp;=
</i><i class=3D"hh14">str</i><i class=3D"hh8">)</i> -&gt; <i class=3D"hh14"=
>bool</i> + <i class=3D"hh5">'</i><i class=3D"hh20">a</i> <i class=3D"hh8">=
{</i>
    <i class=3D"hh4">move</i> |challenge| <i class=3D"hh8">{</i>
        challenge =3D=3D answer
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>

<i class=3D"hh4">fn</i> <i class=3D"hh3">main</i><i class=3D"hh8">(</i><i c=
lass=3D"hh8">)</i> <i class=3D"hh8">{</i>
    <i class=3D"hh4">let</i> test =3D <i class=3D"hh3">make_tester</i><i cl=
ass=3D"hh8">(</i><i class=3D"hh10">"hunter2"</i><i class=3D"hh8">)</i><i cl=
ass=3D"hh9">;</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{}"</i><i class=3D"hh9">,</i> <i class=3D"hh3">test</i>=
<i class=3D"hh8">(</i><i class=3D"hh10">"*******"</i><i class=3D"hh8">)</i>=
<i class=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
    <i class=3D"hh3">println</i><i class=3D"hh3">!</i><i class=3D"hh8">(</i=
><i class=3D"hh10">"{}"</i><i class=3D"hh9">,</i> <i class=3D"hh3">test</i>=
<i class=3D"hh8">(</i><i class=3D"hh10">"hunter2"</i><i class=3D"hh8">)</i>=
<i class=3D"hh8">)</i><i class=3D"hh9"></i><i class=3D"hh9">;</i>
<i class=3D"hh8">}</i>

<i class=3D"hh18">// output:</i>
<i class=3D"hh18">// false</i>
<i class=3D"hh18">// true</i>
</code></figure><p data-bo=3D"39158">Or, with elided lifetimes:</p>

<figure role=3D"region" aria-label=3D"Code block" class=3D"code-block" tran=
slate=3D"no" data-lang=3D"rust" data-bo=3D"39186"><code class=3D"scroll-wra=
pper"><i class=3D"hh4">fn</i> <i class=3D"hh3">make_tester</i><i class=3D"h=
h8">(</i><i class=3D"hh17">answer</i><i class=3D"hh9">:</i> <i class=3D"hh5=
">&amp;</i><i class=3D"hh14">str</i><i class=3D"hh8">)</i> -&gt; <i class=
=3D"hh4">impl</i> <i class=3D"hh13">Fn</i><i class=3D"hh8">(</i><i class=3D=
"hh5">&amp;</i><i class=3D"hh14">str</i><i class=3D"hh8">)</i> -&gt; <i cla=
ss=3D"hh14">bool</i> + <i class=3D"hh5">'</i><i class=3D"hh20">_</i> <i cla=
ss=3D"hh8">{</i>
    <i class=3D"hh4">move</i> |challenge| <i class=3D"hh8">{</i>
        challenge =3D=3D answer
    <i class=3D"hh8">}</i>
<i class=3D"hh8">}</i>
</code></figure><a id=3D"conclusion" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#conclusion" class=3D"anchor"><h2>Conclusion</h=
2></a>
<p data-bo=3D"39334">And with that, we hit the 30-minute estimated reading =
time mark, and you
should be able to read <em>most</em> of the Rust code you find online.</p>

<p data-bo=3D"39472">Writing Rust is a very different experience from readi=
ng Rust. On one hand,
you=E2=80=99re not reading the <em>solution</em> to a problem, you=E2=80=99=
re actually solving it.
On the other hand, the Rust compiler helps out a <em>lot</em>.</p>

<p data-bo=3D"39681">The Rust compiler has high-quality diagnostics (which =
include suggestions) for
all the mistakes featured in this article.</p>

<p data-bo=3D"39804">And when there=E2=80=99s a hint missing, the compiler =
team is <a href=3D"https://github.com/rust-lang/rust/pull/68267">not afraid=
 to add it</a>.</p>

<p data-bo=3D"39929">For more Rust material, you may want to check out:</p>

<ul><li><a href=3D"https://doc.rust-lang.org/book/">The Rust Book</a></li>
<li><a href=3D"https://doc.rust-lang.org/stable/rust-by-example/">Rust By E=
xample</a></li>
<li><a href=3D"https://readrust.net/">Read Rust</a></li>
<li><a href=3D"https://this-week-in-rust.org/">This Week In Rust</a></li>
</ul>
<p data-bo=3D"40203">I also <a href=3D"https://fasterthanli.me/tags/rust/">=
blog about Rust</a> and post a lot about Rust on
<a href=3D"https://hachyderm.io/@fasterthanlime">Mastodon</a> and
<a href=3D"https://twitter.com/fasterthanlime">Twitter</a> a lot, so if you=
 liked this
article, you know what to do!</p>

<p data-bo=3D"40428">Have fun!</p>



   =20

   =20

   =20
    <p>
        </p><p>
    <a target=3D"_blank" href=3D"https://fasterthanli.me/api/comments?url=
=3Dhttps%3A%2F%2Ffasterthanli.me%2Farticles%2Fa-half-hour-to-learn-rust&amp=
;title=3DA+half-hour+to+learn+Rust">
        <span class=3D"label">
            Comment <span class=3D"hide-when-small">on /r/fasterthanlime</s=
pan>
        </span>
    </a>
</p>
    <p></p>
   =20

   =20
        <div class=3D"gentle-nudge-island" data-context=3D"end-of-page"><!-=
---><!----><p class=3D"svelte-fr8gui">Thanks to my sponsors:<!----> <span i=
d=3D"visible-sponsors">hgranthorner, Dirkjan Ochtman, Malik Bougacha, Dimit=
ri Merejkowsky, teor, Torben Clasen, Marcus Griep, Yufan Lou, Alex Krantz, =
Aljaz Erzen, Mark Old, Brandon Pi=C3=B1a, Das G=C3=BCrteltier, Stephan Buys=
, Marie Janssen, Michal Ho=C5=A1na, Alex Rudy, Damir Vandic, Senyo Simpson,=
 Ronen Cohen<!----> and <a href=3D"https://fasterthanli.me/articles/a-half-=
hour-to-learn-rust#" role=3D"button" tabindex=3D"0"><span id=3D"more-sponso=
rs-count">264</span> more</a><!----></span><!----> <!----></p><!----> <p cl=
ass=3D"svelte-18zl9y2">My work is sponsored by people like you. Donate now =
so it can keep going:</p> <p class=3D"button-container svelte-1ntljf8"><a r=
ole=3D"button" tabindex=3D"0" class=3D"svelte-18ly3b7"><svg width=3D"1em" h=
eight=3D"1em" viewBox=3D"0 0 496 512" stroke-width=3D"0" stroke=3D"currentC=
olor" fill=3D"currentColor" xmlns=3D"http://www.w3.org/2000/svg" style=3D"c=
olor: currentcolor;"><path d=3D"M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-=
1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4=
.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1=
.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9=
-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.=
2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0=
-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 =
58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5=
 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 =
20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.=
2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9=
.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.=
2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.=
3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10=
.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3=
.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3=
.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2=
.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"></path><!---=
-></svg><!----> <span class=3D"label svelte-18ly3b7">Continue with GitHub</=
span><!----></a><!----> <a role=3D"button" tabindex=3D"0" class=3D"svelte-1=
8ly3b7 secondary"><svg width=3D"1em" height=3D"1em" viewBox=3D"0 0 512 512"=
 stroke-width=3D"0" stroke=3D"currentColor" fill=3D"currentColor" xmlns=3D"=
http://www.w3.org/2000/svg" style=3D"color: currentcolor;"><path d=3D"M489.=
7 153.8c-.1-65.4-51-119-110.7-138.3C304.8-8.5 207-5 136.1 28.4C50.3 68.9 23=
.3 157.7 22.3 246.2C21.5 319 28.7 510.6 136.9 512c80.3 1 92.3-102.5 129.5-1=
52.3c26.4-35.5 60.5-45.5 102.4-55.9c72-17.8 121.1-74.7 121-150z"></path><!-=
---></svg><!----> <span class=3D"label svelte-18ly3b7">Continue with Patreo=
n</span><!----></a><!----></p><!----></div>
    =20

    <div class=3D"bottom-nav">
       =20
       =20
            <p style=3D"margin-bottom: 0.8em;">
                Here's another article just for you:
            </p>
           =20

   =20



 =20
<div class=3D"post-list-item random">
   =20

   =20
   =20
     =20
   =20
   =20

   =20

    <div class=3D"post-list-item-inner">
        <h2 class=3D"post-list-title">
            <a class=3D"post-link" href=3D"https://fasterthanli.me/articles=
/remote-development-with-rust-on-fly-io">
               =20

               =20
                    Remote development with Rust on fly.io
               =20
            </a>
         </h2>
          <div class=3D"post-blocks">
              <div class=3D"post-block small">
                  <div class=3D"post-metadata">
                      <div class=3D"post-date">Jun 20, 2022</div>
                      <span class=3D"reading-time">
        <img class=3D"inline-icon" id=3D"clock-icon" src=3D"https://cdn.fas=
terthanli.me/content/img/clock~ea83208fa4bce57a.svg" alt=3D"clock icon" wid=
th=3D"1.1em" height=3D"1.1em">
        <abbr title=3D"Estimated reading time, at 220 words per minute, whe=
re one word =3D 5 characters">
           =20
                43 min
           =20
        </abbr>
    </span>
                     =20
    <span class=3D"tags">
       =20
           =20
                <span><a href=3D"https://fasterthanli.me/tags/rust">#rust</=
a></span>
           =20
           =20
                <span>=C2=B7</span>
           =20
       =20
           =20
                <span><a href=3D"https://fasterthanli.me/tags/tokio">#tokio=
</a></span>
           =20
           =20
                <span>=C2=B7</span>
           =20
       =20
           =20
                <span><a href=3D"https://fasterthanli.me/tags/io-uring">#io=
-uring</a></span>
           =20
           =20
                <span>=C2=B7</span>
           =20
       =20
           =20
                <span><a href=3D"https://fasterthanli.me/tags/bpf">#bpf</a>=
</span>
           =20
           =20
                <span>=C2=B7</span>
           =20
       =20
           =20
                <span><a href=3D"https://fasterthanli.me/tags/fly.io">#fly.=
io</a></span>
           =20
           =20
       =20
    </span>
                      <span class=3D"indicators">
   =20
   =20
   =20

   =20
</span>

                      <div class=3D"post-metadata-filler"></div>
                  </div>
              </div>

              <div class=3D"post-block big">
                  <div class=3D"post-summary markup-container">
                     =20
                          <div data-bo=3D"166" class=3D"disclosure paragrap=
h-like">
<p data-bo=3D"55"><strong>Disclaimer</strong>:</p>

<p data-bo=3D"184">At the time of this writing, I benefit from the fly.io =
=E2=80=9CEmployee Free Tier=E2=80=9D. I
don=E2=80=99t pay for side projects hosted there =E2=80=9Cwithin reasonable=
 limits=E2=80=9D. The project
discussed here qualifies for that.</p>

</div><a id=3D"why-you-might-want-a-remote-dev-environment" href=3D"https:/=
/fasterthanli.me/articles/a-half-hour-to-learn-rust#why-you-might-want-a-re=
mote-dev-environment" class=3D"anchor"><h2>Why you might want a remote dev =
environment</h2></a>
<p data-bo=3D"432">Fearmongering aside =E2=80=94 and Cthulhu knows there=E2=
=80=99s been a bunch, since <a href=3D"https://twitter.com/github/status/15=
37148707673497600">this
unfortunate tweet</a> =E2=80=94
there=E2=80=99s a bunch of reasons to want a remote dev environment.</p>





























<a id=3D"what-the-heck-is-fly-io-for-even" href=3D"https://fasterthanli.me/=
articles/a-half-hour-to-learn-rust#what-the-heck-is-fly-io-for-even" class=
=3D"anchor"></a>







































































































<a id=3D"the-ssh-server-problem" href=3D"https://fasterthanli.me/articles/a=
-half-hour-to-learn-rust#the-ssh-server-problem" class=3D"anchor"></a>




























<a id=3D"enter-fly-io-machines" href=3D"https://fasterthanli.me/articles/a-=
half-hour-to-learn-rust#enter-fly-io-machines" class=3D"anchor"></a>


































































































































<a id=3D"a-naive-tcp-proxy-with-tokio" href=3D"https://fasterthanli.me/arti=
cles/a-half-hour-to-learn-rust#a-naive-tcp-proxy-with-tokio" class=3D"ancho=
r"></a>




































<a id=3D"a-wonderful-tcp-proxy-with-tokio-uring" href=3D"https://fasterthan=
li.me/articles/a-half-hour-to-learn-rust#a-wonderful-tcp-proxy-with-tokio-u=
ring" class=3D"anchor"></a>









































<a id=3D"an-ebpf-thingy-with-aya" href=3D"https://fasterthanli.me/articles/=
a-half-hour-to-learn-rust#an-ebpf-thingy-with-aya" class=3D"anchor"></a>





























































































































<a id=3D"simply-polling-procfs" href=3D"https://fasterthanli.me/articles/a-=
half-hour-to-learn-rust#simply-polling-procfs" class=3D"anchor"></a>


































                     =20
                  </div>

                  <div class=3D"read-more">
                      <a href=3D"https://fasterthanli.me/articles/remote-de=
velopment-with-rust-on-fly-io">Read more</a>
                  </div>
              </div>
          </div>
    </div>
</div>
       =20
    </div>
 =20
  </div>

    </div>

   =20
   =20
    <nav class=3D"table-of-contents">
        <menu>
            <a href=3D"https://fasterthanli.me/articles/a-half-hour-to-lear=
n-rust#lith-page-top" class=3D"toc-entry">
              <h2 class=3D"toc-header">
                  Contents
              </h2>
            </a>

           =20
            <li data-level=3D"2" class=3D"reading">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#variable-bindings">Variable bindings</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#the-let-keyword">The let keyword</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#type-annotation">Type annotation</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#uninitialized-variables">Uninitialized variabl=
es</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#throwing-values-away">Throwing values away</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#shadowing-bindings">Shadowing bindings</a>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#tuples">Tuples</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#destructuring-tuples">Destructuring tuples</a>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#statements">Statements</a>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#functions">Functions</a>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#blocks">Blocks</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#blocks-are-expressions">Blocks are expressions=
</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#implicit-return">Implicit return</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#everything-is-an-expression">Everything is an =
expression</a>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#field-access-and-method-calling">Field access =
and method calling</a>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#modules-use-syntax">Modules, use syntax</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#types-are-namespaces-too">Types are namespaces=
 too</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#the-libstd-prelude">The libstd prelude</a>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#structs">Structs</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#struct-update-syntax">Struct update syntax</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#destructuring-structs">Destructuring structs</=
a>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#patterns-and-destructuring">Patterns and destr=
ucturing</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#destructuring-with-if-let">Destructuring with =
if let</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#match-arms-are-patterns">Match arms are patter=
ns</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#exhaustive-matches">Exhaustive matches</a>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#methods">Methods</a>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#immutability">Immutability</a>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#traits">Traits</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#orphan-rules">Orphan rules</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#the-self-type">The Self type</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#marker-traits">Marker traits</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#trait-method-receivers">Trait method receivers=
</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#deriving-traits">Deriving traits</a>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#generics">Generics</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#generic-functions">Generic functions</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#type-parameter-constraints-trait-bounds">Type =
parameter constraints (trait bounds)</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#monomorphization">Monomorphization</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#generic-structs">Generic structs</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#example-vec-t">Example: Vec&lt;T&gt;</a>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#macros">Macros</a>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#the-panic-macro">The panic! macro</a>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#functions-that-panic">Functions that panic</a>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#enums-sum-types">Enums (sum types)</a>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#lifetimes">Lifetimes</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#borrowing-rules-one-or-more-immutable-borrows-=
xor-one-mutable-borrow">Borrowing rules (one or more immutable borrows XOR =
one mutable borrow)</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#functions-generic-over-lifetimes">Functions ge=
neric over lifetimes</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#lifetime-elision">Lifetime elision</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#structs-generic-over-lifetimes">Structs generi=
c over lifetimes</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#implementations-generic-over-lifetimes">Implem=
entations generic over lifetimes</a>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#the-static-lifetime">The 'static lifetime</a>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#struct-literal-assignment-shorthand">Struct li=
teral assignment shorthand</a>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#owned-types-vs-reference-types">Owned types vs=
 reference types</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#slices">Slices</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#operator-overloading">Operator overloading</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#borrowing-rules-and-slices">Borrowing rules an=
d slices</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#string-slices-str">String slices (&amp;str)</a=
>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#fallible-functions-result-t-e">Fallible functi=
ons (Result&lt;T, E&gt;)</a>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#dereferencing">Dereferencing</a>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#function-types-closures">Function types, closu=
res</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#fnmut-and-borrowing-rules">FnMut and borrowing=
 rules</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#the-toilet-closure">The toilet closure</a>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#loops-iterators">Loops, iterators</a>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#returning-closures">Returning closures</a>
            </li>
           =20
            <li data-level=3D"3">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#capturing-into-a-closure">Capturing into a clo=
sure</a>
            </li>
           =20
            <li data-level=3D"2">
              <a class=3D"toc-entry" href=3D"https://fasterthanli.me/articl=
es/a-half-hour-to-learn-rust#conclusion">Conclusion</a>
            </li>
           =20
        </menu>
    </nav>
   =20

  </main>
</div> <!-- content -->
<div class=3D"nav-bottom">
    <div class=3D"nav-content">
        <div class=3D"nav-outlinks icons">
            <a href=3D"https://ko-fi.com/fasterthanlime" title=3D"Ko-fi" ta=
rget=3D"_blank">
                <span class=3D"inline-icon-container">
                    <svg width=3D"241" height=3D"194" viewBox=3D"0 0 241 19=
4" fill=3D"none" xmlns=3D"http://www.w3.org/2000/svg">
<mask id=3D"mask0_1_219" style=3D"mask-type:luminance" maskUnits=3D"userSpa=
ceOnUse" x=3D"-1" y=3D"0" width=3D"242" height=3D"194">
<path d=3D"M240.469 0.958984H-0.00585938V193.918H240.469V0.958984Z" fill=3D=
"white"></path>
</mask>
<g mask=3D"url(#mask0_1_219)">
<path d=3D"M96.1344 193.911C61.1312 193.911 32.6597 178.256 15.9721 149.829=
C1.19788 124.912 -0.00585938 97.9229 -0.00585938 67.7662C-0.00585938 49.887=
6 5.37293 34.3215 15.5413 22.7466C24.8861 12.1157 38.1271 5.22907 52.8317 3=
.35378C70.2858 1.14271 91.9848 0.958984 114.545 0.958984C151.259 0.958984 1=
61.63 1.4088 176.075 2.85328C195.29 4.76026 211.458 11.932 222.824 23.5955C=
234.368 35.4428 240.469 51.2624 240.469 69.3627V72.9994C240.469 103.885 219=
.821 129.733 191.046 136.759C188.898 141.827 186.237 146.871 183.089 151.83=
7L183.006 151.964C172.869 167.632 149.042 193.918 103.401 193.918H96.1281L9=
6.1344 193.911Z" fill=3D"white"></path>
<path d=3D"M174.568 17.9772C160.927 16.6151 151.38 16.1589 114.552 16.1589C=
90.908 16.1589 70.9008 16.387 54.7644 18.4334C33.3949 21.164 15.2058 37.528=
5 15.2058 67.7674C15.2058 98.0066 16.796 121.422 29.0741 142.107C42.9425 16=
5.751 66.1302 178.707 96.1412 178.707H103.414C140.242 178.707 160.25 159.15=
6 170.253 143.698C174.574 136.874 177.754 130.058 179.801 123.234C205.947 1=
20.96 225.27 99.3624 225.27 72.9941V69.3577C225.27 40.9432 206.631 21.164 1=
74.574 17.9772H174.568Z" fill=3D"white"></path>
<path d=3D"M15.1975 67.7674C15.1975 37.5285 33.3866 21.164 54.7559 18.4334C=
70.8987 16.387 90.906 16.1589 114.544 16.1589C151.372 16.1589 160.919 16.61=
51 174.559 17.9772C206.617 21.1576 225.255 40.937 225.255 69.3577V72.9941C2=
25.255 99.3687 205.932 120.966 179.786 123.234C177.74 130.058 174.559 136.8=
74 170.238 143.698C160.235 159.156 140.228 178.707 103.4 178.707H96.1264C66=
.1155 178.707 42.9277 165.751 29.0595 142.107C16.7814 121.422 15.1912 98.45=
63 15.1912 67.7674" fill=3D"#202020"></path>
<path d=3D"M32.2469 67.9899C32.2469 97.3168 34.0654 116.184 43.6127 133.689=
C54.5225 153.924 74.3018 161.653 96.8117 161.653H103.857C133.411 161.653 14=
7.736 147.329 155.693 134.829C159.558 128.462 162.966 121.417 164.784 112.5=
47L166.147 106.864H174.332C192.521 106.864 208.208 92.09 208.208 73.2166V69=
.8082C208.208 48.6669 195.024 37.5228 172.058 34.7987C159.102 33.6646 151.3=
72 33.2084 114.538 33.2084C89.7602 33.2084 72.0272 33.4364 58.6152 35.4828C=
39.7483 38.2134 32.2407 48.8951 32.2407 67.9899" fill=3D"white"></path>
<path d=3D"M166.158 83.6801C166.158 86.4107 168.204 88.4572 171.841 88.4572=
C183.435 88.4572 189.802 81.8619 189.802 70.9523C189.802 60.0427 183.435 53=
.2195 171.841 53.2195C168.204 53.2195 166.158 55.2657 166.158 57.9963V83.68=
66V83.6801Z" fill=3D"#202020"></path>
<path d=3D"M54.5321 82.3198C54.5321 95.732 62.0332 107.326 71.5807 116.424C=
77.9478 122.562 87.9515 128.93 94.7685 133.022C96.8147 134.157 98.8611 134.=
841 101.136 134.841C103.866 134.841 106.134 134.157 107.959 133.022C114.782=
 128.93 124.779 122.562 130.919 116.424C140.694 107.332 148.195 95.7383 148=
.195 82.3198C148.195 67.7673 137.286 54.8115 121.599 54.8115C112.28 54.8115=
 105.912 59.5882 101.136 66.1772C96.8147 59.582 90.2259 54.8115 80.9001 54.=
8115C64.9855 54.8115 54.5256 67.7673 54.5256 82.3198" fill=3D"#FF5A16"></pa=
th>
</g>
</svg>
                </span>
                Ko-fi
            </a>
            <a rel=3D"me" href=3D"https://github.com/sponsors/fasterthanlim=
e" title=3D"GitHub Sponsors" target=3D"_blank">
                <span class=3D"inline-icon-container">
                    <svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"24" =
height=3D"24" viewBox=3D"0 0 24 24">
	<path d=3D"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.59=
9.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.38=
7-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.23=
7 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604=
-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303=
-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.=
404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.65=
3.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.4=
79 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.58=
9 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"></path>
</svg>
                </span>
                GitHub Sponsors
            </a>

            <a href=3D"https://patreon.com/fasterthanlime" title=3D"Patreon=
" target=3D"_blank">
                <span class=3D"inline-icon-container">
                    <!--?xml version=3D"1.0" encoding=3D"utf-8"?-->
<svg version=3D"1.1" id=3D"Layer_1" xmlns=3D"http://www.w3.org/2000/svg" xm=
lns:xlink=3D"http://www.w3.org/1999/xlink" x=3D"0px" y=3D"0px" viewBox=3D"0=
 0 1080 1080" style=3D"enable-background:new 0 0 1080 1080;" xml:space=3D"p=
reserve">
<path d=3D"M1033.05,324.45c-0.19-137.9-107.59-250.92-233.6-291.7c-156.48-50=
.64-362.86-43.3-512.28,27.2 C106.07,145.41,49.18,332.61,47.06,519.31c-1.74,=
153.5,13.58,557.79,241.62,560.67c169.44,2.15,194.67-216.18,273.07-321.33 c5=
5.78-74.81,127.6-95.94,216.01-117.82C929.71,603.22,1033.27,483.3,1033.05,32=
4.45z"></path>
</svg>
                </span>
                Patreon
            </a>
        </div>

        <div class=3D"nav-outlinks icons">
            <a rel=3D"me" href=3D"https://bsky.app/profile/fasterthanli.me"=
 title=3D"Bluesky" target=3D"_blank">
                <span class=3D"inline-icon-container">
                    <svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"600"=
 height=3D"530" viewBox=3D"0 0 600 530"><path fill=3D"#ffffff" d=3D"M135.72=
 44.03C202.216 93.951 273.74 195.17 300 249.49c26.262-54.316 97.782-155.54 =
164.28-205.46C512.26 8.009 590-19.862 590 68.825c0 17.712-10.155 148.79-16.=
111 170.07-20.703 73.984-96.144 92.854-163.25 81.433 117.3 19.964 147.14 86=
.092 82.697 152.22-122.39 125.59-175.91-31.511-189.63-71.766-2.514-7.38-3.6=
9-10.832-3.708-7.896-.017-2.936-1.193.516-3.707 7.896-13.714 40.255-67.233 =
197.36-189.63 71.766-64.444-66.128-34.605-132.26 82.697-152.22-67.108 11.42=
1-142.55-7.45-163.25-81.433C20.15 217.613 9.997 86.535 9.997 68.825c0-88.68=
7 77.742-60.816 125.72-24.795z"></path></svg>
                </span>
                Bluesky
            </a>

            <a rel=3D"me" href=3D"https://hachyderm.io/@fasterthanlime" tit=
le=3D"Mastodon" target=3D"_blank">
                <span class=3D"inline-icon-container">
                    <svg width=3D"230.842" height=3D"247.477" viewBox=3D"0 =
0 216.414 232.01" xmlns=3D"http://www.w3.org/2000/svg"><path style=3D"strok=
e-width:1.06667" d=3D"M115.057 0C83.418.259 52.984 3.685 35.248 11.83c0 0-3=
5.176 15.735-35.176 69.42 0 12.293-.239 26.992.15 42.58C1.5 176.331 9.848 2=
28.074 58.39 240.922c22.381 5.924 41.598 7.165 57.074 6.314 28.065-1.556 43=
.82-10.015 43.82-10.015l-.926-20.364s-20.056 6.324-42.58 5.553c-22.316-.765=
-45.875-2.406-49.484-29.805-.333-2.406-.5-4.98-.5-7.683 0 0 21.907 5.355 49=
.67 6.627 16.976.778 32.895-.995 49.064-2.924 31.008-3.703 58.007-22.808 61=
.4-40.266 5.347-27.5 4.907-67.109 4.907-67.109 0-53.685-35.174-69.42-35.174=
-69.42C177.925 3.685 147.473.26 115.834 0h-.777zM79.25 41.947c13.179 0 23.1=
57 5.066 29.756 15.198l6.416 10.753 6.416-10.753c6.597-10.132 16.576-15.198=
 29.756-15.198 11.39 0 20.566 4.004 27.574 11.815 6.793 7.81 10.176 18.369 =
10.176 31.654v65.004H163.59V87.326c0-13.3-5.596-20.05-16.79-20.05-12.375 0-=
18.577 8.007-18.577 23.841v34.535H102.62V91.117c0-15.834-6.204-23.842-18.58=
-23.842-11.193 0-16.789 6.751-16.789 20.051v63.094H41.498V85.416c0-13.285 3=
.383-23.844 10.178-31.654 7.006-7.81 16.183-11.815 27.574-11.815z" transfor=
m=3D"scale(.9375)"></path></svg>
                </span>
                Mastodon
            </a>

            <a href=3D"https://youtube.com/@fasterthanlime" title=3D"YouTub=
e" target=3D"_blank">
                <span class=3D"inline-icon-container">
                    <svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"24" =
height=3D"24" viewBox=3D"0 0 24 24"><path d=3D"M19.615 3.184c-3.604-.246-11=
.631-.245-15.23 0-3.897.266-4.356 2.62-4.385 8.816.029 6.185.484 8.549 4.38=
5 8.816 3.6.245 11.626.246 15.23 0 3.897-.266 4.356-2.62 4.385-8.816-.029-6=
.185-.484-8.549-4.385-8.816zm-10.615 12.816v-8l8 3.993-8 4.007z"></path></s=
vg>
                </span>
                YouTube
            </a>
        </div>

        <div class=3D"nav-outlinks icons">
            <a href=3D"https://www.tiktok.com/@fasterthanlime" title=3D"Tik=
Tok" target=3D"_blank">
                <span class=3D"inline-icon-container">
                    <svg id=3D"fi_3046120" enable-background=3D"new 0 0 512=
 512" height=3D"512" viewBox=3D"0 0 512 512" width=3D"512" xmlns=3D"http://=
www.w3.org/2000/svg"><g><path d=3D"m480.32 128.39c-29.22 0-56.18-9.68-77.83=
-26.01-24.83-18.72-42.67-46.18-48.97-77.83-1.56-7.82-2.4-15.89-2.48-24.16h-=
83.47v228.08l-.1 124.93c0 33.4-21.75 61.72-51.9 71.68-8.75 2.89-18.2 4.26-2=
8.04 3.72-12.56-.69-24.33-4.48-34.56-10.6-21.77-13.02-36.53-36.64-36.93-63.=
66-.63-42.23 33.51-76.66 75.71-76.66 8.33 0 16.33 1.36 23.82 3.83v-62.34-22=
.41c-7.9-1.17-15.94-1.78-24.07-1.78-46.19 0-89.39 19.2-120.27 53.79-23.34 2=
6.14-37.34 59.49-39.5 94.46-2.83 45.94 13.98 89.61 46.58 121.83 4.79 4.73 9=
.82 9.12 15.08 13.17 27.95 21.51 62.12 33.17 98.11 33.17 8.13 0 16.17-.6 24=
.07-1.77 33.62-4.98 64.64-20.37 89.12-44.57 30.08-29.73 46.7-69.2 46.88-111=
.21l-.43-186.56c14.35 11.07 30.04 20.23 46.88 27.34 26.19 11.05 53.96 16.65=
 82.54 16.64v-60.61-22.49c.02.02-.22.02-.24.02z"></path></g></svg>
                </span>
                TikTok
            </a>

            <a href=3D"https://www.instagram.com/fasterthanlime" title=3D"I=
nstagram" target=3D"_blank">
                <span class=3D"inline-icon-container">
                    <svg height=3D"511pt" viewBox=3D"0 0 511 511.9" width=
=3D"511pt" xmlns=3D"http://www.w3.org/2000/svg" id=3D"fi_1384031"><path d=
=3D"m510.949219 150.5c-1.199219-27.199219-5.597657-45.898438-11.898438-62.1=
01562-6.5-17.199219-16.5-32.597657-29.601562-45.398438-12.800781-13-28.3007=
81-23.101562-45.300781-29.5-16.296876-6.300781-34.898438-10.699219-62.09765=
7-11.898438-27.402343-1.300781-36.101562-1.601562-105.601562-1.601562s-78.1=
99219.300781-105.5 1.5c-27.199219 1.199219-45.898438 5.601562-62.097657 11.=
898438-17.203124 6.5-32.601562 16.5-45.402343 29.601562-13 12.800781-23.097=
657 28.300781-29.5 45.300781-6.300781 16.300781-10.699219 34.898438-11.8984=
38 62.097657-1.300781 27.402343-1.601562 36.101562-1.601562 105.601562s.300=
781 78.199219 1.5 105.5c1.199219 27.199219 5.601562 45.898438 11.902343 62.=
101562 6.5 17.199219 16.597657 32.597657 29.597657 45.398438 12.800781 13 2=
8.300781 23.101562 45.300781 29.5 16.300781 6.300781 34.898438 10.699219 62=
.101562 11.898438 27.296876 1.203124 36 1.5 105.5 1.5s78.199219-.296876 105=
.5-1.5c27.199219-1.199219 45.898438-5.597657 62.097657-11.898438 34.402343-=
13.300781 61.601562-40.5 74.902343-74.898438 6.296876-16.300781 10.699219-3=
4.902343 11.898438-62.101562 1.199219-27.300781 1.5-36 1.5-105.5s-.101562-7=
8.199219-1.300781-105.5zm-46.097657 209c-1.101562 25-5.300781 38.5-8.800781=
 47.5-8.601562 22.300781-26.300781 40-48.601562 48.601562-9 3.5-22.597657 7=
.699219-47.5 8.796876-27 1.203124-35.097657 1.5-103.398438 1.5s-76.5-.29687=
6-103.402343-1.5c-25-1.097657-38.5-5.296876-47.5-8.796876-11.097657-4.10156=
2-21.199219-10.601562-29.398438-19.101562-8.5-8.300781-15-18.300781-19.1015=
62-29.398438-3.5-9-7.699219-22.601562-8.796876-47.5-1.203124-27-1.5-35.1015=
62-1.5-103.402343s.296876-76.5 1.5-103.398438c1.097657-25 5.296876-38.5 8.7=
96876-47.5 4.101562-11.101562 10.601562-21.199219 19.203124-29.402343 8.296=
876-8.5 18.296876-15 29.398438-19.097657 9-3.5 22.601562-7.699219 47.5-8.80=
0781 27-1.199219 35.101562-1.5 103.398438-1.5 68.402343 0 76.5.300781 103.4=
02343 1.5 25 1.101562 38.5 5.300781 47.5 8.800781 11.097657 4.097657 21.199=
219 10.597657 29.398438 19.097657 8.5 8.300781 15 18.300781 19.101562 29.40=
2343 3.5 9 7.699219 22.597657 8.800781 47.5 1.199219 27 1.5 35.097657 1.5 1=
03.398438s-.300781 76.300781-1.5 103.300781zm0 0"></path><path d=3D"m256.44=
9219 124.5c-72.597657 0-131.5 58.898438-131.5 131.5s58.902343 131.5 131.5 1=
31.5c72.601562 0 131.5-58.898438 131.5-131.5s-58.898438-131.5-131.5-131.5zm=
0 216.800781c-47.097657 0-85.300781-38.199219-85.300781-85.300781s38.203124=
-85.300781 85.300781-85.300781c47.101562 0 85.300781 38.199219 85.300781 85=
.300781s-38.199219 85.300781-85.300781 85.300781zm0 0"></path><path d=3D"m4=
23.851562 119.300781c0 16.953125-13.746093 30.699219-30.703124 30.699219-16=
.953126 0-30.699219-13.746094-30.699219-30.699219 0-16.957031 13.746093-30.=
699219 30.699219-30.699219 16.957031 0 30.703124 13.742188 30.703124 30.699=
219zm0 0"></path></svg>
                </span>
                Instagram
            </a>

            <a href=3D"https://fasterthanli.me/index.xml" title=3D"RSS" tar=
get=3D"_blank">
                <span class=3D"inline-icon-container">
                    <svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"24" =
height=3D"24" viewBox=3D"0 0 24 24"><path d=3D"M6.503 20.752c0 1.794-1.456 =
3.248-3.251 3.248-1.796 0-3.252-1.454-3.252-3.248 0-1.794 1.456-3.248 3.252=
-3.248 1.795.001 3.251 1.454 3.251 3.248zm-6.503-12.572v4.811c6.05.062 10.9=
6 4.966 11.022 11.009h4.817c-.062-8.71-7.118-15.758-15.839-15.82zm0-3.368c1=
0.58.046 19.152 8.594 19.183 19.188h4.817c-.03-13.231-10.755-23.954-24-24v4=
.812z"></path></svg>
                </span>
                RSS
            </a>
        </div>
    </div>

    <div class=3D"nav-content">
        <div class=3D"nav-outlinks">
            <a href=3D"https://fasterthanli.me/about">About</a>

            <a href=3D"https://fasterthanli.me/legal-notice">Legal Notice</=
a>

            <a href=3D"https://fasterthanli.me/privacy-policy">Privacy Poli=
cy</a>

            <a href=3D"https://fasterthanli.me/terms-and-conditions">Terms =
and Conditions</a>
        </div>
    </div>
</div> <!-- nav-bottom -->
</div> <!-- body-wrapper -->


<!----></body></html>
------MultipartBoundary--lX7hvS8JKTK2i2c4McTi97SzhrYPP8rs0wQBsPYWAd----
Content-Type: image/svg+xml
Content-Transfer-Encoding: quoted-printable
Content-Location: https://cdn.fasterthanli.me/content/img/clock~ea83208fa4bce57a.svg

<svg id=3D"fi_2088617" enable-background=3D"new 0 0 443.294 443.294" height=
=3D"512" viewBox=3D"0 0 443.294 443.294" width=3D"512" xmlns=3D"http://www.=
w3.org/2000/svg"><path d=3D"m221.647 0c-122.214 0-221.647 99.433-221.647 22=
1.647s99.433 221.647 221.647 221.647 221.647-99.433 221.647-221.647-99.433-=
221.647-221.647-221.647zm0 415.588c-106.941 0-193.941-87-193.941-193.941s87=
-193.941 193.941-193.941 193.941 87 193.941 193.941-87 193.941-193.941 193.=
941z"></path><path d=3D"m235.5 83.118h-27.706v144.265l87.176 87.176 19.589-=
19.589-79.059-79.059z"></path></svg>=0A
------MultipartBoundary--lX7hvS8JKTK2i2c4McTi97SzhrYPP8rs0wQBsPYWAd----
Content-Type: image/avif
Content-Transfer-Encoding: base64
Content-Location: https://cdn.fasterthanli.me/content/img/favicon~fc5931f361bf516c.avif

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
wA==

------MultipartBoundary--lX7hvS8JKTK2i2c4McTi97SzhrYPP8rs0wQBsPYWAd----
Content-Type: image/avif
Content-Transfer-Encoding: base64
Content-Location: https://cdn.fasterthanli.me/content/img/og-image~bdabd4c3f4d467d0.avif

AAAAGGZ0eXBhdmlmAAAAAG1pZjFtaWFmAAAA3m1ldGEAAAAAAAAAIWhkbHIAAAAAAAAAAHBpY3QA
AAAAAAAAAAAAAAAAAAAADnBpdG0AAAAAAAEAAAAeaWxvYwAAAABEAAABAAEAAAABAAAA/gAAUZMA
AAAjaWluZgAAAAAAAQAAABVpbmZlAgAAAAABAABhdjAxAAAAAAxpcmVmAAAAAAAAAFZpcHJwAAAA
OGlwY28AAAAUaXNwZQAAAAAAAASwAAACdgAAAAxhdjFDgT9AAAAAABBwaXhpAAAAAAMKCgoAAAAW
aXBtYQAAAAAAAAABAAEDAYIDAABRm21kYXQSAAoKP+plfOpeAhoNoDKBowFnQV+K0ElE/z/AD+wE
EAIVAAAAAABNZosEEEVYAHsFB+tuylqxRFxkPB9KcTCzqbs0EKWID4/Zx2AXYdfdxGRbO5y46CBo
mnxA+F0x6ux75E54bqotKaFeYRYbXWkUfjU60bwuKu++clHO35Im0zFVbvjsPN1pSjGH/mtj60Oq
E3Uo6xb7rX+e+HhZP0Trg0ZIwnjidAEzBXX7GGwxkwdLK/q8/EXGaBRxwynqRKMHLgfCwQhWvpgu
rCKyD+/5WsvI6pREDCFF+uhlVSKqn0SpkMGyb01yD6xMHFCkg+O9fvU8kdNWcTpsoSBnXnLSn35L
WAHmzMz2h7dVMVP+U0z2cJ19y0ENJ9/vp4Jvh1caxvSfopRdjXgBQA3Gk7/ZQIMz96m9ablqOk61
+mYEbaPIie5UmsNBSZpmr3rxUEhBcX5cWwFWwsw9WAARCpq0+DAFfNsZHRnacBctGCFOUBkJpzyy
IKiv2TeDABqKi5HAhIW0AC7PG0k7aCNFmLV1VlSon63bWu8PcTgFdjhrQVwKaGdC2lvkSxoKov7p
T2EUYohJdERgk711YxeNgHn9rgs1Zgnfh8O7zkmt8zZ0F5LrP3WQh4T7eYZNOXriNPD5lWz20Bfo
j5NU3HHmRIB783P3HgAAWxUpjCQ67gkMTnD/dMPE2i8pnJKBmJzDRQJbtBIp+NtB14yKkm2YL3fW
45Xme/LrXhmDQVNsfN6LTHtt8U4Eq5s2aj0o9MsqOFwoNWSg0LxhS/ob4mUcgxpsuMiguFn0oMeb
c9tL0pO6+30/kPi+CN8EmAa72ssPvVaywZWhS042b8RgLEdYcuWrb13QkvYK5Mp+CDSjfuDkE4L1
EX+BcgkL+ajMaFK+t1GlWMIyYC5lDBq9IQlip+6Mb+YrEn55HBsLX1T0V3nZrO3k/7Gc5rsDmcJC
WAg2nQXuWwFuJfElRw4rx+4845xOa6YNFQ3qEHj9YOCu/Kb4SRI2rlNv0S5x07ShRHenprTFKRzg
/uhEA7MWzBxSYeDqX1rNfGWF8/EHwSilJnUI2Rwt+ldPzTv5aJ2sCxFsLTe0C9En5lUS6IMIg3Bf
Urmhbb+srmDLE9qWndBVeZTmSvWAbbI2aOYlrVJGlO3WXwttXEXi1rVXST/744BzpjcBCAm60I7W
4FU6U6BJnxHwoOuyKXq2BCXYA20p/S0BZExMyhhIUl8yCvN302bf7h14XX06QE9J43SPaeYgtl7J
SJIQJ/PJfsJF6ayK502Tsxbm178G6ZLUiQeg8sUbkRFVhz+B0fpCSzU1Y/MNneJZWFheP00T2B4P
W+wKXLNW19KVILo3aL63nC32H8rfn3l2+LRAS5u+hvWwGcYEGA1B8j5YPOWSBWTchiwlq1O1SN1a
IotQPYSoq9at6awCxLywGnXmmPCFw2mPeGtNv1gW+3IdHl/+729W6m1eZBvSPENLNQ3teZyupOzD
gmTsUVzOo8x62pxNKXzLUhYSo8LgmiQAj/Gd8WNVgPGv1hISQmmKqqWSa/dmsfOICGghO0H4u22/
pu11R3ZrtnnA5Ab/FoPxJrEjxFoyLnTJ72xLcO6VlqpxUXbYlwD7ce4IDDm5bmNWuk39MihDQUjB
PNnfPG1a8CMp4txuTY/QC6Xa2cc4sBvy8AsBrHxjL4Gn33l0PHCE4QhoFzaFC/8MZW41r1acKW1S
/l55dVj4S9mMXPKHnS+wqLqg79fT2gC2V94npH6XX22VTtK8nrqAUIw1LEXVM06LH2FHMYvoK2Nn
RF+xsMo9ZTt6P0xfHQLHGmtv72EHcmOwe+t5CigRnzI8jAR3XiCk7guEwDAEzmBVf4qBAHOSN6iS
A+gRpfXGuXTygy/Akl1z2smxV7IDg+bHmYNirdhRuPmLH5pqc5RzlUOIHgpKKKr+JBxiDcUQ7AcH
627KWrFEXGQ8H0pxMLOpuzQQpYgPj9nHYBdh193EZFs7nLjoIGiafED4XTF1iRcvOBB98D9pDxpc
15OA+Zk68nzM6ly1M+/zUORQUDt+jKCbvvHgrQMq+Fzewx4e9M+JAZ8/XyXCJVG5m4viIIi0Izae
vWhmT31N6WR3bw7SxSOWz0e6R2ZXjTl6kbuqthSYwWFKgUICMkjjT5IRNxD5JcEQWiXvkaV1JHvZ
B4uOp/T6g/PKGjnjQ5KAoDZP8ldWyOAq0o0/1d2FHMkYpzeMHNtQoBsVfpPoizVValRccPwnH0zk
KdEflLh3NmQW93CCBHoNnCX+/q1/6vIbDqVnPF8TElvGBu6apyRWi2QO6h9oXixdWIII8cP02Ob4
MWY2chqKGEYF5nu27cfF4edZ2o/6InEhTxAkGJ7PXN2f9IKggiVCeVt3+OW3kwNH/F9AQd68XwNf
VVRv0zqS0+HJy+L2zrYiLEaQUaVxQKfy3pX3ONuH59YpcdkO0uLrL9Ss5wg0XCWy+x0uWzjJ+pVx
ww4Bb/O0nnWUGKgUvDs6fqdDAFMhOdX5vdIvzgp6MPvmLjCthECXkW/AdQKexs6WgMC0f6gPSYE2
rnq30tn7RjmZdt2u3honyNonq7cfTnfTna2vYNRWfX3fGDF2UtOeyQnUxvGCe5EbR3TwpHIDAM/K
e5YGSAyy0w20+x1VWYnwY0uuSAabNzTdFm6kJ7KC0Ymfp/yJ06FAAM7SgSamvr90EVdUteuNFZbE
okwDCx2nEpV5e+Muz1Rz4TaQlcSsaUxgrc95mZNt0mqK6b6HactgjMnyB5E3wqG7VD92nA1k9LH7
6Jrll4dSUuC/E5+0kDhQI0YyvsJoV81BTmnt1WTtNO6Xc7kXjOFD8TxSTyPLOv4fZBABAxMa5pje
N6FZajI1pxNDb4dUNqNNGvHg69ygbGkiVZK3cTiBaUQzDzHABIii4pMCodZSO900eyUZzJSj3uX/
X5mto4jsj8ibX/pWMgjVeDXZUrsMA7dKztissCVcUm/mRonc4YQ+FqbuKhP0CjFJfN3PHMsqtGPS
/WHDRLuS/pqId76Y3RYcakuY9K+gMbh/Eh03DVM/WiLlg0zcbzlRQtyAzQZHFQmx9rNNZ9jYQAyY
/YMQ8PaJLxJKEcYXfOqbYnXjPpKUPe276BDgj8XZSHQQGXMSP0s0UUWqY230Ljrr8hciwIoQPf3f
AYPDYC6tQaete8q6l2QF5gKIToTOLSvXjyRegJQO2Ow9hS/IV5sr8xO0W6yVX2FozlpUc8QEIElF
ZsEqwQhevujvWFW1hruvXDwpKfrKJ2Yj8HXkFwxnE13ba4BtjcJ58NuUu7DcqiYDl2rccSKq/MjP
mXYthVwnplWA8aBgD3lHwUPZHWgt7TiShZaNQtje/bu1COexia3FR2ZMRtB8vGWoxXni9pc/0oTN
ee9Dlad8r3GFl9+Ix1je11Mmcibo7dr0PCQk/blK74wTVoxUWTIAWFeywvkok3wkwoX7W2t8wJEt
k4it5i6kUXbCAdo4lII19f1EhVQun2hLFYaDzr5KUGcQ9+X/DpK6LW8mT9niUfnANFtF+Pxbqf9H
GmU2UP6JH86emwuKKKJZAAWfB/OU2cSsKPvOf0blbzmhODKMkLiWrM9/ilEQte++kjOzDzchYM3o
MrzRmj8cu8jym+hPz6cx1pvZ9fada3olyN66afQ10qEoL1T7vazz1hvbnoFcwvdbqK3K9IzdiCNT
QriOztU6XqwFgeMqTMB5asHvQ77OSYbeuOmm/L+zwSBxAcpMl8a+JjVFgivWHgBML4q4+armX1eN
x+ezMvC8ei4UWRQj+RTPL/4paP2qQg0QJxIKzM7wBq4cPm7c/v3Xq4kjF0oMjBulHnazrB7ixwc8
qSsxmHgo6Lzv/UzZ+xScqBkAnXBi41QMIlzWkP3zItleCJilV14sF0ub5WS71d8jQRJweodYYr37
hJwumbxNexxv/RLC2VNTwDD9lqiJOpdqroz+gbwLdULwlrjKK1Ispn7t9yQ53K8rZNQsvmkqKC4F
ulWdCJuBK9DTwEbZYZbmDdmxFiRhFuy0Lzd0AhHEAwlIfSPNRbJjmMcY3AOf028fsXYrmd+zZzhH
fvL+PAhS4O4Gcd/tqNe9y4qgrHD2VvWGtPULsJbiYE6ghorQ9HfeigBLfagvtadotzpNFKq5UQFj
hsYSGa+TCDiMZ/Eh6Rx9rJYfXtZUbLLSuQWXVCPg0MF3Oh29fYoYoHpn+gDuE3a/idsdRtSAnubr
7Cd4DiPgT+x2d+vpD7rGvXnFG3YvzpnABH49UUbqTxl65sRgjLBsFrQHWZspPT9RaJFiSyF71x+L
IxJv+OyyjMTHRlGpInpoLrygH0tVs2nyoH/jMOlW/TF+CU9fmbb/5AcqrmI6Tr2gzF1Deo167sml
VygUFrA9G/KTY6O/r4sQ5kbHgCBEgIS+C8yKji8IZOdKoTB8Db7IB1Hy9EUKTZmuLuRk4NNNXvnq
POoalfxYoB5foYDqavTdvG2WjPVYlK2iX8EWkPAxUlYWV9LJUkTWC2l1YePYDDATSRAlcQ2kJVt9
Cgq0to1rGxKX1y+2sg415J/u5aTPYQfk0rELVfIp1yowgHaF+WrEWe9tpGkJvIugpkDVnOSTsM5F
gjOcv/8gaGcjamKGoGKjFBNNsn/GcTqiJDKF92f/EZGAmAcH627KWrFEXGQ8H0pxMLOpuzQQpYgP
j9nHYBdh193EZFs7nLjoIGiafED4XTF1oPzmug2kWWDkx78O/vDHyumcEYlXAS+j6fokcjJrXySL
m9YUz6HT/JRhgojaqQAEtLDesGiEVscPU2vrKY5psGAbRDGKqAQa8ZBO6VuTQvBUzxM44Jg9wVR7
H+Usva5HCX93fpPOP3fgTzub4opWJcAdWcsxru/VkCV8f+6PWOHPdkU66024k84JFY3qLfq+omyK
1/9rvRLlnnO/1wCwi5SYP/duE7WBBS10HObgi/ymn+QDQO+01Z3bCJak4xYxopPC7cEKTpk76UOT
uNMw0r3wBmzHgQvZS7TyspIn1gFPCNgKPJjy+iOYiEakbfOnfUUrXG1x24wIch1FbGmUDlhgKuQD
77oFJ4ZiMQUGvrfBX2pT6k+iRZjK07QIw6AjqoacQNsqu+AQYOzo+uahjxVj+SmyvWJY3+sD+qT9
cxTW/kCtXnga16gkk6ImFLiKZwiKNrCej9Vk/6oiskPpxh1NlcOIGKIIBpmLXtVUm7BcUqaHNm/N
4PhBVGoMtJSBetuYmdqhhNvn9fdOZb2pQC3ZGqXmzMv3u3AkHLYTUNwJQ4FhBQRf646k304viBPh
e9/0kWWHFVt/uGO99O990UI4MejYSJQOzAulJIo9sDobs/ErLdX/sfn3cpYG1AecxEVQ2i2nB5xd
yGLKWJgJUzBxa1ork8CFeINIVz4Kd2zXJSul3CZ+NU5kdwekaU6ozE0V7eaF/6BvrTG3FYW9xyGj
SXqIqk2eVD9QLcMN1pl18uPl5m+VqWGp8b5aAKCeyBdmq7ydUctMu7kD8+0eCSa02ya+h7/Dnqyk
q25oFi3q+usFwkakftk9kCJV2rgLMlXhuL9qeRzuC7xgAAzK2mVTJuEiTzYUjEutZMo0RYBa6Vxb
u8OIwpNG+Q8Sv6CwlA0l2+0rgLwf10F9lPQTF4jBgILLFhcEQMyeGVIKbAIabdh0Y7jbj2axEzZ8
7cx7k6c3XXondcAnfbmiAvQHhWqMuFsu2oJrQvIR1zu7qi5kGWb8GiJZDUz5pSuDaIbLYVjqtqwl
dUj7JS5hq/J5e5Xl9reUshOMHCp3jE43mtp+VBAekKkIF6/PJe09gw1QEtlF0HGcrFp5/PFtH7a1
VibpO4TopEQXTwu3iYreCBJX9CHMLNOvdLNsQL2OOt58CypsrQP7hm1jkTol7jlIfVV1vfmCeUCN
Mvya5C7UpTVtWxszyA7F4+eBtSwZWh0OKhwZdpCFIhuTNjuwMX/h4PQelXbNYc83a+MLfNBonlqH
yfwH+mNyGVmMm6o4KuFpcMKS4H8npO9bctT2mAgoOTZyHSD13VSAop6zTwKyXueiE4UPkc3xlllj
BR0WJ1sCl9MYj+sLGSXHcDh8i+MtkQ53OTNMtme8jsIrFFw1SL9uHFXu4gs2r1imQ3aFtBmEElL/
55eWELtCB7SV5G6KC69RrKHYlMUofPU/SGmzDal5V+zPxGL0ouXS5ODEyoGrkPXNLyljMpDEkMGg
3sLtTBesvh5L7T74DYqzUDo5s/xMvCToAqV666m6pnlST3TQ3flvDYmXGVxtKaZeQFULodh/SQPg
ljq32HbA0W8ZpTWKCwPthBnZJ/QECYUyIC18H0jK9GEEGpuBTQbcW06dmrz7AgM1qbp3mAknWEsz
EL7x1u+OL/grcY3Uty+liIpckOAHm7QkIQjSaqJz4ja4At0DiSz5l92HU5hVYy/ZIwQtKV9EC5KR
6IEiwnthM8ldQdQ/TfBhot2RW9TLds6QeXB6AAMILViRHEf+LCoqDAezNiWfeUEGO6JUy78RhLeY
C6yM9BqeC77SBmGYCqcJ2ULCXWirBO1zheFuPB7KT5OyIYNk2Dmxd+PHORIBQEMsg4VT2wEEwWdT
zIeLWEEBuJ++lNCQ3ARlINO/i/oYiNCgoos7u4XPqhnA/T9KbDdM+64lBmOGYPcA3v8OwhO1mTZ0
VAJEHAFfwFTV/J3z2oWxnaHWovzolDFNf3y63uc/01/hyldi/zlaFPT5pCWzePN8s9e0mGvRubis
3LYeaHI4plF01f6t7fdM0FP+lZuuFR0UAkX3ISkMFI9t7ZeK6m2mbua/4gLvJ5j8CCY9+OU/bnRC
r3Oc30A9vx3+4OgiU5B2X6QwktDujn9jduGUYVBc/m4B1bNnDZPhLedzeJIib0ppSC5wsxTmZbQr
BkUbgoXDKs9/G5PF9D2y8W32Fa56VTDWlN42FAXKWEBvdZ+ZB3g7V+Q4G0tR9lNaduT9clQsgNMd
vMlVL+034p+x5ACaoYyfjtEbxGUAAFDyT5ub2SReRF1f1cK28mYq+JqsV5HfhtLjCrPAuT10vr4j
Boo2lIwKPhgglR/nVS1GlWoN26nPQ1xZE1yRKLk+r8cHO/apcupkTOYfRt7RxQ1W3aTeFiy930hx
Fb6pXjwQU1b+021gU1vKda6hMwl29bnQ5YaakPdiollBpCZS+oCtwnXi87eh7+ri+AI2p/XW7YA+
rrsOaUBjlC2FkJPki7iWq7rESX8qQktCZrnALbnRaoXdfm7JAwPz2e6AxAIH627KWrFEXGQ8H0px
MLOpuzQQpYgPj9nHYBdh193EERZY5tsup+Jc0G61BakGn+rbqnexuR94K9z1J+Z/AxYfG4NXh/X/
n7UMSy2aCbUW4zw7GZSCfeg5X6oACoYrLgiu6U2R3ZySjAhNcySaepvo6jQgh1bTulMsmNHKPZYI
GIURG18y7OLQalLULacwhE1T7UcQCfVWB2Si0u0SXy3xehA0DRKHeqhAaQNQeS9lzjSkPE/Jub4q
2/oPh+7RkwwTr0w5HpRDQMLtUaTVpmzOkQfdD0rqy1k3UzwawALAXah3DO5YKDwtMsEORX0SU8nj
+gGtffMdqDwCwH2HsLATAO2iaWqOC7aVPZ6+4WBor0xGchqjltWUeBFF1DtzBtOmk9cajPJ9p4xR
glSd04kJAYapvpgC+NYrGdQqPMp404o3mEPGPnMz4skzN9QU6/+aSEy6NoLQPOeJTcrXBvEtT5rK
iF1rzaS6eyLK21Xp3ffnCmIyO5XFd/dOJXwEz3srF9vyXDw6RAsnCYE411pq/RcYa0/TCJgcB/vL
AjGC4AsgSWr4AbhEC4PxmtkSSwYIZphPQGdjQoglP5ptZZGCb/E58lViv0Sf4A35HKwFF8JESImW
T4EUjbKDbtQ6cIiJK9d2G95TWLpDYdP9HO73JaanrN2o+dOPVxIuCEimGFr5TdlbQ2bzMg70eLEq
R2qCTXBzX8V4C9KDz4VwzpKhzSSk7WDZ+rPkFdtb0mUyD9FfGimIbfXEBNz5ZdFnzFy8DsUwR+Jw
kdj3YCGwKOk7vF52osJ0yltrn5PZRQJc9rQe2Ri+HoZjrPLhXWiJ7x4iu8sAEptJ7DxvoivT6P/h
G8PLkwGb8NQ2X+rrWe6CJfaS53L7trSKaXAUSXi+0N3zBrhbaX3bYyKtNsUcZX9u4VuQa7S8lZpe
x7K/FHR50qmGBrGjhQoH627KWrFEXGQ8H0pxMLOpuzQQpYgPj9nHYBdh193EZFs7oouZ98YSHZ3i
TL0aM/yu/E/Xmo8YGEX0Ul5a9W/LYl4/3o7YFsYFBLdqT4+H2deBPYFj64kgehHIGVVnQ8E46t9r
oYcBrzQIvXflcIL38KUYVmXlB11XXEVFVeGYJu2AC6wbDXoktBNo9mkwXCXLwxwFEO4j79cpUNH5
daoi+C3NE0UHawT/6PXJkiy4A0Uxw5KLBHYR772sVuA3NVr9mOhjEbP6wvIUOEiqAp8F3TBURbsy
Xzj1PRGrTRWEthGK5l9l+374uUrTFFRNTn6n0E7/qy2knmGhH13gbMtzPXJd6j0Ea5b6Z55kMDpV
yu9aigRlngGtjjzN/LDr9q+xj4df3ecHmyH9QRig/EWK1p8gHElvSHq3DvkqSrrit8QXrDqTsoGj
J2jmt8lp3Vgeitr5WUyjMgLX7UhJTIOH0Op5OkpIt9wo+lGgTTShYRgzgxSeP6oTVJL86Ox3/w72
dlUelv5WbvmcqNfi8eB4Da5oZJ3Q41MziTwWoh5/rxVRZrztPluczjEIpf38gwlLhzkp8DCQt6F3
6MgPt3PC3N28VxJ7MSp6kNhO22DIMUS2kNKQb5N8LgCdj94A2tcmgWwBCJAuiVz8sryE+q11Pw35
wbPBd/oztKE8o5qJdJtn39KSvAD1ubFze6NDPZazqGncaMRWNF/XJgxJ1dUqcptKCxZmc4+BZlv3
VS9WHgFLT36XeFGZ8mvRuJSvNaHLXk/XEntMv7bh+IJsYWW7XMxVwmv2JzEcqN2naKQQHsxMPAKC
UvUmbzEkwM8s29RHyEnZ24sNkAYPzA+TrsYTtLnmEUMHo4Yp5HXnPVp10Nl060XZqdOoDhPwlcoN
sgPRMQs+EfICp7xItJejxGKnAXbgekJ/R4/v8f1gm/uIXxf58gXw41xkJK7LLJlvhRyriVdLLPxC
f0Up7Nvzh8QhH1I6G9F4lgUANnH0qwKmhTWrG17kB8sDVpzno8QhTvr72UhlZQzjRjTD0pC9NISa
2TCAlMSaZc92rhyMtASeN/S//hjnI/M9dvT/1rf0av8Wfs9uei/V7dnDd7PWi0mFEIzPaB8PJeT1
quwJcMgn4RYad8BPlSuJqXEyNRCz/DKevvqATwyRpU8PShhNQgSQB84lv4Kn0VpwFrqMMJv+bjad
ZFdHFwA7jExBVkzaRVsKdsoFXVK5bZUFtD1z2B5RvsGyoi3hqZeS0HLprNg/Z2AUzIJxWKBrLBZS
IBdcQ57axahcksMVmMXwTui9+Gt3DllB+Ye1nfmo8E9Vf8z+9Ug13SN6BZ7+9GqO5UN1HsbsI9kE
RMtg9Pl/mfNgyNx0yI7HyubzpSjnJlhOpO7cazEelCLP8W3Nicz7QcvI25EwyCEq2Iax1YMuHUSx
Uy9GKiAVUBi9rbHR/+SuYTxPPND5fY/YElVaq4q59o2/ttAWKnj7Yxq7c7D+LDk2rMWvXp0rcaRG
vmhL4vrEAF1JXpH+rHeU6ULSgcbFYuJt2ki5jRTHxUZQU/rD556qqd73kvJcSyhAS1fgFYfmkq+C
6u6JAxxMAg79hgFntlV5vvQ2NkoeWbRJC2S31knhX/05Zq3tRmG+1hl+GlZO561YEfP/XHvh7M2h
jWQ7YxHKrAZWvgn245xium29POA9EuJvqdc5GRKteEEZV2su9slfpD4C6kTYMVUsM5tcYOccW45N
j7u1U+WqxObUN9XmMnYBea1AgJzckNZ3YtoYblL8xKIwGccEFUm1UiGnuHVSdGo23gHA6aoMAnrU
TeH/i+ubPqbhK8tzow2LBAY4UTszorggQk3cdNZ6f43UZ8e2ROTqefLIJ3fP3q03vwD+2/Tmgljk
4qeqyiCl/CQY86KLuFWTJ0SCtm6yc9ZAKYv7nBq9n26UQxI7DuT4rHb4/+F7HJQNOGQgT0dLd2z8
PXOG9F5MW5hB/j01C+mE0BX+ZnHFpe8K3gGkm8MID7eG4lwcArcVmHiai9BC02vSXKZr0ELkuMKl
f7QMBDbm4Kg3FZ+K2UBDQUw3udzRNnAtEYwaE3BRV34psmKsAFXAphTQbKwApMhnRs3L9XEaULS+
x2FmSgXfZTYLwyrzj8mD5gJ+VqlXUOw73bO14lg12TqFxM7gY0EQhZDE1f7ogq0VuREEGWLgQcTh
tQUacK6ySbnw7PXIqg0QXnWa7rTtooRi75GRMFcVZTDBlcfqV6LCE4b6xo9z3zciGxx/4b6/IULe
aH8rNGb8U5PIxtWaWz5quTPPKBWuWUxNQFhvJk+sYb40GUpDWThbjNCrMsMCNZcsKViSHnXj6dIj
M08cBjxtIZLuZcHdoZUkeTDKmpWaQ6jlT8GH9GmH/sslxQvTIQ8rDzFj7w7uYeRE6TcXodnF9aBX
O805Tt3qFLLhtKUuQ7yUqltGKYCy1PYRWVO/Ls69Lq5L8IET3g6En9IEaoM0bYxr236vXFuiqc2z
dnDBtqlpdX+X3yNRrkx1kd3iYYTIUBELAGB/38Snlaieo7KT13eqRSodnBXMdmsnuxaVjPO9rQdl
LpuM3i5FzZaetNYhNgvEWd+AKbdYJtObiPIR+VqjnEceVk3r5YeQtTqcETN0r2qC7ZYaEPBypHO3
Gca/2387/QGcglmvxOorvPR7VRswoplQ54EEJXTcdAwQ6qYBoFRgJFd02Kk/6QoTUg6gFLdmtyj+
KJGcABD7braPo6cj0KZNHojhT9sPLj8qHSBE7Axm9pKKKBSCWQmJhE6cpZEmXgY6pjB2/BMWTehd
FprQgLo7rcnJtBuzuHs3nddIJLI5Kt4Q8ib9ZiqQ31d6gvfxzTn5Ao6udQ0e1EspdQUMSlfRrTn9
l7ipWbhPnDtzlJk6HxV5ME1DlN8BoQMC4v+9v/qAEZgQWCECmgQBuyUJtcKiBHzfNTFvMH5LCPup
qAkUwNTwawN4/+VkEWtvJ0lT9H71C7IGJTqmFvCm7Vs+O9biHv4gUxW3rxy8NVhhOyXKwY25j/fh
FpPap8Dxh70REkprpUcFXGO+G2o31eW1nGx4QKcvdo33KnNaGaIrVuPCmkGGrY3/LJmxSUdnNfth
sV/fvGw7yPLfDttnUL1x3r5y/LhVYS7frN9lN/Rz1R6RwoDWVDOCmFIcmGxADrDV5pBdCUOWfd/s
+fnj/KGZFjWRdk2TaKj8olo/jNsKUD+JWC8JThB74Lgt09bE77IRqWWO+cFgsaTr6bhrjLg9rkj9
h67kErpMPZc5bPGfoUdIDyRs2Ujenvvl/sY/+HSIYUcdoNewFz7owbLBV0B46N1j5qH47JNiEnZH
V3U7pJNHENDF+c7qMUB+OhpK2g5E+vJgg5qzxNrIyOaDKUEPoKZqZYgKFWWKbSRNfNcjoBk0Uu0H
DmsQY99uL1xnuqsZrNYAtp3arhIg9w5Tf0NPyN20tQft+KG24TgnJ5fWPyI8L3K1azCKZTxX92hk
aVtbt3CyUK+zVCIrDVk0Tj9m2vytx3g+qErRRLirnvPrx6rJKcQEyvqBnAG/F494JaTexxTLWSE6
IOX9geKN7gngJxrekFLX8QnpPdrNCgpUYzjk4YC/E+IufXCbgOvXHcRtet45JHFUjODlWRWYqpJx
ThCyvOgcuDoOnShJxufYNOHRiKQV7FrdmmfFPVNoussXVHc9h6CwdfcLmnGLiOXAUXrCY+u49xDZ
Gd4klaxWQjqv3jrzHI5kMwBSme+wR2KgwoY+v9Dv7/K4Liq5h8czqgEobgifjH6Rm6TMuCFwSjeN
gyhUj2Sdx12aE4AI3XjBsUcjd/mHbc2ULkAcbaLyawCLwxhzTXOO7S52S7Q38NZvZ7wvT6T8W3B1
ntXndRKy/QAgYEKQ1hkIgtFDWLvtRtIsecqtQxV5qUlflflWGRWJMQEU6b1YgkvsI/gxdU+IRBuE
QbkmVc962nQrVioOaIDzTw9PRNkAGe9SfqVJ0lQ1l//CIMNLt51e2OnyAVYAAIEB9D+nGjuz1sBA
I0c4m2wNMAl63pb1OkMltHrmcCPTpXHJdnqBovxoTdpVFgQTU4ZmERrW9arxaII8zCIszIma3527
n+AIJFyxi/VnoehqTMwt+BrXESk3XUSB34MEW2lpwTAWOhfnVZxUn6/epv35psngGolDlG3pvGvg
Be0So6VWNGUpG8vNm4eBqNOnFrgDk98DL6Qz0U/GhCQrvMZS7E88AgnX0gbxO5wwOGj1537cCdk7
b+zQbLiqAVLaLBWlFo0MokV9ZsTfUvUGLtE7vaNqlyGT/+BAKOokwECRL7eYO5FC125M3qVn5B4l
s4k7A+dKcre5TCVG55kyGbJNeA9bSSH4G4hXiGPHZsYNs4ir9YfpUzp0VeeDD4+qOqG270+KKUPT
7PBnWMbV668PNdgrA3RhUPBEmyaWkDRM6tbu73ay+F8gCtlgFoPN3nqsuEmlsYzC6c67er6kNpDz
D3aHP4jiKdwcbXbQj62VkkaZkD22RP79Q/KGkynbdO1yOpxCSu5i5SKXfYZcd84aV3JmkYO314Rx
48VurdqhUzpQ2fA7Tnl+5AQdqKB9tfR6z7Mco6SfSiWokAOYJOXD7KfYhNPVahBemJrDepLo1OWW
IL3cE3I5JB+ycC9Ym5XmKYNetY8nsnHHLw+MQBPa/LE5KdtKvrSrOzrZH4ZRB3laFlgVx+4BlAjq
F1GRw3LJDZuKG7vm8yulhjM8bNAj9C4qQRaCSUFe39nqRXeQSJtEtucKIwu9SkMsbXsfjQxTALVZ
yk0sVMzKljV8XbSPPunp7qnWFz/KhwRME5C4nKTj4cO4mp4bzDPYho2D3jw2LNOf2qaLbtAZ6jOK
w4pC8qaIor+TurL4JX8P1pRaYeQN2chn7JRQrGEqkozkcgJ58C1P50bmIMMqHQfwOfQQI+4rrH4O
chEG9Gzsnf678OU+Ly0cIOTjvWlCm6wjHwJF0QPdsN0Kd6mrDCOs+7eFPFM94nTt9k68MuIYbvaO
pYhHp+MobbTnMEd5KPXQ8y7/amTSiOi3zWRnF4rmM45i6Q+RH5UC1Q6Jv8W8t99yDSF87b84Pim3
Sjo4rl6XULxYALVvC5kil3qWoat7Xsx1mqEWAijBwYM6H/97MJ4VaSGMfMtxcqLVrMgxNI62paiM
/Y1Y5RkwkPvQkRYH3LTGUh2D+b8Ab2Y2Q93jkDAE3G8sVGQKNi7NB9O9oYmXFylBv5E9Eanm3tEJ
Kfi31JAGP5h2Rl2JBYJ+kjHXxRpRXDc8QwpTm50c84b6zpmvnZW44Zt2EOiNSvIYgZcU4NLfmUQx
p1LcVfqo0Iq49mzfYakAwwoJ2h/JGYY6mw1dM7vwPXbjrbhNdRrMoQcp5vKT7YckEOiWZS6D5EwM
Q+v4wu3j1cgyrth2tPhxsAtac2iDjRZI1BNKQ95le/Vz8iabYPT5+W8EB1EkdI22izS3R2yG0/rP
Kz7EemLoKi/unSMCc4S4x+Q6sTGTZ5fP3N9OK4qCRwrkKKZB5I7P5Wg64aTgOAgrSVlYiOCuu0ko
dqJJynEuwPvM5zoVel4E7CVJ+Zcp82jNGbF66Op5JqIh2mebWJe5Xdsy/9aC3px+khhKX4C3aCOS
SGjhuQInvwVW3JRtL/nsSXvjYf+b94+cffsUPFSL6y6Hb2ncGW1qOrbESUj1OxTQeHRDUKFW4eTw
GZ2Qu1eSr6zswOsunjIYRtnunu78Ypx4SnKAkjEGZfYlN+SYVUVawpN39ZGYyyrI3Dy3NfUDQ4jA
hzs+OwzQxgat3NW5J5rzrElccPfrHbNy8jMSiwWLaVk495JwDfyrTZoaV11OdPgtRmBBXVxF0FSj
69oJ/lThaafmr2Ect92G703jOnW8rev8xxPyMN+NSadASvkwO4DR+jil98s89DW38/bG3A97l90a
3Tqyn9IZcDMOU9mUxOFc3CE9UQN+h1yfvXVerJiEZxQ83aNOS+wHrfM/S8DElBVlrCXdqgQoOgOX
d+1Q/VEtzirUp48ui8W7DlmLEIOnakNDxZrj9fdOIWjrKggAC6WSJww6s+xXgTGBxkG8/s24ENtw
hXK564YMi3gPVyBKd8tXC2SCwTNR9+7VKLGO+ltB1dxYk4QX5i5C2crykdHbB+nmcx9Qt0ehmhnr
RrM1N1fYhyTOPE9JSxXdjMkHpBxxmJJb3rXIqBsI9TkMSu8+LWhCd7SgpAFkvQBgjRebgjJkv5JG
YJzNiYrRxxhYnS0mEyo501Y6l6+mL1L3hPInxxyzv9WNkxS17xdf8K28kSu5zAF5U71dXjrpz/tF
S2pRVod52/Zqum6gXwJaMhh712yCeuj7GXqBR5d+CQnI0M2bD+Rzg7UgqobcpLERTszUMtuUb8yX
+nd8gmQpFPIhTvXllyW9Fte8gtNf3RhfzV41V6tV7RwM3gB5D3HLSYq7dRnxQtn3wWi+7yZ73zyU
yPHYaWTykKpsho+ZrYSZAYfVurXpeaZiepqU93H1+NiqJZ5fNgdR68qRM0J6BmGay3N6SDN/4M16
o2d+GHUTGRN68cwvB1/dLW3+tnPydCLC7/UDdWlWhcjldJn1twqSPeXfZPJVKl7ucPPBIC0Kgt0G
bbeomMAyt2JZmfCeO1R8GRT9nN8bnGx88NFdsNJ60P7/TLXDZu+ZIOvrkPvdUtnvmx2uJmsBg6ww
aQUx1au4s/NtCsp8LoBb+hQhN6GlgUclZZfibURvxqo7tx4RhJuKXfkqZWFZJgV4SC9hVUMWahN+
1k/tTK8z8S90gtd/SWNzESekqVqTzQSL37zKFoJ7qy+N0t7YsAePEszcg/aXdPhKnROaPGiylLQS
dLVPE7hse1UjW9W4gecQIk9bZbG3+YqCIqesLdbmYNOZI1BjIa/QB3Svbvyr2GEIIUzPYCaHNFtC
1iFGmmTsB5ewZ/RGBq/cktxyRckrLVhXojuvtMANWRdpM6y4GjK0popG6lPJ08dag4bpA2WyQSSG
dH9rq+Lr7DoAALM5iUI9qgXTF+QF2Sp3vqQty6yIrftmb/6Q/cHdbSayzfFYDWQqPykd030FICi6
/pikUzpxvgKLem0Az3A0prvgrRpCpzvIQ9uKTtab5eVsXFkUvt0Tfp3BQzUR9tlbGY79ddf9NUyf
3aSBIVl2Fd8Nvut8Uq4pztW2j36d1+XshezCaK00fS8DeMoKL4tllvDXJqZv7aUY31SoISE3RRVn
sM5ZuRDk5l8Plkgh/QxoreC6ZqwrpAyXO4ZBcjDTrCjb2B2LAkVtzPE8IM8wcON2WOJFIgzTFTq6
byc+B9DZqMwT/FezRpVAAcSnfxbLj1nyS6w+TOVIWx84Mt0tOFMhlxDOKdbLWtLHOf9K6CHd6uYc
c2zOFrEy2JLhDOm4t7VOwYkeVXCjhaYuAQCQPzybLt3X9cPISun6t/wnxsNm1ozBmr0uMOb3BZAY
CvypSHG9rxvPDf3SBxkXlJyovhkxkCPAlSt8DjEzUiuqYBMzqH5ld2eNTa5s9wtG5vn3OxFzvdHE
oAgu846aqEolfNj95YYIGQEmhNecs3bPxOn2Ck1igaBx72wX6yQb5VFGqs+Z+BRJBac6qY70nm6G
N9tb3jie/8vJJUcceYWPzSTPIo4EnsAXoNyhUT7kPeYRxflqbg4cXwyGfhibxjXothcpZ+wqC4mI
l6rEpbCWB2ZtjEAfhgIFCTz3EW9dioufFusXrR0HrXj31QN+aAzoQbALsJgpX/c+Ib3cfA61m4mA
KSskxqUboovbYXgtvy2mCynFBkeb4FSBjTa8bg89Y4GH4tfnRpgJJUDNJmAo6UpT+Bf8vhaYRryf
IZRxQW8E2HcpV/Oe6fDrDfbY806UZdooVBPngpOag39GHi9iRgi3l+9wRKnF2SSTnz3TIJw5ssf5
5v05NVllPqr66iAfQCRQiSYAE2lcjEG0OZBXF+kW37aBo6DX3OyQqWNsS6mPp3CcKIMUgPKxAFtK
kZwlX8Qfeo3MZnLu5mSnGJGW5Gzf5Di5igOiwGjHwAgPRyGu39Iw/oENoRViiA3mA57GI5HjlPUI
KiFaLb2uCN1ocrk6+6afSwDNCcTNFM281G7zmFlbdu5cOtazltMBJL7F5r53psQOi2vkwWgyaBPl
k7GP7eVfzvYea8i551glzKJXHyfkgythn3SZDmPOYs1hJ0vYcFUskjaGyfqxMAPQbMl/lUpFAMzR
Y2LfYPiOz5nKI3rGGza54eMfiGCWHLP3HOVJ5PxBhJ1pm9u2MU0P1NxhVkHHwEvr1nVtBL8BAslU
LmmMEPFb58nNQb4sAnGEgzAC4VpEpaieBSzQlWneMi+536GORqTLt0pD+FsFKmoCjvSmfY5roFni
oEd3vHD1+GGG8mVFrs3Ackcwq9+RUOgSojiEmkuzNMdqU70hfjzXPWQU+Qv8TXvyGBL3SJeUSrpE
DOuLnSVa7oA9WMfZXqBi4hgu3pLAKC9T1+I1VTKIAcrC0P30eK7SHswiHk3T3GyTz3EttWGOnY+d
3u0sSXQb/EfYdNmnK8DX4YI4l1ibjkIjAwZ1bTOWhROKcVx1tIBaUcT7GOgau2WzzDYDNzjUp8Wn
TbnwIEtI2S9mjxkUeHKE3MgWn0+2PyknYZe0h4G8IwAU/86fulXzb6R4LRiMPgJNXlABI56uDsX3
E3tvVGrrew5Opk7pPssIJIxMxE60ACsEa5G5tJkeANdBbbW9VvvDu6ZKKYsO0zIF3sAhQ6rISbkQ
UIPYfhtQdBR5pE2su3LoY/6HnUvlMltA/9eA1lYiKB2DJe7HY+DLg+pO8u6UDw23N5pPPB4NDRHP
rkOgN007G35LngWB0EdsTqDB15vAi/APcWwHMI636WFUchoPStcghXdLkhLz8PdPtKlBevxUlHiF
cFb/4yJKifq11seLWOI440WQiVM//NOK/F2FkCgL+Tyh9rhnpJ1zIUpji2eF8x4qWwCPpZEJiU1E
2KZFmoPpyA/retHcEkYE5+lO3RJ1MNh/KPJuvD/XOLWV3+XdkgPtqDnhJXZAoqg8PzgOIRNmYTtk
C75Q3tAGAxsn6N4X9Pb2HIUmarxbfYTQvcNJyxNX+RICs+vgHlbHuXUjkVnq3IrgN+oTF8GMxm/G
fc7oAc9A3NnIWncxI2fFdNCy9Myp8EIFArAGtBt2hn//+qcD44V6zqMrJAshRRTFC43YUqniTW1B
akddXQJXzvRLHnyZshxWhwFbeB6AEEpiake7oZ3DKv2ZOI1rMINcaEyiNBznR7Wf6QQwoU7U+YId
mweoQ0tqZc+Yvji0AS8jf8h2f3OKuoxcAdQStzOH+dHZt4H37KGLTxGrpW/+lwTw6aQmRi2ceOD7
nbaYL2iKmNZWBt3zFqiTyHNhEID+m0/x0qgrWya3hca2FJHIkuYKCouDTwxI6Z10M9XlpOBUWosz
CTuLpVKagauTu53Cl7KgfbGmaIQPJmOfmcZUwPGh0GeGqr57sxVL24jo+08d6WGlZMtiUq4ip9Gi
QCPUb5RX55Z8eDfqFcN43zIFAqo2Q3Ih8mScvf8WAexCJv43lMrlH/cxEzOLHJKAuw88+JnWGnNS
dkqPBy1KzknT/XXTpgxDzq5PNYjxgjuGBWh9Wsydap2QT0DmOCGW6HKmPW83chCHkvQ117c5ke0Y
0AMBYM5eUe6Gyd/3YsNDLnlCJEYUJHBYz9KjgzCPB1Bgz9x5T7ffu3Y/ZPkJllffIU2hDj1oef16
6vjpONOF97k4nn7tacnkjcgSpDlVtb+RPjKuOYdDMIikWzGjYGIA63cmhrXu5yjwEwO6fxkdDp1h
vpczd34Oxk5KO9xuF1HCCbn2m/OjfX/TxHFDHbw7meTtOKNLbxxyugYC0I0qUjZinoPZ4Kytmicc
ch7ldZ4o5z7vRcNaSgg7hd2V9AV+/LVX5YRGwiUikSHLLQafyyTa8RE9nbWsfyZJ7TjX+VEENVr0
7I0jqStj3bTXmAVHASbZNgWNSlWG/xveQzKnZgQXRS3RVz6cXavBm2cbwHpQ0nogiBwiDas9pXWV
N3j6dkQLp230D8ddkEYAv9uoPgOlJl81lyFE/GtdiKzvJbL8xp527WO8/lzdSqt0JbD4Uvqo0x/X
h/rzr8tYBWTIgYNFno88TePmAsMQ0j0gVt9/3j+CxEUzt/NUhODxPibF0FF+v0bAtX3vNtS/2hRA
Xc9pJ0AavcMsIBkw19Uloz5Czi3i1fmT0aE2q6FkiehqT07+w2tvx+Ifizwo97HYoDZWP4VNRp/2
b4jeydCHKm6GOhXJFdF0HgyQqtapYBHNnTr9ZG9GlphSkVkJe/J5aHA7hhjCwhxEtrEcWkdz0UTj
Ngr8P9lAFAwI7GsZCOAJG/YIOcdDYm0Ydd7fQNEDWEMMpEnTsIXaK/tiA9wPgABIWRScvztOs85a
/vJZFE50e98OtXXWbT05ffFkdA9mB6a2MYfJzTfNlDJIhlJyIJe+OyhyMQxTC2klL7zVUxkjcdkA
eZVg+8KYzlHAS6wDMoLjd+eIs3FLQ2C4xEv5BbRzXmPqmIWualtu6Boi5B7uZQVOjmKWhipu9st6
nv1o36XSwQ3Qxp1u/6rfxlnX+L1Xr9zpV/OjI9SIO0Pz9njasI76aP2UspynjIuDcfchuJSOX9vS
VxJw+TQPph9fM7b1qAbpc4g97gsSkeFIjqz+S2Bprokpmi9I79eSmn9d/BppZ20KFHXD2nPUKZ7e
gXgBalqeNZaXa4lOzw0N0GXepaUrtNaneDjy9f0+rS1nu00Cv0RZnGeVdAvXcRkgKgYVbAbj1h6l
IOzL+4C5bpG/HOKvfsO2zcCxPvQtPDEtSpNRmUbJSNQhxkLZ+AAHrusG+EPTeUXsvFLeccSvTjpe
3TmRPoNu0wsoxnyxq0t+d7kc9TUUtzjS315z6cdMyoFHllvx7OUhE88MCVrgkN2qPbx3YoMv2NxN
TCtCrMhkTYDNNwDmpmi6pGqzzIkj+szyd9QSz/hiS7yXV/lJPKd27y7f51TBd8tywS86ArArC+Lf
BP+6irnjAQQWYG/tMa1TQQiJlY6nWvInTtkiNOq7SZI7NYNg63JLJk1xpCb/e7IhnSnbA48At+Jv
8KSuzHUTc31MVyPEcntjzN5omGEmC4O4SjY4nUMFHubzdCd1ZKUA68gIXTfkcM4WTfUOEREvHDFS
SIPs1zCbIvaZANpDd1dHEkYvh4ix4wTzbELVTsS+s58v7yohV61u51D1raeTEduzNG0+CKuFiZxj
quHurmvwlSQUXRfT9uZhP4bBdvhYw29QPKPSI5Y9jKzwQ96ZCbXrJ2WFRluvBqlRVk+u/yl7uP0m
0WFCzI0KEmOAbHvZSKDHNvfDs6QjnC7JsqZ9K5GLTFv+99yz0Bd1KKWEM0PD+k9yoqbYYptGgYMH
oDv2NjON7LnhhTG4oiwQ69uVWKntO/FVSq5qf2dSZRGdZWNB+usNDCL1D1biO6TGLaTwEvUhm4TU
XSmIpW/1szFC5aR7b6TaGnOdTUxz3now4aSHxKwlWLYV1B+8KBOm930hb4FfpDSjKNmUeaP+crTr
eoPn+xMJsMmJ66A4EnBM9jR9FHaizPSXYwtwyMGdoaW4Mg0FjhTX9IbSJzrN0DJ51QNKAoFeIrJw
bx5a8XnoQ1gbgg2EQoFFL91abXxSRierqKm08rNdGLy3yJl4FakV8XYgBAPgpv9Ze6Kjw0cQHhIY
b3G3f6SNHB25lP2teJuEu6D7AG7ooxJVQckytCKKIP63xqqnpQpFDiRSob1SFCqcBU1t7vLqWzex
PUFda/SBGKkhmKDoiIqSb+sB8H5ucsaYULn2n2tpTBLJaxqEsHkmrS67WNZYu9/kFjmHQipKwldZ
CGpGej1uRgoJqemqj3rgd+roC/dzcFzZeXvamzrY4TIrCM1ZIq4PK/gcVoTP2Vx+AWxlwYYm2ynH
U6KY8JMrXIUY6mBI8JJKhJHae7IN/i2IcMeBcXIJVQznO/34QzGHREZIY1yl7kf6/wyyKK1S7/07
++Fk2a9W4bQH2Ni1oaYAP07q/AgR3Pu3435XDRo/9OijU/0JOgQ/SvmP+np58j1tIAB/DPkpbBFp
WvB/MAp9iD2O6g2Qxg/++1WzbywJIDDbTKKBlDb2if6LlBqSRCz4JkqjscDbVkanwFWf+biXvUjS
sz47ybK0V6SAwS+AWrmAZ2MpJUAbZNW5T5aBh7OB1B+gTQwpB+Kze6NeD0AdI9MjlaFkN19D1WtB
P9xT6Vytfdzv0HMhXGJovrUxNYFxFXbTl/7TCVLON+T2yGh8ntdaCWq2x4CQCuFlvrAOMywph/7I
YmGukA7HDMKHvq61wSxS9AnJ0tLfI1gYbfmcoyIIsdm+PgY+LD2YXpk6Xy1foyDZdcwZe4kyDAsc
bVQqoB3/tV9xkZoXCkNmVU5rabb0a6wmm1PfB49dfDLerbY3WJSlNGRtqegsdqwnQoyHFwmfZ+GQ
eECWLNmPovJAo8mo9CBVB+jYq436Cie1jo7VzxdWdNOvg+XFWn8IeAKPBj5ZJfrYBvLquonHatxD
5jd7czDfPE12k+okw8pLw+409FdjZfTCvs7+OR8aUE/Om0mQ3sxkP3mdbMo+pU5aVj3OxcYcgvSf
S4Mpr7HpDbUFtbq1kq48tz18M6IG9mfeett62ws5bdDq2SEfH5XLOJOwQT2wcoxzX0cDcI6/QIMi
/v2Of572Y8kyHO0HWFNW7WaFYkEzDgbIHLnU8No7CRSfhXviRPXF6fN8QGWLU3GNO7Mh9+aqUGSu
7GXUO/roZRzYm3uMhC/beY0UfZyBTGlXPdwfJPS7dNBF0xjyJywAnnkN9n/yS1rAbcLa3KAj7vAF
BS/V8RyeGeDdvPEUaRuGq7HGCUTvuvGzCRVmy13nkIiuJkL3Ta61j4BFIJGB/cRaMwrPSDoxqQXz
cWfxa6Gf4EXRCVRsLyQXpWvlt4FpxwfdwrxCPVO8JSbILSrtlcUC0FC4kinF1sfm/NlUMwPL20sN
mAndbcIlR3UW5NrhG0BlLMA26V8lllFo42RSliYFS5x1S/bIi78tUoI3HYX0gXPoPaX6iQC16zCh
totcgR/JgFYrZK7FBmyCadQkmDueyAOcLe1lRTT6kc7Iw1VQOZoL5HuGebIyKEPz8/ddrQLOGWd0
ADAE56XvwLnboHRr9mmE+SWi9xFTc7PBHKuudbOKAz5Uk+Mf/gbsrJFWKcOoXJyI5VQNREnMPOHW
4+AjUJ0umSbC+Uem7tnhoeqXeaH+MTfrMUEdHUR28iy3vYwAAtm/XnfhG00t5PuyNm0/1cDKKknM
mAkFf9XmIWLEe6mkL0w53tSEeyouM0PAL3DUXw+ZDBZOcQCfJCK9z4o3SwVQ4bNj2mSgQM7Sarev
FLya/pK9u3AmR6P3EXl2LdDK9C6LeqscI9rb4tppyhok88xX5jAtWLebj1gVSUlj/wf8wTLT511D
dQtGZyQw4iJwwTAO/WNsufkCNhJEHIoLZaGIcFL/+KKSTXZ2pMuqOhnWfsnnP1l2wA6JfUb23+Qa
fjBUkx7SDALYwfoBa7PbYYgHe3hE+TSu/Z7Hnf597fIwgBNA0GGmath2STw1NvZRlkRa9y/ZX4RY
IkIbdjgBBjOPSSLSTOCGwrWgBgMRUIy8Xv5p48zk8lkEFYZTRv75UWnfAKWH9c7IrQzVrP9rRdjh
7FgV8FHcbTH2j2i03xZX/p7krefGxK0NvPl/cN7e5g9zaEV6zapaYi/3YEsmQ5pq8bNVJdzwqcTT
CDeBmiw/uxDtGUKKormJFscehLgIeZ4Ag/SIcq7DtowiwsB4NRgXKn8HyTwj0z2Udyzyh/jpFghD
rw4YWK9L21JRW8l+1w/MMjTGsZGkRVx5kc9rczrLpKGSqUPax3eFef3FBRfwu1JbqElUSPXWC0xq
ABcOyku3Dn/v2P0JLfSLZbvxoJkOdKvJkKIhkAuT8eImVHu4neBc2/81x/IbDznTcbOAn6cZAifG
dRacCVAJ65UneUGDQDKaFB8HGsGpLGpJpZNXhw2YNwuvQtapEx9BZEAN6LPdvLghXCj02JrMNttw
YSGcQFckiU6HAsfGZ6KRXBtRzaD7m0RXe5NuP2XsbmJUrGHDZh48Nd0b+g8NX8eVFqLdeAUBnk+p
zW1mJeJTFRc5N/Q/5c5go6YgMADAhxwvUh/UVT0dyUuzzb/yYDaH53oGpqzSBcajlmvDoJKbMqxt
QDqt6nshFuDd7bw3i/eGBO1HNyfsUw1Cx35MtW8eDbH0+7v80zS4F8A7XyezlZZq2vU1NdWtyqva
ZAdA9lPV/1+3iogm3BnWqbWzDonBe9KnCu/2i8BFrsaXA6Jg9jKR9RJRMP7jLqbACtkuLz4XzXgv
qRdSkJsK7cOSJknGvGWttkTPKvF5ETwJuS10lzTPJ+irlD/CY7DeKTd1NgijEPupILrXZvUK9aKZ
wwINtKQ+vdkqxvlNZvliowH5yK4eDAzWj79+V7D/XivEfkCWs2n9+d0faPT/CrMPHjYd2/l4wHKD
bKn9+3QKcEC4mqfNqF2TTzWzeTDbMBWfdH271Juqj3bsKVsDxsDZh+1gokWwSZhVElc6EKQkP4K8
hR8jP5FPSprFoE/0JGLWozvt//xcclg3cE5Aciu1AmjumsLmYjPYkGPjvmP+zhijy6Nc1D6jl5HE
n82V8e/NPiQH9gm9ZU2AQ2F9nkIP4XnW1+BxgbL1Pk/XN/mEIJCNYFfiue9LXNxl/10iNPOM3rFq
4TUCbeL6JZkga+bUXOH2Q6xyfv8HdLDECPc6prqMqj9n0TkmTnhniAkAhoRsv2tevW+DUISQYtEw
K+BIz17qJKxKZcBSl1t/lfpeCcydYPVcgaEBsF1Z2JGYB60xT5TqN2sutXK8q3KC/3MqVO8xD90a
NbQXFnBf3W7xdoOnlz2zERH+2DSrFTEKhcuXNa5ZIvGukIKnBkKVMinvvVjSse8NkCEdEuCRqnyQ
9t8kLTyfrqIi83mgRzBoBxep7TswYO3uJW7+ZzozzK2j050kUg76mXvuCRGMzj+WzovJgAs6OSxh
RXtKZxCWo0qo6V8X582iHJ7K5G14FgkMD7MhCqu0rxjvJwz6/5x3Vv/YSFRdvqmNtvVP2mhf5Vjh
4szKtHT187T+CukuAlKF/y/d9FscgA5sEGWde/28HozHgzvFnPErt1HKXKUgIUaKM37nlOV1r2iG
Y2uYteC0jy9DMVUiWKsDDus9tODRc3I21m7HsZB//rCEOdqupsMLrq3uEKoSm6+iUusBFaf+ojBG
Keq9ngbGB9+OSfFtu/xcknLk0VHPy/vOfAun2Bpw8WCMmogvwXJbrjOZPQDQgRuwvbveFnylyVkb
PT/sPn6A+AkxxCasvaF4v/JO6AbtmFuSMORUDCdTwQNbgqzKG3iBBv56Nhsge3zB8OD4vdIF6Pga
NWvpGumEOrX/3zav32jdwQvQB3ALadroo0j36GgnT/WV4mN7t26CkFioNGECtnL+OiH6MhKpHb8P
3TgGDeDsk1Bd1lF2he9Q8Q5NVim5iDAL1E9UZzphSHuZCzxR59JeWmOk0SaAFczTKwQB/4eCHBea
2e7n5tgspRjkDr2uVcK8VzniebiHMwh8JL7/2ISbSC1zpOIvoZWHeuTDX6kY3R15kmxm0wbj56Zy
sF1whNkp0OP40Iz4uDzYdVFgsb5IFfaO1XFDSBfHMCu5J6KeC/yPJ95i2nbLoIpEJifzsnIi5kyh
DeFxJZP9lKFRrXzFXlEhxQX7d/xtiayASSYZKFeO8NTLE0Avi1rE0zygNdycMuFAgPPjm0cm4Fx0
iw6FqwlFGvIeiUW1aOiTq3mq/54lFe1YFQ99iR89ZEFem+rHL3lsoNb3kRpI0jmXXXsxfOodbPlG
LQeSrGyB2k7FRXucvGhnx+q3186DvEUQe1o5iKBvWW3gevwZI+d9HtnZ9wUcdgBs+vtJuK1iCbhr
g4OVHseLN0YytSKQADRoFFhxp/xHDxY7IMGONnsAulNlbB905Q768V9ZD0VwGg+5FWO41nk0tEMX
JbjIqmsL1vUHQYrR8ol1o19rrVYBuPsZ+oxWMn3NB05LeLF5i3UZvtYiOBL5SY0y680NWinze6k4
KdeoqljqoNjkCY3XRmGCp7MlF3QKYpuYcT0O0VzNgWC9hOI3Cz3jhPt6UliYe6nu/uFgYINnu2c3
rQ74uUjnwXdB2VhI+KtD6sZnt1jyn73ctWmU1zDfKzerShJNO2LfW5MusG2/t4CNdGTBzkRpgEx1
jWfez+daJF8ouC69PoTynC8bWLyGFVKLG6R3oXcmzSUDkNLdOoOfIgKg9LLZi6PuJvUAN4X3o+aN
p9tzuK6peI257P+taXBRGxnc2jYEexPYJlJTU9EJwO2s3V7+sH/5Fv7Uur0tGsbMnl0Ay7HoXgit
Pu/+79U67wIzI68GV6ug8FEtr2ej9WQ+UhuEItAD31fyJxuDhyUDW1gO4ybENq16pI4TYfMO6eVA
HESpmUqBmKo+G/mEKEaeF9bpQgqQ3wWgLyD7mj7s6zNIaSh4PNQ5lluLwYy/kSeujLX4cZDZKPH7
Ov7Q8LOerK8rMnnbhCvIBkL+MHLbZPQ5bAq65acKyGJVvcaFt6ZG7NpjDjsm5N//u7nYt4DPbh/F
UH6sFmBXUmakxwIAHYUVtj33LLpuo0/Sp3W30qJ/uZP6tzo8V16vFU6XT+JbB/Yq6Q4/PvUWkleN
pvVVK2mrWHazGBFUiYyjCRIkIiiwA0K9m3OfNpaWCXmTqGQ3Wi0gLmK8nAyYPA+5yDAFRVXr5ET6
9RXu3AtT6Yo90dqfIALcxkgBDdBABk3x5VmsSy4yu5yVChVYhTI58vQFr1F9n/n4eEvUBclpbp40
GJYE42jV3jUlp9Rbin6bd/5Doa4ailixqDdiK3W24NVrfayE8AokJsX29cs/Tbwen6dG9QDbUD27
VxT71n76QuPcmRTDmegzdiVNtNkfrDGnhZpVs5zN/4wTB7kFNP+p9yRcA444SyI7fA0AmttNOgNj
wUxBxRIhHs5FNOrdT7HfFc71xRzysOEvub2Y6EUVRYhwkKf2u3OqXL4VJ/CCcEY357VjSaj/jAHg
Y+FQFx2mrMitQN2Rw5xbz4yw0bfTxK1RvQ2bBXpAyGe5HLvGa9ZGM4TNGa9WYItWAOCO8N+ymIwi
RqBKGwk/p2CCECRAHn5IjlDpzv8YlYlTPRUqJaqt6oLUhoSCPiIBcCx9rAoR68zRH1IvXHrw8aUr
cNO1AwJfGbz2WIQwBLF3Y0tIcDWZdBLwcobk2prLvOrUR1MbGQMJ7ynv05zXjFvv2gR2+CL6Hjgv
jRoR1zyIqOyIoWyrM1z41d16nvHar6P25EkVJlLflJjdWGCUzsR0pA9NB409+9hh6F/kI/80vgAC
65YndzYH3020MAgfNRbfOGgRu3pmHjdDn9L2KPKz+pm0hGN5EkMEKXw2AyOgCaK9DveSfcR0i4CT
poNXHFFQLCP6ZR9xO05pd6IBRWU8Qmc5zvfFNO4vcS+xrFYg6VMYhWN3iEoRIXkhHdTPSDcrSsRa
r6iax/1W/ilYi4Kz06Nif8kYajYn071UsrGQnt8++4dG3cBp91ZXT81hCo/g+cxcwooS4+42hpnf
As5im1ytJTIHieHVx3r1elPH+Ns9/NdkkquD6cUXbH3QVLG3AFNPZBhEIcZ4ahWR9VmVQ+DpfsVM
PEm3ZsfaSGVYJZbZYo/it03iSX1WdnFSvrwmR2SlyseDkZI+mXMZ+dWvCYawtwNZwF0TrWU0ELMr
YlIbUVdea4e9PkrkPyzLAVdSpPOD9MDol9/2DWyepq+megHKqNKpmy3ptD+yueTItC2JRUjlMANV
aVCTm4h2uRLkFqsH+ABHfrGV1QiUn4Tg2btU80W8ezXLv2DzctTu5SiyUKvHOtwAHV+Hi+M5s/bo
JLJOPA3VeOyZgwcjZ6CQr8+9U7bNWGvqXnK+RO2by3Gl+/1t7Iqghp2q+GaR4h7U5/cY0F0DSHbz
RGDrV69If664xTGdShw2qsXLknh7T8WHDmERI83ymuk6lZfY78+ZRyD3Z7LtoQDNAEhzh7MLLbNC
mjxaPSzDpQbBX5vgqDqhrAyZygaryfOodGFrFmEb3LyIPZzaT86NE8ccoVHhWfE/o77Q29pJwvBZ
3wL7U/+3oyQtGNANOiey3fkDvDROslkGAZv8d/9uy0NedNJfPbk4i9edkG+2yzp+XAQ5+G6ht1XQ
hT3fAqeI2rKxM2WzJAACqXP8xmqXCqLs/FSjhImM64+dykrsQiyzVdMdbWeevDmuR5L2i7R54Q+o
XNL4HvJeXkw4OgIT0nGZBJKosDemWZSWQz9ytAAIdZaaY0q6j2UOJxxdq3VBhLMKnwpghjuhmqap
DXlQIVgpgJQ9/PSr2nsaaSEuKaYUQU39SMy+iqr+vJg1U/YmjNJFE1XqMuZh5WpJDF4MEcAhEr34
k9vmn/hnLkc3sTxsOkhB1uK+xlKrIsut1c4FFxUhJZgO12UGXXx2ZCdMa2dfN49vP0Ln83oZbMfa
HdVD/GhbYut5tTAAf6kICM48DBiabelkxKqlNDo48J6ggU8w84+GV+3sJEUKvP+3jpf3EOBFhZcd
w8NN80d58Obn6RmKheuQKiQ3YFSqzDHs544I5Ya55JNf8DjQHkA9NpWdJzDtFNEonZsSuLcIcURk
Wzx4I2ePP5Raxu/LEk6SITEca8zftvETdwYs4GGbiFAzYm0AcJqP8axY24TFIy67hwyuUFqmPK99
vzO95M7zw6GqRapon01V4SPJyw3stE5Blb3o06gvwmQoOfvHUAqLQzRrSutEXBe2hgLiCVgbq6K7
s1/A4SzXB5ASD02EodE/DZl7ZiCKnOABBndM0EvR7XVroE9j5Q1pWNpN4WIx4W3ruF7Fd0bYf0Z4
nXjDcvND0ObzKkfzb5Ii0h81ODoy9wV3lNoGBmjv8bvyBFtbVeuXvGwNRg1fzAkwbBavuNlvsrdo
zM+hsDAr9hyiMI/ZD2Nz9eKkocvzmBbT2eERQucc+Cmjb5UNeLpsM3K3wF1vjrvJXX64xg7fYgtR
kOvRYq26Q2SRXJlOWdiWoKuNQUPkUjMindur2J1IK3hoEfJPVRYYS0ih2bhwHQmkOoliLJNNp1+U
FzzO2lUvGxDHXWL1mvpQwuUHBjJIH5o/itPbpgqODZ3ExjiqQSetNMVd0+16o4uTxSAXnEinhKN+
rwfRdJvaz5hhsLY/DdOufJu8otoAzWxhbv4Zfuyy/KqMlvuTiTopEcJ6csZX/arVJABTRUneKfL2
b6cqOeXCNcLxZAioLjozUA8KsUALLLaMx4L2nESJYMeaUF89Enquu00SLkEuP9l/+GAatYDiHsJz
rVL1VedoNqFxuWGWXDx8UIornuYkiTxKmBLUEMzBeC0cz5xRZTS1XrV1toz/M2S+tuQwAdFJU4Qf
YNsoK9Pz3VRLX5DLG62fjy0dgdeL8q9NaC8uZthX1cHAAK+GFbCYiu37p7HKBkKEN+UwLOWrdhQU
QFlVA1XJC1C6CljR2ku4/Kg83VK0KR9LcbT5R9b3DSlOUzIp3YMm33AH627KWrFEXGQ8H0pxMLOp
uzQQpYgPj9nHYBdh193EERZY5tsup+Jc0G61BRLjN06aD/nYotaWnduomVajgHA=

------MultipartBoundary--lX7hvS8JKTK2i2c4McTi97SzhrYPP8rs0wQBsPYWAd----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://cdn.fasterthanli.me/dist/assets/bundle-BLH2wHVi.css

@charset "utf-8";

*, ::before, ::after { box-sizing: border-box; }

* { margin: 0px; }

body { min-height: 100vh; line-height: 1.5; -webkit-font-smoothing: antiali=
ased; }

img, picture, video, canvas, svg { display: block; max-width: 100%; }

input, button, textarea, select { font: inherit; }

ul[class], ol[class] { list-style: none; }

h1, h2, h3, h4 { text-wrap: balance; }

p, h1, h2, h3, h4, h5, h6 { overflow-wrap: break-word; }

#root, #__next { isolation: isolate; }

@media (prefers-reduced-motion: reduce) {
  *, ::before, ::after { animation-duration: 0.01ms !important; animation-i=
teration-count: 1 !important; transition-duration: 0.01ms !important; scrol=
l-behavior: auto !important; }
}

:root { --fg-blk: light-dark(#bcc0cc, #45475a); --fg-red: light-dark(#d20f3=
9, #f38ba8); --fg-grn: light-dark(#40a02b, #a6e3a1); --fg-ylw: light-dark(#=
df8e1d, #f9e2af); --fg-blu: light-dark(#1e66f5, #89b4fa); --fg-mag: light-d=
ark(#ea76cb, #f5c2e7); --fg-cyn: light-dark(#179299, #94e2d5); --fg-wht: li=
ght-dark(#5c5f77, #bac2de); --bg-blk: light-dark(#bcc0cc, #45475a); --bg-re=
d: light-dark(#d20f39, #f38ba8); --bg-grn: light-dark(#40a02b, #a6e3a1); --=
bg-ylw: light-dark(#df8e1d, #f9e2af); --bg-blu: light-dark(#1e66f5, #89b4fa=
); --bg-mag: light-dark(#ea76cb, #f5c2e7); --bg-cyn: light-dark(#179299, #9=
4e2d5); --bg-wht: light-dark(#5c5f77, #bac2de); --catppuccin-rosewater: lig=
ht-dark(#dc8a78, #f5e0dc); --catppuccin-flamingo: light-dark(#dd7878, #f2cd=
cd); --catppuccin-pink: light-dark(#ea76cb, #f5c2e7); --catppuccin-mauve: l=
ight-dark(#8839ef, #cba6f7); --catppuccin-red: light-dark(#d20f39, #f38ba8)=
; --catppuccin-maroon: light-dark(#e64553, #eba0ac); --catppuccin-peach: li=
ght-dark(#fe640b, #fab387); --catppuccin-yellow: light-dark(#df8e1d, #f9e2a=
f); --catppuccin-green: light-dark(#40a02b, #a6e3a1); --catppuccin-teal: li=
ght-dark(#179299, #94e2d5); --catppuccin-sky: light-dark(#04a5e5, #89dceb);=
 --catppuccin-sapphire: light-dark(#209fb5, #74c7ec); --catppuccin-blue: li=
ght-dark(#1e66f5, #89b4fa); --catppuccin-lavender: light-dark(#7287fd, #b4b=
efe); --catppuccin-text: light-dark(#4c4f69, #cdd6f4); --catppuccin-subtext=
1: light-dark(#5c5f77, #bac2de); --catppuccin-surface1: light-dark(#bcc0cc,=
 #45475a); }

.home-ansi i.fg-blk { color: var(--fg-blk); }

.home-ansi i.fg-red { color: var(--fg-red); }

.home-ansi i.fg-grn { color: var(--fg-grn); }

.home-ansi i.fg-ylw { color: var(--fg-ylw); }

.home-ansi i.fg-blu { color: var(--fg-blu); }

.home-ansi i.fg-mag { color: var(--fg-mag); }

.home-ansi i.fg-cyn { color: var(--fg-cyn); }

.home-ansi i.fg-wht { color: var(--fg-wht); }

.home-ansi i.fg-lblk { color: var(--fg-blk); }

.home-ansi i.fg-lred { color: var(--fg-red); }

.home-ansi i.fg-lgrn { color: var(--fg-grn); }

.home-ansi i.fg-lyel { color: var(--fg-ylw); }

.home-ansi i.fg-lblu { color: var(--fg-blu); }

.home-ansi i.fg-lmag { color: var(--fg-mag); }

.home-ansi i.fg-lcyn { color: var(--fg-cyn); }

.home-ansi i.fg-lwht { color: var(--fg-wht); }

.home-ansi i.bg-blk { background-color: var(--bg-blk); }

.home-ansi i.bg-red { background-color: var(--bg-red); }

.home-ansi i.bg-grn { background-color: var(--bg-grn); }

.home-ansi i.bg-ylw { background-color: var(--bg-ylw); }

.home-ansi i.bg-blu { background-color: var(--bg-blu); }

.home-ansi i.bg-mag { background-color: var(--bg-mag); }

.home-ansi i.bg-cyn { background-color: var(--bg-cyn); }

.home-ansi i.bg-wht { background-color: var(--bg-wht); }

.home-ansi i.bg-lblk { background-color: var(--bg-blk); }

.home-ansi i.bg-lred { background-color: var(--bg-red); }

.home-ansi i.bg-lgrn { background-color: var(--bg-grn); }

.home-ansi i.bg-lyel { background-color: var(--bg-ylw); }

.home-ansi i.bg-lblu { background-color: var(--bg-blu); }

.home-ansi i.bg-lmag { background-color: var(--bg-mag); }

.home-ansi i.bg-lcyn { background-color: var(--bg-cyn); }

.home-ansi i.bg-lwht { background-color: var(--bg-wht); }

.home-ansi i { font-style: normal !important; }

.home-ansi i.fg-ansi0 { color: light-dark(rgb(0, 0, 0), rgb(0, 0, 0)); }

.home-ansi i.bg-ansi0 { background-color: light-dark(rgb(0, 0, 0), rgb(0, 0=
, 0)); }

.home-ansi i.fg-ansi1 { color: light-dark(rgb(81, 20, 20), rgb(157, 33, 33)=
); }

.home-ansi i.bg-ansi1 { background-color: light-dark(rgb(81, 20, 20), rgb(1=
57, 33, 33)); }

.home-ansi i.fg-ansi2 { color: light-dark(rgb(20, 81, 20), rgb(33, 157, 33)=
); }

.home-ansi i.bg-ansi2 { background-color: light-dark(rgb(20, 81, 20), rgb(3=
3, 157, 33)); }

.home-ansi i.fg-ansi3 { color: light-dark(rgb(81, 81, 20), rgb(157, 157, 33=
)); }

.home-ansi i.bg-ansi3 { background-color: light-dark(rgb(81, 81, 20), rgb(1=
57, 157, 33)); }

.home-ansi i.fg-ansi4 { color: light-dark(rgb(20, 20, 81), rgb(33, 33, 157)=
); }

.home-ansi i.bg-ansi4 { background-color: light-dark(rgb(20, 20, 81), rgb(3=
3, 33, 157)); }

.home-ansi i.fg-ansi5 { color: light-dark(rgb(81, 20, 81), rgb(157, 33, 157=
)); }

.home-ansi i.bg-ansi5 { background-color: light-dark(rgb(81, 20, 81), rgb(1=
57, 33, 157)); }

.home-ansi i.fg-ansi6 { color: light-dark(rgb(20, 81, 81), rgb(33, 157, 157=
)); }

.home-ansi i.bg-ansi6 { background-color: light-dark(rgb(20, 81, 81), rgb(3=
3, 157, 157)); }

.home-ansi i.fg-ansi7 { color: light-dark(rgb(153, 153, 153), rgb(255, 255,=
 255)); }

.home-ansi i.bg-ansi7 { background-color: light-dark(rgb(153, 153, 153), rg=
b(255, 255, 255)); }

.home-ansi i.fg-ansi8 { color: light-dark(rgb(102, 102, 102), rgb(191, 191,=
 191)); }

.home-ansi i.bg-ansi8 { background-color: light-dark(rgb(102, 102, 102), rg=
b(191, 191, 191)); }

.home-ansi i.fg-ansi9 { color: light-dark(rgb(162, 40, 40), rgb(232, 148, 1=
48)); }

.home-ansi i.bg-ansi9 { background-color: light-dark(rgb(162, 40, 40), rgb(=
232, 148, 148)); }

.home-ansi i.fg-ansi10 { color: light-dark(rgb(40, 162, 40), rgb(148, 232, =
148)); }

.home-ansi i.bg-ansi10 { background-color: light-dark(rgb(40, 162, 40), rgb=
(148, 232, 148)); }

.home-ansi i.fg-ansi11 { color: light-dark(rgb(162, 162, 40), rgb(232, 232,=
 148)); }

.home-ansi i.bg-ansi11 { background-color: light-dark(rgb(162, 162, 40), rg=
b(232, 232, 148)); }

.home-ansi i.fg-ansi12 { color: light-dark(rgb(40, 40, 162), rgb(148, 148, =
232)); }

.home-ansi i.bg-ansi12 { background-color: light-dark(rgb(40, 40, 162), rgb=
(148, 148, 232)); }

.home-ansi i.fg-ansi13 { color: light-dark(rgb(162, 40, 162), rgb(232, 148,=
 232)); }

.home-ansi i.bg-ansi13 { background-color: light-dark(rgb(162, 40, 162), rg=
b(232, 148, 232)); }

.home-ansi i.fg-ansi14 { color: light-dark(rgb(40, 162, 162), rgb(148, 232,=
 232)); }

.home-ansi i.bg-ansi14 { background-color: light-dark(rgb(40, 162, 162), rg=
b(148, 232, 232)); }

.home-ansi i.fg-ansi15 { color: light-dark(rgb(203, 203, 203), rgb(255, 255=
, 255)); }

.home-ansi i.bg-ansi15 { background-color: light-dark(rgb(203, 203, 203), r=
gb(255, 255, 255)); }

.home-ansi i.fg-ansi16 { color: light-dark(rgb(0, 0, 0), rgb(0, 0, 0)); }

.home-ansi i.bg-ansi16 { background-color: light-dark(rgb(0, 0, 0), rgb(0, =
0, 0)); }

.home-ansi i.fg-ansi17 { color: light-dark(rgb(15, 15, 60), rgb(24, 24, 117=
)); }

.home-ansi i.bg-ansi17 { background-color: light-dark(rgb(15, 15, 60), rgb(=
24, 24, 117)); }

.home-ansi i.fg-ansi18 { color: light-dark(rgb(21, 21, 86), rgb(35, 35, 166=
)); }

.home-ansi i.bg-ansi18 { background-color: light-dark(rgb(21, 21, 86), rgb(=
35, 35, 166)); }

.home-ansi i.fg-ansi19 { color: light-dark(rgb(27, 27, 111), rgb(49, 49, 21=
1)); }

.home-ansi i.bg-ansi19 { background-color: light-dark(rgb(27, 27, 111), rgb=
(49, 49, 211)); }

.home-ansi i.fg-ansi20 { color: light-dark(rgb(34, 34, 137), rgb(99, 99, 22=
1)); }

.home-ansi i.bg-ansi20 { background-color: light-dark(rgb(34, 34, 137), rgb=
(99, 99, 221)); }

.home-ansi i.fg-ansi21 { color: light-dark(rgb(40, 40, 162), rgb(148, 148, =
232)); }

.home-ansi i.bg-ansi21 { background-color: light-dark(rgb(40, 40, 162), rgb=
(148, 148, 232)); }

.home-ansi i.fg-ansi22 { color: light-dark(rgb(15, 60, 15), rgb(24, 117, 24=
)); }

.home-ansi i.bg-ansi22 { background-color: light-dark(rgb(15, 60, 15), rgb(=
24, 117, 24)); }

.home-ansi i.fg-ansi23 { color: light-dark(rgb(15, 60, 60), rgb(24, 117, 11=
7)); }

.home-ansi i.bg-ansi23 { background-color: light-dark(rgb(15, 60, 60), rgb(=
24, 117, 117)); }

.home-ansi i.fg-ansi24 { color: light-dark(rgb(21, 66, 86), rgb(35, 127, 16=
6)); }

.home-ansi i.bg-ansi24 { background-color: light-dark(rgb(21, 66, 86), rgb(=
35, 127, 166)); }

.home-ansi i.fg-ansi25 { color: light-dark(rgb(27, 73, 111), rgb(49, 137, 2=
11)); }

.home-ansi i.bg-ansi25 { background-color: light-dark(rgb(27, 73, 111), rgb=
(49, 137, 211)); }

.home-ansi i.fg-ansi26 { color: light-dark(rgb(34, 79, 137), rgb(99, 153, 2=
21)); }

.home-ansi i.bg-ansi26 { background-color: light-dark(rgb(34, 79, 137), rgb=
(99, 153, 221)); }

.home-ansi i.fg-ansi27 { color: light-dark(rgb(40, 86, 162), rgb(148, 179, =
232)); }

.home-ansi i.bg-ansi27 { background-color: light-dark(rgb(40, 86, 162), rgb=
(148, 179, 232)); }

.home-ansi i.fg-ansi28 { color: light-dark(rgb(21, 86, 21), rgb(35, 166, 35=
)); }

.home-ansi i.bg-ansi28 { background-color: light-dark(rgb(21, 86, 21), rgb(=
35, 166, 35)); }

.home-ansi i.fg-ansi29 { color: light-dark(rgb(21, 86, 66), rgb(35, 166, 12=
7)); }

.home-ansi i.bg-ansi29 { background-color: light-dark(rgb(21, 86, 66), rgb(=
35, 166, 127)); }

.home-ansi i.fg-ansi30 { color: light-dark(rgb(21, 86, 86), rgb(35, 166, 16=
6)); }

.home-ansi i.bg-ansi30 { background-color: light-dark(rgb(21, 86, 86), rgb(=
35, 166, 166)); }

.home-ansi i.fg-ansi31 { color: light-dark(rgb(27, 92, 111), rgb(49, 174, 2=
11)); }

.home-ansi i.bg-ansi31 { background-color: light-dark(rgb(27, 92, 111), rgb=
(49, 174, 211)); }

.home-ansi i.fg-ansi32 { color: light-dark(rgb(34, 98, 137), rgb(99, 176, 2=
21)); }

.home-ansi i.bg-ansi32 { background-color: light-dark(rgb(34, 98, 137), rgb=
(99, 176, 221)); }

.home-ansi i.fg-ansi33 { color: light-dark(rgb(40, 105, 162), rgb(148, 192,=
 232)); }

.home-ansi i.bg-ansi33 { background-color: light-dark(rgb(40, 105, 162), rg=
b(148, 192, 232)); }

.home-ansi i.fg-ansi34 { color: light-dark(rgb(27, 111, 27), rgb(49, 211, 4=
9)); }

.home-ansi i.bg-ansi34 { background-color: light-dark(rgb(27, 111, 27), rgb=
(49, 211, 49)); }

.home-ansi i.fg-ansi35 { color: light-dark(rgb(27, 111, 73), rgb(49, 211, 1=
37)); }

.home-ansi i.bg-ansi35 { background-color: light-dark(rgb(27, 111, 73), rgb=
(49, 211, 137)); }

.home-ansi i.fg-ansi36 { color: light-dark(rgb(27, 111, 92), rgb(49, 211, 1=
74)); }

.home-ansi i.bg-ansi36 { background-color: light-dark(rgb(27, 111, 92), rgb=
(49, 211, 174)); }

.home-ansi i.fg-ansi37 { color: light-dark(rgb(27, 111, 111), rgb(49, 211, =
211)); }

.home-ansi i.bg-ansi37 { background-color: light-dark(rgb(27, 111, 111), rg=
b(49, 211, 211)); }

.home-ansi i.fg-ansi38 { color: light-dark(rgb(34, 117, 137), rgb(99, 199, =
221)); }

.home-ansi i.bg-ansi38 { background-color: light-dark(rgb(34, 117, 137), rg=
b(99, 199, 221)); }

.home-ansi i.fg-ansi39 { color: light-dark(rgb(40, 124, 162), rgb(148, 206,=
 232)); }

.home-ansi i.bg-ansi39 { background-color: light-dark(rgb(40, 124, 162), rg=
b(148, 206, 232)); }

.home-ansi i.fg-ansi40 { color: light-dark(rgb(34, 137, 34), rgb(99, 221, 9=
9)); }

.home-ansi i.bg-ansi40 { background-color: light-dark(rgb(34, 137, 34), rgb=
(99, 221, 99)); }

.home-ansi i.fg-ansi41 { color: light-dark(rgb(34, 137, 79), rgb(99, 221, 1=
53)); }

.home-ansi i.bg-ansi41 { background-color: light-dark(rgb(34, 137, 79), rgb=
(99, 221, 153)); }

.home-ansi i.fg-ansi42 { color: light-dark(rgb(34, 137, 98), rgb(99, 221, 1=
76)); }

.home-ansi i.bg-ansi42 { background-color: light-dark(rgb(34, 137, 98), rgb=
(99, 221, 176)); }

.home-ansi i.fg-ansi43 { color: light-dark(rgb(34, 137, 117), rgb(99, 221, =
199)); }

.home-ansi i.bg-ansi43 { background-color: light-dark(rgb(34, 137, 117), rg=
b(99, 221, 199)); }

.home-ansi i.fg-ansi44 { color: light-dark(rgb(34, 137, 137), rgb(99, 221, =
221)); }

.home-ansi i.bg-ansi44 { background-color: light-dark(rgb(34, 137, 137), rg=
b(99, 221, 221)); }

.home-ansi i.fg-ansi45 { color: light-dark(rgb(40, 143, 162), rgb(148, 219,=
 232)); }

.home-ansi i.bg-ansi45 { background-color: light-dark(rgb(40, 143, 162), rg=
b(148, 219, 232)); }

.home-ansi i.fg-ansi46 { color: light-dark(rgb(40, 162, 40), rgb(148, 232, =
148)); }

.home-ansi i.bg-ansi46 { background-color: light-dark(rgb(40, 162, 40), rgb=
(148, 232, 148)); }

.home-ansi i.fg-ansi47 { color: light-dark(rgb(40, 162, 86), rgb(148, 232, =
179)); }

.home-ansi i.bg-ansi47 { background-color: light-dark(rgb(40, 162, 86), rgb=
(148, 232, 179)); }

.home-ansi i.fg-ansi48 { color: light-dark(rgb(40, 162, 105), rgb(148, 232,=
 192)); }

.home-ansi i.bg-ansi48 { background-color: light-dark(rgb(40, 162, 105), rg=
b(148, 232, 192)); }

.home-ansi i.fg-ansi49 { color: light-dark(rgb(40, 162, 124), rgb(148, 232,=
 206)); }

.home-ansi i.bg-ansi49 { background-color: light-dark(rgb(40, 162, 124), rg=
b(148, 232, 206)); }

.home-ansi i.fg-ansi50 { color: light-dark(rgb(40, 162, 143), rgb(148, 232,=
 219)); }

.home-ansi i.bg-ansi50 { background-color: light-dark(rgb(40, 162, 143), rg=
b(148, 232, 219)); }

.home-ansi i.fg-ansi51 { color: light-dark(rgb(40, 162, 162), rgb(148, 232,=
 232)); }

.home-ansi i.bg-ansi51 { background-color: light-dark(rgb(40, 162, 162), rg=
b(148, 232, 232)); }

.home-ansi i.fg-ansi52 { color: light-dark(rgb(60, 15, 15), rgb(117, 24, 24=
)); }

.home-ansi i.bg-ansi52 { background-color: light-dark(rgb(60, 15, 15), rgb(=
117, 24, 24)); }

.home-ansi i.fg-ansi53 { color: light-dark(rgb(60, 15, 60), rgb(117, 24, 11=
7)); }

.home-ansi i.bg-ansi53 { background-color: light-dark(rgb(60, 15, 60), rgb(=
117, 24, 117)); }

.home-ansi i.fg-ansi54 { color: light-dark(rgb(66, 21, 86), rgb(127, 35, 16=
6)); }

.home-ansi i.bg-ansi54 { background-color: light-dark(rgb(66, 21, 86), rgb(=
127, 35, 166)); }

.home-ansi i.fg-ansi55 { color: light-dark(rgb(73, 27, 111), rgb(137, 49, 2=
11)); }

.home-ansi i.bg-ansi55 { background-color: light-dark(rgb(73, 27, 111), rgb=
(137, 49, 211)); }

.home-ansi i.fg-ansi56 { color: light-dark(rgb(79, 34, 137), rgb(153, 99, 2=
21)); }

.home-ansi i.bg-ansi56 { background-color: light-dark(rgb(79, 34, 137), rgb=
(153, 99, 221)); }

.home-ansi i.fg-ansi57 { color: light-dark(rgb(86, 40, 162), rgb(179, 148, =
232)); }

.home-ansi i.bg-ansi57 { background-color: light-dark(rgb(86, 40, 162), rgb=
(179, 148, 232)); }

.home-ansi i.fg-ansi58 { color: light-dark(rgb(60, 60, 15), rgb(117, 117, 2=
4)); }

.home-ansi i.bg-ansi58 { background-color: light-dark(rgb(60, 60, 15), rgb(=
117, 117, 24)); }

.home-ansi i.fg-ansi59 { color: light-dark(rgb(75, 75, 75), rgb(141, 141, 1=
41)); }

.home-ansi i.bg-ansi59 { background-color: light-dark(rgb(75, 75, 75), rgb(=
141, 141, 141)); }

.home-ansi i.fg-ansi60 { color: light-dark(rgb(82, 82, 101), rgb(162, 162, =
181)); }

.home-ansi i.bg-ansi60 { background-color: light-dark(rgb(82, 82, 101), rgb=
(162, 162, 181)); }

.home-ansi i.fg-ansi61 { color: light-dark(rgb(86, 86, 128), rgb(190, 190, =
213)); }

.home-ansi i.bg-ansi61 { background-color: light-dark(rgb(86, 86, 128), rgb=
(190, 190, 213)); }

.home-ansi i.fg-ansi62 { color: light-dark(rgb(79, 79, 167), rgb(222, 222, =
240)); }

.home-ansi i.bg-ansi62 { background-color: light-dark(rgb(79, 79, 167), rgb=
(222, 222, 240)); }

.home-ansi i.fg-ansi63 { color: light-dark(rgb(70, 70, 207), rgb(255, 255, =
255)); }

.home-ansi i.bg-ansi63 { background-color: light-dark(rgb(70, 70, 207), rgb=
(255, 255, 255)); }

.home-ansi i.fg-ansi64 { color: light-dark(rgb(66, 86, 21), rgb(127, 166, 3=
5)); }

.home-ansi i.bg-ansi64 { background-color: light-dark(rgb(66, 86, 21), rgb(=
127, 166, 35)); }

.home-ansi i.fg-ansi65 { color: light-dark(rgb(82, 101, 82), rgb(162, 181, =
162)); }

.home-ansi i.bg-ansi65 { background-color: light-dark(rgb(82, 101, 82), rgb=
(162, 181, 162)); }

.home-ansi i.fg-ansi66 { color: light-dark(rgb(82, 101, 101), rgb(162, 181,=
 181)); }

.home-ansi i.bg-ansi66 { background-color: light-dark(rgb(82, 101, 101), rg=
b(162, 181, 181)); }

.home-ansi i.fg-ansi67 { color: light-dark(rgb(86, 107, 128), rgb(190, 201,=
 213)); }

.home-ansi i.bg-ansi67 { background-color: light-dark(rgb(86, 107, 128), rg=
b(190, 201, 213)); }

.home-ansi i.fg-ansi68 { color: light-dark(rgb(79, 108, 167), rgb(222, 228,=
 240)); }

.home-ansi i.bg-ansi68 { background-color: light-dark(rgb(79, 108, 167), rg=
b(222, 228, 240)); }

.home-ansi i.fg-ansi69 { color: light-dark(rgb(70, 105, 207), rgb(255, 255,=
 255)); }

.home-ansi i.bg-ansi69 { background-color: light-dark(rgb(70, 105, 207), rg=
b(255, 255, 255)); }

.home-ansi i.fg-ansi70 { color: light-dark(rgb(73, 111, 27), rgb(137, 211, =
49)); }

.home-ansi i.bg-ansi70 { background-color: light-dark(rgb(73, 111, 27), rgb=
(137, 211, 49)); }

.home-ansi i.fg-ansi71 { color: light-dark(rgb(86, 128, 86), rgb(190, 213, =
190)); }

.home-ansi i.bg-ansi71 { background-color: light-dark(rgb(86, 128, 86), rgb=
(190, 213, 190)); }

.home-ansi i.fg-ansi72 { color: light-dark(rgb(86, 128, 107), rgb(190, 213,=
 201)); }

.home-ansi i.bg-ansi72 { background-color: light-dark(rgb(86, 128, 107), rg=
b(190, 213, 201)); }

.home-ansi i.fg-ansi73 { color: light-dark(rgb(86, 128, 128), rgb(190, 213,=
 213)); }

.home-ansi i.bg-ansi73 { background-color: light-dark(rgb(86, 128, 128), rg=
b(190, 213, 213)); }

.home-ansi i.fg-ansi74 { color: light-dark(rgb(79, 138, 167), rgb(222, 234,=
 240)); }

.home-ansi i.bg-ansi74 { background-color: light-dark(rgb(79, 138, 167), rg=
b(222, 234, 240)); }

.home-ansi i.fg-ansi75 { color: light-dark(rgb(70, 139, 207), rgb(255, 255,=
 255)); }

.home-ansi i.bg-ansi75 { background-color: light-dark(rgb(70, 139, 207), rg=
b(255, 255, 255)); }

.home-ansi i.fg-ansi76 { color: light-dark(rgb(79, 137, 34), rgb(153, 221, =
99)); }

.home-ansi i.bg-ansi76 { background-color: light-dark(rgb(79, 137, 34), rgb=
(153, 221, 99)); }

.home-ansi i.fg-ansi77 { color: light-dark(rgb(79, 167, 79), rgb(222, 240, =
222)); }

.home-ansi i.bg-ansi77 { background-color: light-dark(rgb(79, 167, 79), rgb=
(222, 240, 222)); }

.home-ansi i.fg-ansi78 { color: light-dark(rgb(79, 167, 108), rgb(222, 240,=
 228)); }

.home-ansi i.bg-ansi78 { background-color: light-dark(rgb(79, 167, 108), rg=
b(222, 240, 228)); }

.home-ansi i.fg-ansi79 { color: light-dark(rgb(79, 167, 138), rgb(222, 240,=
 234)); }

.home-ansi i.bg-ansi79 { background-color: light-dark(rgb(79, 167, 138), rg=
b(222, 240, 234)); }

.home-ansi i.fg-ansi80 { color: light-dark(rgb(79, 167, 167), rgb(222, 240,=
 240)); }

.home-ansi i.bg-ansi80 { background-color: light-dark(rgb(79, 167, 167), rg=
b(222, 240, 240)); }

.home-ansi i.fg-ansi81 { color: light-dark(rgb(70, 173, 207), rgb(255, 255,=
 255)); }

.home-ansi i.bg-ansi81 { background-color: light-dark(rgb(70, 173, 207), rg=
b(255, 255, 255)); }

.home-ansi i.fg-ansi82 { color: light-dark(rgb(86, 162, 40), rgb(179, 232, =
148)); }

.home-ansi i.bg-ansi82 { background-color: light-dark(rgb(86, 162, 40), rgb=
(179, 232, 148)); }

.home-ansi i.fg-ansi83 { color: light-dark(rgb(70, 207, 70), rgb(255, 255, =
255)); }

.home-ansi i.bg-ansi83 { background-color: light-dark(rgb(70, 207, 70), rgb=
(255, 255, 255)); }

.home-ansi i.fg-ansi84 { color: light-dark(rgb(70, 207, 105), rgb(255, 255,=
 255)); }

.home-ansi i.bg-ansi84 { background-color: light-dark(rgb(70, 207, 105), rg=
b(255, 255, 255)); }

.home-ansi i.fg-ansi85 { color: light-dark(rgb(70, 207, 139), rgb(255, 255,=
 255)); }

.home-ansi i.bg-ansi85 { background-color: light-dark(rgb(70, 207, 139), rg=
b(255, 255, 255)); }

.home-ansi i.fg-ansi86 { color: light-dark(rgb(70, 207, 173), rgb(255, 255,=
 255)); }

.home-ansi i.bg-ansi86 { background-color: light-dark(rgb(70, 207, 173), rg=
b(255, 255, 255)); }

.home-ansi i.fg-ansi87 { color: light-dark(rgb(70, 207, 207), rgb(255, 255,=
 255)); }

.home-ansi i.bg-ansi87 { background-color: light-dark(rgb(70, 207, 207), rg=
b(255, 255, 255)); }

.home-ansi i.fg-ansi88 { color: light-dark(rgb(86, 21, 21), rgb(166, 35, 35=
)); }

.home-ansi i.bg-ansi88 { background-color: light-dark(rgb(86, 21, 21), rgb(=
166, 35, 35)); }

.home-ansi i.fg-ansi89 { color: light-dark(rgb(86, 21, 66), rgb(166, 35, 12=
7)); }

.home-ansi i.bg-ansi89 { background-color: light-dark(rgb(86, 21, 66), rgb(=
166, 35, 127)); }

.home-ansi i.fg-ansi90 { color: light-dark(rgb(86, 21, 86), rgb(166, 35, 16=
6)); }

.home-ansi i.bg-ansi90 { background-color: light-dark(rgb(86, 21, 86), rgb(=
166, 35, 166)); }

.home-ansi i.fg-ansi91 { color: light-dark(rgb(92, 27, 111), rgb(174, 49, 2=
11)); }

.home-ansi i.bg-ansi91 { background-color: light-dark(rgb(92, 27, 111), rgb=
(174, 49, 211)); }

.home-ansi i.fg-ansi92 { color: light-dark(rgb(98, 34, 137), rgb(176, 99, 2=
21)); }

.home-ansi i.bg-ansi92 { background-color: light-dark(rgb(98, 34, 137), rgb=
(176, 99, 221)); }

.home-ansi i.fg-ansi93 { color: light-dark(rgb(105, 40, 162), rgb(192, 148,=
 232)); }

.home-ansi i.bg-ansi93 { background-color: light-dark(rgb(105, 40, 162), rg=
b(192, 148, 232)); }

.home-ansi i.fg-ansi94 { color: light-dark(rgb(86, 66, 21), rgb(166, 127, 3=
5)); }

.home-ansi i.bg-ansi94 { background-color: light-dark(rgb(86, 66, 21), rgb(=
166, 127, 35)); }

.home-ansi i.fg-ansi95 { color: light-dark(rgb(101, 82, 82), rgb(181, 162, =
162)); }

.home-ansi i.bg-ansi95 { background-color: light-dark(rgb(101, 82, 82), rgb=
(181, 162, 162)); }

.home-ansi i.fg-ansi96 { color: light-dark(rgb(101, 82, 101), rgb(181, 162,=
 181)); }

.home-ansi i.bg-ansi96 { background-color: light-dark(rgb(101, 82, 101), rg=
b(181, 162, 181)); }

.home-ansi i.fg-ansi97 { color: light-dark(rgb(107, 86, 128), rgb(201, 190,=
 213)); }

.home-ansi i.bg-ansi97 { background-color: light-dark(rgb(107, 86, 128), rg=
b(201, 190, 213)); }

.home-ansi i.fg-ansi98 { color: light-dark(rgb(108, 79, 167), rgb(228, 222,=
 240)); }

.home-ansi i.bg-ansi98 { background-color: light-dark(rgb(108, 79, 167), rg=
b(228, 222, 240)); }

.home-ansi i.fg-ansi99 { color: light-dark(rgb(105, 70, 207), rgb(255, 255,=
 255)); }

.home-ansi i.bg-ansi99 { background-color: light-dark(rgb(105, 70, 207), rg=
b(255, 255, 255)); }

.home-ansi i.fg-ansi100 { color: light-dark(rgb(86, 86, 21), rgb(166, 166, =
35)); }

.home-ansi i.bg-ansi100 { background-color: light-dark(rgb(86, 86, 21), rgb=
(166, 166, 35)); }

.home-ansi i.fg-ansi101 { color: light-dark(rgb(101, 101, 82), rgb(181, 181=
, 162)); }

.home-ansi i.bg-ansi101 { background-color: light-dark(rgb(101, 101, 82), r=
gb(181, 181, 162)); }

.home-ansi i.fg-ansi102 { color: light-dark(rgb(107, 107, 107), rgb(201, 20=
1, 201)); }

.home-ansi i.bg-ansi102 { background-color: light-dark(rgb(107, 107, 107), =
rgb(201, 201, 201)); }

.home-ansi i.fg-ansi103 { color: light-dark(rgb(108, 108, 138), rgb(228, 22=
8, 234)); }

.home-ansi i.bg-ansi103 { background-color: light-dark(rgb(108, 108, 138), =
rgb(228, 228, 234)); }

.home-ansi i.fg-ansi104 { color: light-dark(rgb(105, 105, 173), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi104 { background-color: light-dark(rgb(105, 105, 173), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi105 { color: light-dark(rgb(96, 96, 214), rgb(255, 255,=
 254)); }

.home-ansi i.bg-ansi105 { background-color: light-dark(rgb(96, 96, 214), rg=
b(255, 255, 254)); }

.home-ansi i.fg-ansi106 { color: light-dark(rgb(92, 111, 27), rgb(174, 211,=
 49)); }

.home-ansi i.bg-ansi106 { background-color: light-dark(rgb(92, 111, 27), rg=
b(174, 211, 49)); }

.home-ansi i.fg-ansi107 { color: light-dark(rgb(107, 128, 86), rgb(201, 213=
, 190)); }

.home-ansi i.bg-ansi107 { background-color: light-dark(rgb(107, 128, 86), r=
gb(201, 213, 190)); }

.home-ansi i.fg-ansi108 { color: light-dark(rgb(108, 138, 108), rgb(228, 23=
4, 228)); }

.home-ansi i.bg-ansi108 { background-color: light-dark(rgb(108, 138, 108), =
rgb(228, 234, 228)); }

.home-ansi i.fg-ansi109 { color: light-dark(rgb(108, 138, 138), rgb(228, 23=
4, 234)); }

.home-ansi i.bg-ansi109 { background-color: light-dark(rgb(108, 138, 138), =
rgb(228, 234, 234)); }

.home-ansi i.fg-ansi110 { color: light-dark(rgb(105, 139, 173), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi110 { background-color: light-dark(rgb(105, 139, 173), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi111 { color: light-dark(rgb(96, 135, 214), rgb(255, 255=
, 254)); }

.home-ansi i.bg-ansi111 { background-color: light-dark(rgb(96, 135, 214), r=
gb(255, 255, 254)); }

.home-ansi i.fg-ansi112 { color: light-dark(rgb(98, 137, 34), rgb(176, 221,=
 99)); }

.home-ansi i.bg-ansi112 { background-color: light-dark(rgb(98, 137, 34), rg=
b(176, 221, 99)); }

.home-ansi i.fg-ansi113 { color: light-dark(rgb(108, 167, 79), rgb(228, 240=
, 222)); }

.home-ansi i.bg-ansi113 { background-color: light-dark(rgb(108, 167, 79), r=
gb(228, 240, 222)); }

.home-ansi i.fg-ansi114 { color: light-dark(rgb(105, 173, 105), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi114 { background-color: light-dark(rgb(105, 173, 105), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi115 { color: light-dark(rgb(105, 173, 139), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi115 { background-color: light-dark(rgb(105, 173, 139), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi116 { color: light-dark(rgb(105, 173, 173), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi116 { background-color: light-dark(rgb(105, 173, 173), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi117 { color: light-dark(rgb(96, 174, 214), rgb(255, 254=
, 254)); }

.home-ansi i.bg-ansi117 { background-color: light-dark(rgb(96, 174, 214), r=
gb(255, 254, 254)); }

.home-ansi i.fg-ansi118 { color: light-dark(rgb(105, 162, 40), rgb(192, 232=
, 148)); }

.home-ansi i.bg-ansi118 { background-color: light-dark(rgb(105, 162, 40), r=
gb(192, 232, 148)); }

.home-ansi i.fg-ansi119 { color: light-dark(rgb(105, 207, 70), rgb(255, 255=
, 255)); }

.home-ansi i.bg-ansi119 { background-color: light-dark(rgb(105, 207, 70), r=
gb(255, 255, 255)); }

.home-ansi i.fg-ansi120 { color: light-dark(rgb(96, 214, 96), rgb(255, 254,=
 255)); }

.home-ansi i.bg-ansi120 { background-color: light-dark(rgb(96, 214, 96), rg=
b(255, 254, 255)); }

.home-ansi i.fg-ansi121 { color: light-dark(rgb(96, 214, 135), rgb(255, 254=
, 255)); }

.home-ansi i.bg-ansi121 { background-color: light-dark(rgb(96, 214, 135), r=
gb(255, 254, 255)); }

.home-ansi i.fg-ansi122 { color: light-dark(rgb(96, 214, 174), rgb(255, 254=
, 254)); }

.home-ansi i.bg-ansi122 { background-color: light-dark(rgb(96, 214, 174), r=
gb(255, 254, 254)); }

.home-ansi i.fg-ansi123 { color: light-dark(rgb(96, 214, 214), rgb(255, 254=
, 254)); }

.home-ansi i.bg-ansi123 { background-color: light-dark(rgb(96, 214, 214), r=
gb(255, 254, 254)); }

.home-ansi i.fg-ansi124 { color: light-dark(rgb(111, 27, 27), rgb(211, 49, =
49)); }

.home-ansi i.bg-ansi124 { background-color: light-dark(rgb(111, 27, 27), rg=
b(211, 49, 49)); }

.home-ansi i.fg-ansi125 { color: light-dark(rgb(111, 27, 73), rgb(211, 49, =
137)); }

.home-ansi i.bg-ansi125 { background-color: light-dark(rgb(111, 27, 73), rg=
b(211, 49, 137)); }

.home-ansi i.fg-ansi126 { color: light-dark(rgb(111, 27, 92), rgb(211, 49, =
174)); }

.home-ansi i.bg-ansi126 { background-color: light-dark(rgb(111, 27, 92), rg=
b(211, 49, 174)); }

.home-ansi i.fg-ansi127 { color: light-dark(rgb(111, 27, 111), rgb(211, 49,=
 211)); }

.home-ansi i.bg-ansi127 { background-color: light-dark(rgb(111, 27, 111), r=
gb(211, 49, 211)); }

.home-ansi i.fg-ansi128 { color: light-dark(rgb(117, 34, 137), rgb(199, 99,=
 221)); }

.home-ansi i.bg-ansi128 { background-color: light-dark(rgb(117, 34, 137), r=
gb(199, 99, 221)); }

.home-ansi i.fg-ansi129 { color: light-dark(rgb(124, 40, 162), rgb(206, 148=
, 232)); }

.home-ansi i.bg-ansi129 { background-color: light-dark(rgb(124, 40, 162), r=
gb(206, 148, 232)); }

.home-ansi i.fg-ansi130 { color: light-dark(rgb(111, 73, 27), rgb(211, 137,=
 49)); }

.home-ansi i.bg-ansi130 { background-color: light-dark(rgb(111, 73, 27), rg=
b(211, 137, 49)); }

.home-ansi i.fg-ansi131 { color: light-dark(rgb(128, 86, 86), rgb(213, 190,=
 190)); }

.home-ansi i.bg-ansi131 { background-color: light-dark(rgb(128, 86, 86), rg=
b(213, 190, 190)); }

.home-ansi i.fg-ansi132 { color: light-dark(rgb(128, 86, 107), rgb(213, 190=
, 201)); }

.home-ansi i.bg-ansi132 { background-color: light-dark(rgb(128, 86, 107), r=
gb(213, 190, 201)); }

.home-ansi i.fg-ansi133 { color: light-dark(rgb(128, 86, 128), rgb(213, 190=
, 213)); }

.home-ansi i.bg-ansi133 { background-color: light-dark(rgb(128, 86, 128), r=
gb(213, 190, 213)); }

.home-ansi i.fg-ansi134 { color: light-dark(rgb(138, 79, 167), rgb(234, 222=
, 240)); }

.home-ansi i.bg-ansi134 { background-color: light-dark(rgb(138, 79, 167), r=
gb(234, 222, 240)); }

.home-ansi i.fg-ansi135 { color: light-dark(rgb(139, 70, 207), rgb(255, 255=
, 255)); }

.home-ansi i.bg-ansi135 { background-color: light-dark(rgb(139, 70, 207), r=
gb(255, 255, 255)); }

.home-ansi i.fg-ansi136 { color: light-dark(rgb(111, 92, 27), rgb(211, 174,=
 49)); }

.home-ansi i.bg-ansi136 { background-color: light-dark(rgb(111, 92, 27), rg=
b(211, 174, 49)); }

.home-ansi i.fg-ansi137 { color: light-dark(rgb(128, 107, 86), rgb(213, 201=
, 190)); }

.home-ansi i.bg-ansi137 { background-color: light-dark(rgb(128, 107, 86), r=
gb(213, 201, 190)); }

.home-ansi i.fg-ansi138 { color: light-dark(rgb(138, 108, 108), rgb(234, 22=
8, 228)); }

.home-ansi i.bg-ansi138 { background-color: light-dark(rgb(138, 108, 108), =
rgb(234, 228, 228)); }

.home-ansi i.fg-ansi139 { color: light-dark(rgb(138, 108, 138), rgb(234, 22=
8, 234)); }

.home-ansi i.bg-ansi139 { background-color: light-dark(rgb(138, 108, 138), =
rgb(234, 228, 234)); }

.home-ansi i.fg-ansi140 { color: light-dark(rgb(139, 105, 173), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi140 { background-color: light-dark(rgb(139, 105, 173), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi141 { color: light-dark(rgb(135, 96, 214), rgb(255, 255=
, 254)); }

.home-ansi i.bg-ansi141 { background-color: light-dark(rgb(135, 96, 214), r=
gb(255, 255, 254)); }

.home-ansi i.fg-ansi142 { color: light-dark(rgb(111, 111, 27), rgb(211, 211=
, 49)); }

.home-ansi i.bg-ansi142 { background-color: light-dark(rgb(111, 111, 27), r=
gb(211, 211, 49)); }

.home-ansi i.fg-ansi143 { color: light-dark(rgb(128, 128, 86), rgb(213, 213=
, 190)); }

.home-ansi i.bg-ansi143 { background-color: light-dark(rgb(128, 128, 86), r=
gb(213, 213, 190)); }

.home-ansi i.fg-ansi144 { color: light-dark(rgb(138, 138, 108), rgb(234, 23=
4, 228)); }

.home-ansi i.bg-ansi144 { background-color: light-dark(rgb(138, 138, 108), =
rgb(234, 234, 228)); }

.home-ansi i.fg-ansi145 { color: light-dark(rgb(139, 139, 139), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi145 { background-color: light-dark(rgb(139, 139, 139), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi146 { color: light-dark(rgb(135, 135, 174), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi146 { background-color: light-dark(rgb(135, 135, 174), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi147 { color: light-dark(rgb(122, 122, 220), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi147 { background-color: light-dark(rgb(122, 122, 220), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi148 { color: light-dark(rgb(117, 137, 34), rgb(199, 221=
, 99)); }

.home-ansi i.bg-ansi148 { background-color: light-dark(rgb(117, 137, 34), r=
gb(199, 221, 99)); }

.home-ansi i.fg-ansi149 { color: light-dark(rgb(138, 167, 79), rgb(234, 240=
, 222)); }

.home-ansi i.bg-ansi149 { background-color: light-dark(rgb(138, 167, 79), r=
gb(234, 240, 222)); }

.home-ansi i.fg-ansi150 { color: light-dark(rgb(139, 173, 105), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi150 { background-color: light-dark(rgb(139, 173, 105), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi151 { color: light-dark(rgb(135, 174, 135), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi151 { background-color: light-dark(rgb(135, 174, 135), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi152 { color: light-dark(rgb(135, 174, 174), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi152 { background-color: light-dark(rgb(135, 174, 174), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi153 { color: light-dark(rgb(122, 171, 220), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi153 { background-color: light-dark(rgb(122, 171, 220), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi154 { color: light-dark(rgb(124, 162, 40), rgb(206, 232=
, 148)); }

.home-ansi i.bg-ansi154 { background-color: light-dark(rgb(124, 162, 40), r=
gb(206, 232, 148)); }

.home-ansi i.fg-ansi155 { color: light-dark(rgb(139, 207, 70), rgb(255, 255=
, 255)); }

.home-ansi i.bg-ansi155 { background-color: light-dark(rgb(139, 207, 70), r=
gb(255, 255, 255)); }

.home-ansi i.fg-ansi156 { color: light-dark(rgb(135, 214, 96), rgb(255, 254=
, 255)); }

.home-ansi i.bg-ansi156 { background-color: light-dark(rgb(135, 214, 96), r=
gb(255, 254, 255)); }

.home-ansi i.fg-ansi157 { color: light-dark(rgb(122, 220, 122), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi157 { background-color: light-dark(rgb(122, 220, 122), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi158 { color: light-dark(rgb(122, 220, 171), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi158 { background-color: light-dark(rgb(122, 220, 171), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi159 { color: light-dark(rgb(122, 220, 220), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi159 { background-color: light-dark(rgb(122, 220, 220), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi160 { color: light-dark(rgb(137, 34, 34), rgb(221, 99, =
99)); }

.home-ansi i.bg-ansi160 { background-color: light-dark(rgb(137, 34, 34), rg=
b(221, 99, 99)); }

.home-ansi i.fg-ansi161 { color: light-dark(rgb(137, 34, 79), rgb(221, 99, =
153)); }

.home-ansi i.bg-ansi161 { background-color: light-dark(rgb(137, 34, 79), rg=
b(221, 99, 153)); }

.home-ansi i.fg-ansi162 { color: light-dark(rgb(137, 34, 98), rgb(221, 99, =
176)); }

.home-ansi i.bg-ansi162 { background-color: light-dark(rgb(137, 34, 98), rg=
b(221, 99, 176)); }

.home-ansi i.fg-ansi163 { color: light-dark(rgb(137, 34, 117), rgb(221, 99,=
 199)); }

.home-ansi i.bg-ansi163 { background-color: light-dark(rgb(137, 34, 117), r=
gb(221, 99, 199)); }

.home-ansi i.fg-ansi164 { color: light-dark(rgb(137, 34, 137), rgb(221, 99,=
 221)); }

.home-ansi i.bg-ansi164 { background-color: light-dark(rgb(137, 34, 137), r=
gb(221, 99, 221)); }

.home-ansi i.fg-ansi165 { color: light-dark(rgb(143, 40, 162), rgb(219, 148=
, 232)); }

.home-ansi i.bg-ansi165 { background-color: light-dark(rgb(143, 40, 162), r=
gb(219, 148, 232)); }

.home-ansi i.fg-ansi166 { color: light-dark(rgb(137, 79, 34), rgb(221, 153,=
 99)); }

.home-ansi i.bg-ansi166 { background-color: light-dark(rgb(137, 79, 34), rg=
b(221, 153, 99)); }

.home-ansi i.fg-ansi167 { color: light-dark(rgb(167, 79, 79), rgb(240, 222,=
 222)); }

.home-ansi i.bg-ansi167 { background-color: light-dark(rgb(167, 79, 79), rg=
b(240, 222, 222)); }

.home-ansi i.fg-ansi168 { color: light-dark(rgb(167, 79, 108), rgb(240, 222=
, 228)); }

.home-ansi i.bg-ansi168 { background-color: light-dark(rgb(167, 79, 108), r=
gb(240, 222, 228)); }

.home-ansi i.fg-ansi169 { color: light-dark(rgb(167, 79, 138), rgb(240, 222=
, 234)); }

.home-ansi i.bg-ansi169 { background-color: light-dark(rgb(167, 79, 138), r=
gb(240, 222, 234)); }

.home-ansi i.fg-ansi170 { color: light-dark(rgb(167, 79, 167), rgb(240, 222=
, 240)); }

.home-ansi i.bg-ansi170 { background-color: light-dark(rgb(167, 79, 167), r=
gb(240, 222, 240)); }

.home-ansi i.fg-ansi171 { color: light-dark(rgb(173, 70, 207), rgb(255, 255=
, 255)); }

.home-ansi i.bg-ansi171 { background-color: light-dark(rgb(173, 70, 207), r=
gb(255, 255, 255)); }

.home-ansi i.fg-ansi172 { color: light-dark(rgb(137, 98, 34), rgb(221, 176,=
 99)); }

.home-ansi i.bg-ansi172 { background-color: light-dark(rgb(137, 98, 34), rg=
b(221, 176, 99)); }

.home-ansi i.fg-ansi173 { color: light-dark(rgb(167, 108, 79), rgb(240, 228=
, 222)); }

.home-ansi i.bg-ansi173 { background-color: light-dark(rgb(167, 108, 79), r=
gb(240, 228, 222)); }

.home-ansi i.fg-ansi174 { color: light-dark(rgb(173, 105, 105), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi174 { background-color: light-dark(rgb(173, 105, 105), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi175 { color: light-dark(rgb(173, 105, 139), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi175 { background-color: light-dark(rgb(173, 105, 139), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi176 { color: light-dark(rgb(173, 105, 173), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi176 { background-color: light-dark(rgb(173, 105, 173), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi177 { color: light-dark(rgb(174, 96, 214), rgb(254, 255=
, 254)); }

.home-ansi i.bg-ansi177 { background-color: light-dark(rgb(174, 96, 214), r=
gb(254, 255, 254)); }

.home-ansi i.fg-ansi178 { color: light-dark(rgb(137, 117, 34), rgb(221, 199=
, 99)); }

.home-ansi i.bg-ansi178 { background-color: light-dark(rgb(137, 117, 34), r=
gb(221, 199, 99)); }

.home-ansi i.fg-ansi179 { color: light-dark(rgb(167, 138, 79), rgb(240, 234=
, 222)); }

.home-ansi i.bg-ansi179 { background-color: light-dark(rgb(167, 138, 79), r=
gb(240, 234, 222)); }

.home-ansi i.fg-ansi180 { color: light-dark(rgb(173, 139, 105), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi180 { background-color: light-dark(rgb(173, 139, 105), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi181 { color: light-dark(rgb(174, 135, 135), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi181 { background-color: light-dark(rgb(174, 135, 135), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi182 { color: light-dark(rgb(174, 135, 174), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi182 { background-color: light-dark(rgb(174, 135, 174), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi183 { color: light-dark(rgb(171, 122, 220), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi183 { background-color: light-dark(rgb(171, 122, 220), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi184 { color: light-dark(rgb(137, 137, 34), rgb(221, 221=
, 99)); }

.home-ansi i.bg-ansi184 { background-color: light-dark(rgb(137, 137, 34), r=
gb(221, 221, 99)); }

.home-ansi i.fg-ansi185 { color: light-dark(rgb(167, 167, 79), rgb(240, 240=
, 222)); }

.home-ansi i.bg-ansi185 { background-color: light-dark(rgb(167, 167, 79), r=
gb(240, 240, 222)); }

.home-ansi i.fg-ansi186 { color: light-dark(rgb(173, 173, 105), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi186 { background-color: light-dark(rgb(173, 173, 105), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi187 { color: light-dark(rgb(174, 174, 135), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi187 { background-color: light-dark(rgb(174, 174, 135), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi188 { color: light-dark(rgb(171, 171, 171), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi188 { background-color: light-dark(rgb(171, 171, 171), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi189 { color: light-dark(rgb(148, 148, 225), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi189 { background-color: light-dark(rgb(148, 148, 225), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi190 { color: light-dark(rgb(143, 162, 40), rgb(219, 232=
, 148)); }

.home-ansi i.bg-ansi190 { background-color: light-dark(rgb(143, 162, 40), r=
gb(219, 232, 148)); }

.home-ansi i.fg-ansi191 { color: light-dark(rgb(173, 207, 70), rgb(255, 255=
, 255)); }

.home-ansi i.bg-ansi191 { background-color: light-dark(rgb(173, 207, 70), r=
gb(255, 255, 255)); }

.home-ansi i.fg-ansi192 { color: light-dark(rgb(174, 214, 96), rgb(254, 254=
, 255)); }

.home-ansi i.bg-ansi192 { background-color: light-dark(rgb(174, 214, 96), r=
gb(254, 254, 255)); }

.home-ansi i.fg-ansi193 { color: light-dark(rgb(171, 220, 122), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi193 { background-color: light-dark(rgb(171, 220, 122), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi194 { color: light-dark(rgb(148, 225, 148), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi194 { background-color: light-dark(rgb(148, 225, 148), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi195 { color: light-dark(rgb(148, 225, 225), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi195 { background-color: light-dark(rgb(148, 225, 225), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi196 { color: light-dark(rgb(162, 40, 40), rgb(232, 148,=
 148)); }

.home-ansi i.bg-ansi196 { background-color: light-dark(rgb(162, 40, 40), rg=
b(232, 148, 148)); }

.home-ansi i.fg-ansi197 { color: light-dark(rgb(162, 40, 86), rgb(232, 148,=
 179)); }

.home-ansi i.bg-ansi197 { background-color: light-dark(rgb(162, 40, 86), rg=
b(232, 148, 179)); }

.home-ansi i.fg-ansi198 { color: light-dark(rgb(162, 40, 105), rgb(232, 148=
, 192)); }

.home-ansi i.bg-ansi198 { background-color: light-dark(rgb(162, 40, 105), r=
gb(232, 148, 192)); }

.home-ansi i.fg-ansi199 { color: light-dark(rgb(162, 40, 124), rgb(232, 148=
, 206)); }

.home-ansi i.bg-ansi199 { background-color: light-dark(rgb(162, 40, 124), r=
gb(232, 148, 206)); }

.home-ansi i.fg-ansi200 { color: light-dark(rgb(162, 40, 143), rgb(232, 148=
, 219)); }

.home-ansi i.bg-ansi200 { background-color: light-dark(rgb(162, 40, 143), r=
gb(232, 148, 219)); }

.home-ansi i.fg-ansi201 { color: light-dark(rgb(162, 40, 162), rgb(232, 148=
, 232)); }

.home-ansi i.bg-ansi201 { background-color: light-dark(rgb(162, 40, 162), r=
gb(232, 148, 232)); }

.home-ansi i.fg-ansi202 { color: light-dark(rgb(162, 86, 40), rgb(232, 179,=
 148)); }

.home-ansi i.bg-ansi202 { background-color: light-dark(rgb(162, 86, 40), rg=
b(232, 179, 148)); }

.home-ansi i.fg-ansi203 { color: light-dark(rgb(207, 70, 70), rgb(255, 255,=
 255)); }

.home-ansi i.bg-ansi203 { background-color: light-dark(rgb(207, 70, 70), rg=
b(255, 255, 255)); }

.home-ansi i.fg-ansi204 { color: light-dark(rgb(207, 70, 105), rgb(255, 255=
, 255)); }

.home-ansi i.bg-ansi204 { background-color: light-dark(rgb(207, 70, 105), r=
gb(255, 255, 255)); }

.home-ansi i.fg-ansi205 { color: light-dark(rgb(207, 70, 139), rgb(255, 255=
, 255)); }

.home-ansi i.bg-ansi205 { background-color: light-dark(rgb(207, 70, 139), r=
gb(255, 255, 255)); }

.home-ansi i.fg-ansi206 { color: light-dark(rgb(207, 70, 173), rgb(255, 255=
, 255)); }

.home-ansi i.bg-ansi206 { background-color: light-dark(rgb(207, 70, 173), r=
gb(255, 255, 255)); }

.home-ansi i.fg-ansi207 { color: light-dark(rgb(207, 70, 207), rgb(255, 255=
, 255)); }

.home-ansi i.bg-ansi207 { background-color: light-dark(rgb(207, 70, 207), r=
gb(255, 255, 255)); }

.home-ansi i.fg-ansi208 { color: light-dark(rgb(162, 105, 40), rgb(232, 192=
, 148)); }

.home-ansi i.bg-ansi208 { background-color: light-dark(rgb(162, 105, 40), r=
gb(232, 192, 148)); }

.home-ansi i.fg-ansi209 { color: light-dark(rgb(207, 105, 70), rgb(255, 255=
, 255)); }

.home-ansi i.bg-ansi209 { background-color: light-dark(rgb(207, 105, 70), r=
gb(255, 255, 255)); }

.home-ansi i.fg-ansi210 { color: light-dark(rgb(214, 96, 96), rgb(254, 255,=
 255)); }

.home-ansi i.bg-ansi210 { background-color: light-dark(rgb(214, 96, 96), rg=
b(254, 255, 255)); }

.home-ansi i.fg-ansi211 { color: light-dark(rgb(214, 96, 135), rgb(254, 255=
, 255)); }

.home-ansi i.bg-ansi211 { background-color: light-dark(rgb(214, 96, 135), r=
gb(254, 255, 255)); }

.home-ansi i.fg-ansi212 { color: light-dark(rgb(214, 96, 174), rgb(254, 255=
, 254)); }

.home-ansi i.bg-ansi212 { background-color: light-dark(rgb(214, 96, 174), r=
gb(254, 255, 254)); }

.home-ansi i.fg-ansi213 { color: light-dark(rgb(214, 96, 214), rgb(254, 255=
, 254)); }

.home-ansi i.bg-ansi213 { background-color: light-dark(rgb(214, 96, 214), r=
gb(254, 255, 254)); }

.home-ansi i.fg-ansi214 { color: light-dark(rgb(162, 124, 40), rgb(232, 206=
, 148)); }

.home-ansi i.bg-ansi214 { background-color: light-dark(rgb(162, 124, 40), r=
gb(232, 206, 148)); }

.home-ansi i.fg-ansi215 { color: light-dark(rgb(207, 139, 70), rgb(255, 255=
, 255)); }

.home-ansi i.bg-ansi215 { background-color: light-dark(rgb(207, 139, 70), r=
gb(255, 255, 255)); }

.home-ansi i.fg-ansi216 { color: light-dark(rgb(214, 135, 96), rgb(254, 255=
, 255)); }

.home-ansi i.bg-ansi216 { background-color: light-dark(rgb(214, 135, 96), r=
gb(254, 255, 255)); }

.home-ansi i.fg-ansi217 { color: light-dark(rgb(220, 122, 122), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi217 { background-color: light-dark(rgb(220, 122, 122), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi218 { color: light-dark(rgb(220, 122, 171), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi218 { background-color: light-dark(rgb(220, 122, 171), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi219 { color: light-dark(rgb(220, 122, 220), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi219 { background-color: light-dark(rgb(220, 122, 220), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi220 { color: light-dark(rgb(162, 143, 40), rgb(232, 219=
, 148)); }

.home-ansi i.bg-ansi220 { background-color: light-dark(rgb(162, 143, 40), r=
gb(232, 219, 148)); }

.home-ansi i.fg-ansi221 { color: light-dark(rgb(207, 173, 70), rgb(255, 255=
, 255)); }

.home-ansi i.bg-ansi221 { background-color: light-dark(rgb(207, 173, 70), r=
gb(255, 255, 255)); }

.home-ansi i.fg-ansi222 { color: light-dark(rgb(214, 174, 96), rgb(254, 254=
, 255)); }

.home-ansi i.bg-ansi222 { background-color: light-dark(rgb(214, 174, 96), r=
gb(254, 254, 255)); }

.home-ansi i.fg-ansi223 { color: light-dark(rgb(220, 171, 122), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi223 { background-color: light-dark(rgb(220, 171, 122), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi224 { color: light-dark(rgb(225, 148, 148), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi224 { background-color: light-dark(rgb(225, 148, 148), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi225 { color: light-dark(rgb(225, 148, 225), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi225 { background-color: light-dark(rgb(225, 148, 225), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi226 { color: light-dark(rgb(162, 162, 40), rgb(232, 232=
, 148)); }

.home-ansi i.bg-ansi226 { background-color: light-dark(rgb(162, 162, 40), r=
gb(232, 232, 148)); }

.home-ansi i.fg-ansi227 { color: light-dark(rgb(207, 207, 70), rgb(255, 255=
, 255)); }

.home-ansi i.bg-ansi227 { background-color: light-dark(rgb(207, 207, 70), r=
gb(255, 255, 255)); }

.home-ansi i.fg-ansi228 { color: light-dark(rgb(214, 214, 96), rgb(254, 254=
, 255)); }

.home-ansi i.bg-ansi228 { background-color: light-dark(rgb(214, 214, 96), r=
gb(254, 254, 255)); }

.home-ansi i.fg-ansi229 { color: light-dark(rgb(220, 220, 122), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi229 { background-color: light-dark(rgb(220, 220, 122), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi230 { color: light-dark(rgb(225, 225, 148), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi230 { background-color: light-dark(rgb(225, 225, 148), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi231 { color: light-dark(rgb(203, 203, 203), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi231 { background-color: light-dark(rgb(203, 203, 203), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi232 { color: light-dark(rgb(6, 6, 6), rgb(11, 11, 11));=
 }

.home-ansi i.bg-ansi232 { background-color: light-dark(rgb(6, 6, 6), rgb(11=
, 11, 11)); }

.home-ansi i.fg-ansi233 { color: light-dark(rgb(14, 14, 14), rgb(26, 26, 26=
)); }

.home-ansi i.bg-ansi233 { background-color: light-dark(rgb(14, 14, 14), rgb=
(26, 26, 26)); }

.home-ansi i.fg-ansi234 { color: light-dark(rgb(22, 22, 22), rgb(41, 41, 41=
)); }

.home-ansi i.bg-ansi234 { background-color: light-dark(rgb(22, 22, 22), rgb=
(41, 41, 41)); }

.home-ansi i.fg-ansi235 { color: light-dark(rgb(30, 30, 30), rgb(56, 56, 56=
)); }

.home-ansi i.bg-ansi235 { background-color: light-dark(rgb(30, 30, 30), rgb=
(56, 56, 56)); }

.home-ansi i.fg-ansi236 { color: light-dark(rgb(38, 38, 38), rgb(71, 71, 71=
)); }

.home-ansi i.bg-ansi236 { background-color: light-dark(rgb(38, 38, 38), rgb=
(71, 71, 71)); }

.home-ansi i.fg-ansi237 { color: light-dark(rgb(46, 46, 46), rgb(86, 86, 86=
)); }

.home-ansi i.bg-ansi237 { background-color: light-dark(rgb(46, 46, 46), rgb=
(86, 86, 86)); }

.home-ansi i.fg-ansi238 { color: light-dark(rgb(54, 54, 54), rgb(101, 101, =
101)); }

.home-ansi i.bg-ansi238 { background-color: light-dark(rgb(54, 54, 54), rgb=
(101, 101, 101)); }

.home-ansi i.fg-ansi239 { color: light-dark(rgb(62, 62, 62), rgb(116, 116, =
116)); }

.home-ansi i.bg-ansi239 { background-color: light-dark(rgb(62, 62, 62), rgb=
(116, 116, 116)); }

.home-ansi i.fg-ansi240 { color: light-dark(rgb(70, 70, 70), rgb(131, 131, =
131)); }

.home-ansi i.bg-ansi240 { background-color: light-dark(rgb(70, 70, 70), rgb=
(131, 131, 131)); }

.home-ansi i.fg-ansi241 { color: light-dark(rgb(76, 76, 76), rgb(143, 143, =
143)); }

.home-ansi i.bg-ansi241 { background-color: light-dark(rgb(76, 76, 76), rgb=
(143, 143, 143)); }

.home-ansi i.fg-ansi242 { color: light-dark(rgb(81, 81, 81), rgb(152, 152, =
152)); }

.home-ansi i.bg-ansi242 { background-color: light-dark(rgb(81, 81, 81), rgb=
(152, 152, 152)); }

.home-ansi i.fg-ansi243 { color: light-dark(rgb(94, 94, 94), rgb(176, 176, =
176)); }

.home-ansi i.bg-ansi243 { background-color: light-dark(rgb(94, 94, 94), rgb=
(176, 176, 176)); }

.home-ansi i.fg-ansi244 { color: light-dark(rgb(102, 102, 102), rgb(191, 19=
1, 191)); }

.home-ansi i.bg-ansi244 { background-color: light-dark(rgb(102, 102, 102), =
rgb(191, 191, 191)); }

.home-ansi i.fg-ansi245 { color: light-dark(rgb(109, 109, 109), rgb(206, 20=
6, 206)); }

.home-ansi i.bg-ansi245 { background-color: light-dark(rgb(109, 109, 109), =
rgb(206, 206, 206)); }

.home-ansi i.fg-ansi246 { color: light-dark(rgb(117, 117, 117), rgb(221, 22=
1, 221)); }

.home-ansi i.bg-ansi246 { background-color: light-dark(rgb(117, 117, 117), =
rgb(221, 221, 221)); }

.home-ansi i.fg-ansi247 { color: light-dark(rgb(125, 125, 125), rgb(236, 23=
6, 236)); }

.home-ansi i.bg-ansi247 { background-color: light-dark(rgb(125, 125, 125), =
rgb(236, 236, 236)); }

.home-ansi i.fg-ansi248 { color: light-dark(rgb(133, 133, 133), rgb(251, 25=
1, 251)); }

.home-ansi i.bg-ansi248 { background-color: light-dark(rgb(133, 133, 133), =
rgb(251, 251, 251)); }

.home-ansi i.fg-ansi249 { color: light-dark(rgb(141, 141, 141), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi249 { background-color: light-dark(rgb(141, 141, 141), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi250 { color: light-dark(rgb(149, 149, 149), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi250 { background-color: light-dark(rgb(149, 149, 149), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi251 { color: light-dark(rgb(157, 157, 157), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi251 { background-color: light-dark(rgb(157, 157, 157), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi252 { color: light-dark(rgb(165, 165, 165), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi252 { background-color: light-dark(rgb(165, 165, 165), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi253 { color: light-dark(rgb(173, 173, 173), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi253 { background-color: light-dark(rgb(173, 173, 173), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi254 { color: light-dark(rgb(181, 181, 181), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi254 { background-color: light-dark(rgb(181, 181, 181), =
rgb(255, 255, 255)); }

.home-ansi i.fg-ansi255 { color: light-dark(rgb(189, 189, 189), rgb(255, 25=
5, 255)); }

.home-ansi i.bg-ansi255 { background-color: light-dark(rgb(189, 189, 189), =
rgb(255, 255, 255)); }

figure.code-block { position: relative; }

figure.code-block .language-tag { --fake-margin: .2rem; font-family: var(--=
font-symbol); width: auto; color: light-dark(rgb(111, 131, 153), rgb(231, 2=
31, 231)); font-size: 1rem; position: absolute; top: var(--fake-margin); ri=
ght: calc(var(--fake-margin) + .2rem); padding: 0.15em; }

figure.code-block, figure.code-block code { display: block; width: 100%; }

figure.code-block[data-lang=3D"term"] { color-scheme: dark; }

@media (prefers-color-scheme: light) {
  figure.code-block[data-lang=3D"term"] { background: rgba(0, 0, 0, 0.9); }
}

@media (prefers-color-scheme: dark) {
  figure.code-block[data-lang=3D"term"] { background: var(--code-bg-color-d=
ark); }
}

figure.code-block:not([data-lang=3D"term"]) { background: var(--code-bg-col=
or); }

figure.code-block pre { padding: 0px; margin: 0px; }

figure.code-block code { padding: 0.6rem; color: var(--catppuccin-text); bo=
rder: 1px solid var(--code-border-color); overflow-x: auto; position: relat=
ive; text-size-adjust: none; font-weight: 100; font-size: var(--font-code-s=
ize); line-height: 1.4; white-space: pre; tab-size: 2; }

@media (max-width: 699px) {
  figure.code-block code { padding: 0.4rem; font-size: 0.8rem; }
}

figure.code-block code i { font-style: normal; }

figure.code-block code i.b { font-weight: 700; filter: brightness(1.16); }

figure.code-block code i.l { filter: brightness(0.69); }

figure.code-block code i.u { text-decoration: underline; }

figure.code-block code i.st { text-decoration: line-through; }

figure.code-block code i.i { font-style: italic; }

figure.code-block code i.key { text-transform: uppercase; border-width: 1px=
; border-style: solid; border-image: initial; padding: 0.1rem 0.2rem; margi=
n: 0px 0.3rem; font-size: 0.75rem; border-radius: 0.2rem; vertical-align: m=
iddle; background: var(--catppuccin-surface1); border-color: var(--catppucc=
in-subtext1); color: var(--catppuccin-text); }

figure.code-block code i.hh1, figure.code-block code i.hh23 { color: var(--=
catppuccin-peach); }

figure.code-block code i.hh3 { color: var(--catppuccin-sapphire); }

figure.code-block code i.hh4, figure.code-block code i.hh2 { color: var(--c=
atppuccin-mauve); font-weight: 120; }

figure.code-block code i.hh5 { color: var(--catppuccin-sky); }

figure.code-block code i.hh6 { color: var(--catppuccin-teal); }

figure.code-block code i.hh10, figure.code-block code i.hh11 { color: var(-=
-catppuccin-green); }

figure.code-block code i.hh13, figure.code-block code i.hh14 { color: var(-=
-catppuccin-yellow); }

figure.code-block code i.hh15 { color: var(--catppuccin-text); }

figure.code-block code i.hh16 { color: var(--catppuccin-red); }

figure.code-block code i.hh17 { color: var(--catppuccin-maroon); }

figure.code-block code i.hh18, figure.code-block code i.hh7 { color: var(--=
catppuccin-subtext1); }

figure.code-block code i.hh9, figure.code-block code i.hh8 { color: var(--c=
atppuccin-lavender); }

figure.code-block code i.hh20 { color: var(--catppuccin-flamingo); }

figure.code-block code i.hh21 { color: var(--catppuccin-green); }

figure.code-block code i.hh22 { color: var(--catppuccin-red); }

figure.code-block code i.hh23 { color: var(--catppuccin-peach); }

figure.code-block code i.hh24 { color: var(--catppuccin-text); }

figure.code-block code i.hh25 { font-style: italic; }

figure.code-block code i.hh26 { font-weight: 700; }

figure.code-block code i.hh27 { color: var(--catppuccin-rosewater); text-de=
coration: underline; }

figure.code-block code i.hh28 { color: var(--catppuccin-lavender); }

figure.code-block code i.hh29 { color: var(--catppuccin-pink); }

figure.code-block code i.hh30 { color: var(--catppuccin-sky); font-weight: =
700; }

figure.code-block code i.hh31 { font-weight: 700; }

figure.code-block code i.hh32 { text-decoration: line-through; }

.mathml { line-height: 1.2; text-indent: 0px; text-rendering: auto; }

.mathml * { }

math { font-family: "Latin Modern Math"; }

mtext { font-family: "Latin Modern Roman", LMRoman12; }

mtd { padding-left: 0px; padding-right: 0px; }

mo.small { font-size: 70%; }

merror > mtext { background: rgb(0, 0, 0); font-family: IosevkaFtl, monospa=
ce; white-space-collapse: preserve; display: block; text-align: left; }

mtable { border-color: currentcolor; border-spacing: 0px; border-collapse: =
collapse; }

mtr:last-child > mtd:empty:only-child { display: none; }

mtr:last-child:has(> mtd:empty)::after { display: none; }

mtable.menv-alignlike > mtr > mtd:nth-child(2n+1), mtable.menv-cells-right =
> mtr > mtd, mtable.menv-multline > mtr > mtd:last-child, mtd.cell-right { =
text-align: -webkit-right; }

mtable.menv-alignlike > mtr > mtd:nth-child(2n), mtable.menv-cells-left > m=
tr > mtd, mtable.menv-multline > mtr > mtd:first-child, mtd.cell-left { tex=
t-align: left; }

mtable.menv-multline > mtr > mtd { width: 100%; }

mtable.menv-align > mtr > mtd:nth-child(2n+3) { padding-left: 1em; }

mtable.menv-cases > mtr > mtd:first-child { padding-right: 1em; }

mtable.menv-arraylike > mtr > mtd { padding-left: 0.4em; padding-right: 0.4=
em; }

mtable.menv-matrix > mtr > mtd:first-child { padding-left: 0px; }

mtable.menv-matrix > mtr > mtd:last-child { padding-right: 0px; }

mtable.menv-with-eqn > mtr:not(:has(> mtd.menv-nonumber)) { counter-increme=
nt: eq-number 1; }

mtable.menv-with-eqn > mtr:not(:has(> mtd.menv-nonumber))::after { position=
: absolute; right: 0px; padding: 0px 0.4em; content: "(" counter(eq-number)=
 ")"; }

mo.mop-negated { background: linear-gradient(to left top, rgba(0, 0, 0, 0) =
0%, rgba(0, 0, 0, 0) calc(50% - 0.8px), rgb(0, 0, 0) 50%, rgba(0, 0, 0, 0) =
calc(50% + 0.8px), rgba(0, 0, 0, 0) 100%); }

mtd.menv-left-solid { border-left: 0.06em solid; }

mtd.menv-right-solid { border-right: 0.06em solid; }

mtd.menv-left-dashed { border-left: 0.06em dashed; }

mtd.menv-right-dashed { border-right: 0.06em dashed; }

mtr.menv-hline { border-top: 0.06em solid; }

mtr.menv-hdashline { border-top: 0.06em dashed; }

mtr.menv-hline > mtd.menv-nonumber:only-child, mtr.menv-hdashline:empty > m=
td.menv-nonumber:only-child { padding-top: 0.1em; padding-bottom: 0px; }

mtd.menv-border-only:empty { width: 0.1em; padding: 0px; margin: 0px; }

@font-face { font-family: LMRoman12; src: url("https://cdn.fasterthanli.me/=
dist/assets/lmroman12-regular-3XXkO9T5.woff2") format("woff2"); }

@font-face { font-family: LMRoman12; src: url("https://cdn.fasterthanli.me/=
dist/assets/lmroman12-bold-C7iAhZyH.woff2") format("woff2"); font-weight: 7=
00; }

@font-face { font-family: LMRoman12; src: url("https://cdn.fasterthanli.me/=
dist/assets/lmroman12-italic-DNG5C1Ix.woff2") format("woff2"); font-style: =
italic; }

@font-face { font-family: "Latin Modern Math"; src: url("https://cdn.faster=
thanli.me/dist/assets/latinmodern-math-6uK1n3aA.woff2") format("woff2"); }

:root { --font-size-base: 14px; --border-radius: .4rem; --small-bp-under: 6=
99px; --medium-bp-over: 700px; --medium-large-bp-over: 950px; --large-bp-ov=
er: 1400px; --topnav-height: 3.5em; --font-display: "ZedDisplayFtl", sans-s=
erif; --font-title: var(--font-display); --font-text: "ZedTextFtl", sans-se=
rif; --font-ui: var(--font-text); --font-code: "IosevkaFtl", monospace; --f=
ont-symbol: "SymbolsNfMonoFtl", monospace; --ftl-blue: #588dde; --ftl-blue-=
light: #5c8fee; --line-height: 1.8; --page-width: 920px; --present-page-wid=
th: 45vw; --dark-bg: #1f1f1f; --dark-bg-2: #282828; --inlay-bg: #f6f6f6; --=
inlay-bg-dark: #282828; --p-white-dark: black; --p-black-dark: white; --amo=
s-color: light-dark(rgba(195, 225, 253, .3019607843), rgba(75, 86, 105, .30=
19607843)); --amos-border-color: light-dark(rgba(155, 195, 232, .8), rgba(1=
03, 163, 195, .4)); --bear-color: light-dark(rgba(247, 238, 189, .301960784=
3), rgba(77, 77, 77, .3019607843)); --bear-border-color: light-dark(rgba(23=
3, 217, 146, .8), rgba(195, 177, 103, .4)); --exclusive-border-color: light=
-dark(#b49d4e, rgb(121.3333333333, 101.7391304348, 34.6666666667)); --exclu=
sive-background-color: light-dark(rgb(255, 253.55, 243.4), rgb(40.323230769=
2, 30.4458087318, 3.7767692308)); --exclusive-chip-bg-color: light-dark(#f7=
e53a, #f7de35); --exclusive-chip-text-color: rgb(50, 50, 50); --secondary-t=
ext-color: light-dark(#636363, #f0f0f0); --accent-color: light-dark(oklch(7=
2% .23 385), oklch(80% .29 385)); --link-color: var(--accent-color); --text=
-decoration-thickness: 1px; --text-decoration-color: color-mix(in srgb, var=
(--accent-color) 60%, transparent); --visited-link-color: light-dark(#8223c=
1, rgb(199.5526315789, 145.8026315789, 235.1973684211)); --discreet-link-co=
lor: var(--link-color); --secondary-color: light-dark(#24213f, #333); --sec=
ondary-border-color: light-dark(rgb(30.2625, 27.740625, 52.959375), rgb(61.=
2, 61.2, 61.2)); --code-font-size: .902rem; --code-bg-color: rgba(var(--cat=
ppucin-base), .53); --code-border-color: transparent; --box-shadow-color: l=
ight-dark(#ccc, #3a3a3a); --page-html-bg: light-dark(white, rgb(23.19219512=
2, 22.087804878, 22.087804878)); --page-html-bg-transparent: light-dark(rgb=
a(255, 255, 255, .7), rgba(10.1312195122, 9.6487804878, 9.6487804878, .7));=
 --html-bg: var(--page-html-bg); --p-white: #fff; --p-black: #1b1f23; }

:root { --page-padding-inline: 1.4rem; --page-padding-block: 1.4rem; }

@media (max-width: 699px) {
  :root { --page-padding-inline: .9rem; --page-padding-block: .9rem; }
}

@media (min-width: 700px) {
  :root { --page-padding-inline: 2.1rem; --page-padding-block: 1.4rem; }
}

@media (min-width: 1400px) {
  :root { --page-padding-inline: 2.8rem; --page-padding-block: 1.8rem; }
}

@font-face { font-family: SymbolsNfMonoFtl; src: url("https://cdn.fastertha=
nli.me/dist/assets/SymbolsNerdFontMono-Regular-subset-CDaPArdp.woff2") form=
at("woff2"); font-weight: 400; font-style: normal; font-display: swap; }

@font-face { font-family: IosevkaFtl; src: url("https://cdn.fasterthanli.me=
/dist/assets/IosevkaFTLNerdFont-Regular-subset-DZl1Rhfl.woff2") format("wof=
f2"); font-weight: 400; font-style: normal; font-display: swap; }

@font-face { font-family: IosevkaFtl; src: url("https://cdn.fasterthanli.me=
/dist/assets/IosevkaFTLNerdFont-Bold-subset-Co2_lAdn.woff2") format("woff2"=
); font-weight: 700; font-style: normal; font-display: swap; }

@font-face { font-family: ZedTextFtl; src: url("https://cdn.fasterthanli.me=
/dist/assets/ZedTextL-Regular-r6Xfebjn.woff2") format("woff2"); font-weight=
: 400; font-style: normal; font-display: swap; }

@font-face { font-family: ZedTextFtl; src: url("https://cdn.fasterthanli.me=
/dist/assets/ZedTextL-Bold-V4_KV2fb.woff2") format("woff2"); font-weight: 7=
00; font-style: normal; font-display: swap; }

@font-face { font-family: ZedDisplayFtl; src: url("https://cdn.fasterthanli=
.me/dist/assets/ZedDisplayL-Heavy-CrLZcW2W.woff2") format("woff2"); font-we=
ight: 800; font-style: normal; font-display: swap; }

html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p, b=
lockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em, i=
mg, ins, kbd, q, s, samp, small, strike, strong, sub, tt, var, b, u, i, cen=
ter, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption,=
 tbody, tfoot, thead, tr, th, td, article, aside, canvas, details, embed, f=
igure, figcaption, footer, header, hgroup, menu, nav, output, ruby, section=
, summary, time, mark, audio, video { margin: 0px; padding: 0px; border: 0p=
x; box-sizing: border-box; }

abbr { text-decoration-line: underline; text-decoration-color: initial; tex=
t-decoration-thickness: var(--text-decoration-thickness); text-decoration-s=
tyle: dashed; cursor: help; }

a { color: var(--link-color); text-decoration-thickness: var(--text-decorat=
ion-thickness); text-decoration-color: var(--text-decoration-color); }

a:hover { text-decoration: none; }

h1 { font-size: 1.5rem; }

h2 { font-size: 1.4rem; }

.sublink { display: inline-block; padding: 0.4em; font-size: 80%; text-deco=
ration: none; color: light-dark(rgb(51, 51, 51), rgb(204, 204, 204)); }

.sublink::before { content: "=C2=BB "; }

.sublink:hover { text-decoration: underline; }

.sublink:hover { color: var(--link-color); }

h3 { font-size: 1.3rem; }

h4 { font-size: 1.2rem; }

h5, h6 { font-size: 1rem; }

hr { margin: 1.2rem auto; background: none; color: var(--secondary-color); =
}

math { font-size: 1.22rem; }

.pagination { --pagination-color: var(--accent-color); background: var(--pa=
gination-color); color: rgb(255, 255, 255); border-radius: var(--border-rad=
ius); font-size: 1rem; margin: 2em auto 2rem; display: flex; align-items: c=
enter; }

.pagination .pagination-section { font-family: var(--font-ui); font-size: 0=
.8rem; flex-grow: 1; display: flex; flex-basis: 33%; justify-content: cente=
r; align-items: center; }

.pagination .pagination-section > * { color: rgb(255, 255, 255); padding: 0=
.4em 0.8em; text-decoration: none; }

.pagination .pagination-section:first-child { justify-content: flex-start; =
}

.pagination .pagination-section:first-child a { border-right: 1px solid rgb=
a(255, 255, 255, 0.4); }

.pagination .pagination-section:last-child { justify-content: flex-end; }

.pagination .pagination-section:last-child a { border-left: 1px solid rgba(=
255, 255, 255, 0.4); }

html.prez { font-size: 22px; transform: scaleX(-1); color-scheme: dark !imp=
ortant; }

html.prez .markup-container code, html.prez .markup-container code pre { fo=
nt-size: 0.6rem; }

.post-list .series-part-number { font-family: var(--font-display); font-siz=
e: 4.2em; position: absolute; left: -0.3em; top: 0px; text-shadow: 0 0 20px=
 var(--accent-color); }

@media (max-width: 699px) {
  .post-list .series-part-number { display: none; }
}

.post-list .series-part-number-mobile { display: none; }

@media (max-width: 699px) {
  .post-list .series-part-number-mobile { display: initial; }
}

.post-list .month-header { font-family: var(--font-display); font-size: 1.2=
em; margin-bottom: 1em; text-align: center; }

.exclusive-star { position: absolute; z-index: 10; --side: 3.4rem; top: cal=
c(var(--side) * -.4); right: calc(var(--side) * -.4); transition: 0.2s; }

@media (max-width: 699px) {
  .exclusive-star { display: none; }
}

.exclusive-star img { width: var(--side); height: var(--side); transform: s=
caleX(-1); }

.exclusive-star:hover { transform: scale(1.05) rotate(0.5deg); }

.post-list-item { --border-width: .5px; border: var(--border-width) solid l=
ight-dark(rgb(226.7,226.7,226.7),rgb(51.25,51.25,51.25)); --item-radius: .6=
rem; border-radius: var(--item-radius); margin-bottom: 1.8rem; position: re=
lative; background: var(--page-html-bg-transparent); }

.post-list-item .post-list-item-inner { padding-block: 0.4em; padding-inlin=
e: 1em; }

.post-list-item.no-summary { margin-bottom: 1.4em; }

.post-list-item.draft { border: var(--border-width) dashed light-dark(#ccc,=
#3a3a3a); }

.post-list-item.exclusive { border: var(--border-width) solid var(--exclusi=
ve-border-color); position: relative; }

.post-list-item .page-thumbnail-container { max-width: 100%; width: 100%; m=
argin-inline: 0px; border-radius: var(--item-radius) var(--item-radius) 0 0=
; overflow: hidden; }

@media (max-width: 699px) {
  .post-list-item { border-radius: 0px; margin-inline: calc(-1 * var(--page=
-padding-small)); margin-block-end: -0.4em; background: transparent; border=
-left: none !important; border-right: none !important; border-bottom: none =
!important; }
  .post-list-item .page-thumbnail-container { max-width: calc(100% + 2 * va=
r(--page-padding-inline)); width: calc(100% + 2 * var(--page-padding-inline=
)); margin-inline: calc(-1 * var(--page-padding-inline)); border-radius: 0p=
x; }
  .post-list-item .post-list-item-inner { padding-block: var(--page-padding=
-block); padding-inline: 0px; }
  .post-list-item:last-child { margin-bottom: 1.4em; }
  .post-list-item .post-list-item-thumb { border-radius: 0px; }
}

.post-list-item .post-link { display: inline-block; text-wrap-style: balanc=
e; white-space: unset; color: inherit; }

.post-list-item .post-list-title { font-family: var(--font-display); font-s=
ize: 2.2em; text-shadow: light-dark(rgba(255, 255, 255, 0.5), rgba(0, 0, 0,=
 0.5)) 0px 0px 8px; display: inline-block; line-height: 1.2; padding: 0.2em=
 0px; margin-bottom: 0px; }

.post-list-item .post-list-title:hover { text-shadow: none; }

.post-list-item .post-list-title b { color: light-dark(rgb(0, 0, 0), rgb(0,=
 0, 0)); background: light-dark(rgba(255, 251, 148, 0.8), rgba(255, 247, 15=
0, 0.97)); padding: 0.14em 0.18em; font-weight: 700; border-radius: var(--b=
order-radius); }

.post-list-item .post-metadata { font-family: var(--font-ui); font-size: 0.=
95em; color: var(--secondary-text-color); display: flex; flex-flow: wrap; a=
lign-items: center; justify-content: left; }

.post-list-item .post-metadata > * { margin-right: 1rem; }

.post-list-item .post-summary { font-size: inherit; margin-top: 1.8rem; }

.post-list-item .post-summary.snippet { line-break: anywhere; }

.post-list-item .post-summary p, .post-list-item .post-summary .code-block,=
 .post-list-item .post-summary ul { margin-bottom: 1.25em; }

.post-list-item .post-summary p:last-child { margin-bottom: 0px; }

.post-list-item .post-summary blockquote p:last-child { margin-bottom: 0px;=
 }

.post-list-item .post-summary ul li { margin-left: 2em; }

.post-list-item .post-summary img, .post-list-item .post-summary video, .po=
st-list-item .post-summary iframe, .post-list-item .post-summary figure, .p=
ost-list-item .post-summary .tip, .post-list-item .post-summary .youtube-em=
bed { display: none; }

.post-list-item .post-summary h1, .post-list-item .post-summary h2, .post-l=
ist-item .post-summary h3, .post-list-item .post-summary h4, .post-list-ite=
m .post-summary h5, .post-list-item .post-summary h6 { font-size: 1.2em; pa=
dding-bottom: 0.4em; }

.post-list-item .post-summary b { color: light-dark(rgb(0, 0, 0), rgb(0, 0,=
 0)); background: light-dark(rgba(255, 251, 148, 0.8), rgba(255, 247, 150, =
0.97)); font-weight: 700; border-radius: var(--border-radius); padding: 0.2=
5em 0.375em; }

.post-list-item .read-more { display: flex; justify-content: flex-end; marg=
in-block: 0px 1em; }

.post-list-item .read-more a { background: var(--accent-color); color: rgb(=
255, 255, 255); padding: 0.4em 0.8em; border-radius: 0.3em; text-decoration=
: none; transition: background 0.2s; }

.post-list-item .read-more a:hover { background: color-mix(in srgb,var(--ac=
cent-color) 80%,black); }

html.env-dev .floating-page-metadata { font-size: 1.1rem; font-weight: 700;=
 position: fixed; z-index: 2; bottom: 10px; right: 60px; padding: 0.2em 0.4=
em; border: 2px solid light-dark(rgb(234, 234, 234), rgb(58, 58, 58)); bord=
er-radius: var(--border-radius); background: var(--html-bg); }

html.env-dev .floating-page-metadata .inline-icon { display: none; }

html.env-dev .floating-page-metadata abbr { text-decoration: none; }

.markup-container { --figure-width: min(100%, 50em); --dialog-width: min(93=
%, 45em); --paragraph-block-end: 1.4em; font-weight: 400; overflow-x: hidde=
n; }

.markup-container.figure-caption { --paragraph-block-end: .6rem; }

.markup-container p [data-kind=3D"media"], .markup-container p [data-kind=
=3D"diagram"] { display: block; max-width: 100%; height: auto; margin: 0px =
auto; margin-block-end: calc(1 * var(--paragraph-block-end)); overflow: hid=
den; }

@media (prefers-color-scheme: light) {
  .markup-container p [data-kind=3D"media"].transparent-for-dark, .markup-c=
ontainer p [data-kind=3D"diagram"].transparent-for-dark { background: rgb(1=
7, 17, 17); }
}

.markup-container p > math[display=3D"block"] { margin: 1.4rem auto; }

.markup-container .responsive-table { overflow-x: auto; }

.markup-container .responsive-table table { width: auto; margin: 0px auto; =
}

.markup-container > .disclosure { padding: 1em; border: 0.051em dashed ligh=
t-dark(rgb(204, 204, 204), rgb(96, 96, 96)); border-radius: var(--border-ra=
dius); }

.markup-container > .playwall { position: relative; margin: 2em auto; max-w=
idth: 600px; border: 2px solid var(--exclusive-border-color); border-radius=
: 2px; padding: 0.8em 1.2em; }

.markup-container > .playwall h1 { padding-block-start: 0px; margin-block-s=
tart: 0px; }

.markup-container a.anchor { text-decoration: none; color: light-dark(var(-=
-p-black),var(--p-white)); }

.markup-container h1, .markup-container h2, .markup-container h3, .markup-c=
ontainer h4, .markup-container h5, .markup-container h6 { font-family: var(=
--font-title); font-weight: 700; text-wrap: balance; }

.markup-container h1 { font-size: 1.8em; margin-block: 0em 0.4em; }

.markup-container h2 { font-size: 1.55em; margin-block: 0em 0.32em; }

.markup-container h3 { font-size: 1.4em; margin-block: 0em 0.24em; }

.markup-container h4 { font-size: 1.1em; margin-block: 0em 0.16em; }

.markup-container h5 { font-size: 1em; margin-block: 0em 0.08em; }

.markup-container h6 { font-size: 1em; margin-block: 0em 0.04em; }

.markup-container a:not(.anchor):not([role=3D"button"]) { transition: backg=
round 0.17s, box-shadow, color, display, text-decoration-thickness; }

.markup-container a:not(.anchor):not([role=3D"button"]):focus-within { outl=
ine: none; text-decoration-line: underline; text-decoration-style: initial;=
 text-decoration-color: initial; text-decoration-thickness: var(--text-deco=
ration-thickness); }

.markup-container a:not(.anchor):not([role=3D"button"]):hover { text-decora=
tion-thickness: 0px; background: var(--text-decoration-color); color: rgb(2=
55, 255, 255); text-shadow: none !important; }

.markup-container > p, .markup-container > .responsive-table, .markup-conta=
iner .paragraph-like, .markup-container .code-block, .markup-container ul, =
.markup-container ol, .markup-container blockquote, .markup-container .tip,=
 .markup-container .recap, .markup-container > embed.full-width, .markup-co=
ntainer > .paragraph-like > p, .markup-container > .paragraph-like > .respo=
nsive-table, .markup-container > .paragraph-like .paragraph-like, .markup-c=
ontainer > .paragraph-like .code-block, .markup-container > .paragraph-like=
 ul, .markup-container > .paragraph-like ol, .markup-container > .paragraph=
-like blockquote, .markup-container > .paragraph-like .tip, .markup-contain=
er > .paragraph-like .recap, .markup-container > .paragraph-like > embed.fu=
ll-width, .markup-container > blockquote > p, .markup-container > blockquot=
e > .responsive-table, .markup-container > blockquote .paragraph-like, .mar=
kup-container > blockquote .code-block, .markup-container > blockquote ul, =
.markup-container > blockquote ol, .markup-container > blockquote blockquot=
e, .markup-container > blockquote .tip, .markup-container > blockquote .rec=
ap, .markup-container > blockquote > embed.full-width, .markup-container .d=
ialog-text > p, .markup-container .dialog-text > .responsive-table, .markup=
-container .dialog-text .paragraph-like, .markup-container .dialog-text .co=
de-block, .markup-container .dialog-text ul, .markup-container .dialog-text=
 ol, .markup-container .dialog-text blockquote, .markup-container .dialog-t=
ext .tip, .markup-container .dialog-text .recap, .markup-container .dialog-=
text > embed.full-width { margin-block-end: var(--paragraph-block-end); }

.markup-container ul ul { margin-block-end: 0px; }

.markup-container ul li, .markup-container ol li { margin-inline-start: 2re=
m; line-height: 1.6; }

.markup-container .page-title { font-weight: 900; line-height: 1.2; padding=
-block-start: 0px; font-size: 2.1rem; padding: 1.4rem 0px; }

.markup-container .page-title.has-series { padding-block-end: 0.8rem; }

.markup-container .page-metadata { font-family: var(--font-ui); color: var(=
--secondary-text-color); line-height: 100%; font-weight: 400; padding: 0.2e=
m 0px; text-shadow: light-dark(rgb(250, 250, 250), rgb(51, 51, 51)) 0px 0px=
 3px; box-shadow: transparent 0px 0px 4px; display: flex; flex-wrap: wrap; =
align-items: center; gap: 1.2em; }

.markup-container .page-metadata:hover { text-shadow: none; }

.markup-container .page-metadata .author-attribution { display: flex; gap: =
0.4em; align-items: center; }

.markup-container .page-metadata .author-attribution picture img { width: 1=
.4em; height: 1.4em; }

.markup-container .reddit-button-container, .markup-container .youtube-butt=
on-container { display: flex; justify-content: center; }

.markup-container .reddit-button-container .inline-icon-container, .markup-=
container .youtube-button-container .inline-icon-container { margin-inline-=
end: 0.8rem; }

.markup-container figure { max-width: var(--figure-width); display: flex; f=
lex-direction: column; align-items: center; width: fit-content; margin-inli=
ne: auto; }

@media (max-width: 699px) {
  .markup-container figure { max-width: 100%; }
}

.markup-container figure.code-block { --light-bg-color: oklch(99.46% .0118 =
247.57); --dark-bg-color: oklch(.18 .02 270); --light-border-color: color-m=
ix(in srgb, #000 5%, var(--light-bg-color)); --dark-border-color: color-mix=
(in srgb, #fff 8%, var(--dark-bg-color)); --code-border-color: light-dark(v=
ar(--light-border-color), var(--dark-border-color)); background-color: ligh=
t-dark(var(--light-bg-color),var(--dark-bg-color)); }

.markup-container figure.code-block, .markup-container figure.code-block co=
de { border-radius: var(--border-radius); font-size: 0.9642em; }

.markup-container figure.code-block code { padding: 0.8em 1em; }

@media (min-width: 700px) {
  .markup-container figure.code-block code { padding: 0.6em 0.8em; }
}

@media (max-width: 699px) {
  .markup-container figure.code-block code { padding: 0.4em 0.6em; }
}

.markup-container figure:not(.code-block) { margin-block-start: calc(1 * va=
r(--paragraph-block-end)); margin-block-end: calc(1 * var(--paragraph-block=
-end)); overflow: hidden; border: 2px solid var(--accent-color); background=
: color-mix(in srgb, rgb(42, 42, 42) 88%, black); color: rgb(247, 247, 247)=
; border-radius: 12px; padding: 0.61em; }

@media (max-width: 699px) {
  .markup-container figure:not(.code-block) { padding: 0.42em; }
}

@media (prefers-color-scheme: light) {
  .markup-container figure:not(.code-block) { color-scheme: dark; }
}

.markup-container figure:not(.code-block) video, .markup-container figure:n=
ot(.code-block) img, .markup-container figure:not(.code-block) embed { max-=
width: 100%; height: auto; display: block; margin: auto; filter: brightness=
(1) drop-shadow(rgb(0, 0, 0) 0px 0px 5px); }

.markup-container figure:not(.code-block) figcaption { align-self: stretch;=
 font-size: 0.89em; max-width: min-content; min-width: 100%; margin-inline:=
 auto; margin-block: 0.6em 0em; padding-inline: 0.4em; padding-block: 0em; =
}

@media (max-width: 699px) {
  .markup-container figure:not(.code-block) figcaption { margin-block-end: =
0.3em; }
}

.markup-container .footnote-definition { text-indent: 1rem; }

.markup-container .footnote-definition .footnote-definition-label { float: =
left; }

.markup-container .youtube-embed { background: rgb(0, 0, 0); position: rela=
tive; aspect-ratio: 16 / 9; margin-block-end: 1rem; }

.markup-container .youtube-embed iframe { position: absolute; inset-block-s=
tart: 0px; inset-inline-start: 0px; width: 100%; height: 100%; border: 0px;=
 }

.markup-container table { margin-block-end: 2rem; width: 100%; border: 1px =
solid light-dark(rgb(229, 229, 229), rgb(58, 58, 58)); border-collapse: col=
lapse; }

.markup-container td, .markup-container th { padding: 0.25rem 0.5rem; borde=
r: 1px solid light-dark(rgb(229, 229, 229), rgb(58, 58, 58)); }

.markup-container tbody tr:nth-child(2n+1) td, .markup-container tbody tr:n=
th-child(2n+1) th { background-color: light-dark(rgb(247, 247, 247), rgb(42=
, 42, 42)); }

.markup-container strong { font-weight: 650; }

.markup-container .asciicast { text-align: center; margin: 20px auto !impor=
tant; }

.markup-container ul li, .markup-container ol li { margin-block-end: 0.4rem=
; }

.markup-container code { font-family: var(--font-code); }

.markup-container code:not(.scroll-wrapper) { padding: 0.12rem 0.24rem; pad=
ding-block-end: 0.04em; vertical-align: 0em; border-radius: 0.3rem; color: =
var(--catppuccin-text); font-size: var(--font-inline-code-size); background=
-color: color-mix(in oklch,var(--catppuccin-surface1) 30%,transparent); }

.markup-container .dialog { margin-block-end: 1.2em; margin-inline: auto; d=
isplay: flex; flex-direction: row; font-size: 1.2rem; overflow: hidden; }

.markup-container .dialog .dialog-head { align-self: flex-start; --head-sid=
e: 2.3em; flex-basis: var(--head-side); width: var(--head-side); height: va=
r(--head-side); margin: 0rem 0.4rem; flex-shrink: 0; }

.markup-container .dialog .dialog-head img, .markup-container .dialog .dial=
og-head embed, .markup-container .dialog .dialog-head svg { width: 100%; he=
ight: auto; }

.markup-container .dialog .dialog-head.round img, .markup-container .dialog=
 .dialog-head.round embed, .markup-container .dialog .dialog-head.round svg=
 { border-radius: 50%; }

.markup-container .dialog .dialog-text { max-width: var(--dialog-width); al=
ign-self: flex-start; border-radius: 0.8em; padding-inline: 0.9em; padding-=
block: 0.6em 0.2em; overflow: hidden; font-size: 0.89rem; background-color:=
 var(--bubble-color); color: var(--text-color); }

@media (prefers-color-scheme: light) {
  .markup-container .dialog .dialog-text { --bubble-color: oklch(93.46% .01=
87 256.35); --text-color: oklch(26.03% 0 0); }
}

@media (prefers-color-scheme: dark) {
  .markup-container .dialog .dialog-text { --bubble-color: oklch(29.31% .04=
34 266.22); --text-color: oklch(99% 0 0); }
}

.markup-container .dialog .dialog-text .full-width, .markup-container .dial=
og .dialog-text .code-block { max-width: 100%; }

.markup-container .dialog .dialog-text .full-width code, .markup-container =
.dialog .dialog-text .code-block code { border: none !important; }

.markup-container .dialog.right { flex-direction: row-reverse; }

.markup-container .dialog.right .dialog-text { --bubble-color: oklch(62.44%=
 .2054 255.56); --text-color: oklch(.98 0 0); color-scheme: dark; --link-co=
lor: oklch(97.89% 0 32.16); --text-decoration-color: oklch(97.89% 0 32.16);=
 }

.markup-container .tip, .markup-container .recap { font-size: 0.89rem; max-=
width: var(--dialog-width); padding: 0.3em 0.8em; border-radius: var(--bord=
er-radius); border: 1px solid light-dark(rgb(230, 230, 230), rgb(51, 51, 51=
)); margin-inline: auto; }

.markup-container .tip .full-width, .markup-container .recap .full-width { =
max-width: 100%; }

.markup-container .tip .tip-header, .markup-container .recap .tip-header { =
display: flex; align-items: center; justify-content: center; font-weight: 7=
00; margin-block: 0.2rem; font-family: var(--font-display); font-size: 1.1e=
m; }

.markup-container .tip .tip-header img, .markup-container .recap .tip-heade=
r img { --side: 2.4em; margin-inline: 0px 0.5rem; transform: none; width: v=
ar(--side); height: var(--side); }

.markup-container .tip p:last-child, .markup-container .tip ul:last-child, =
.markup-container .recap p:last-child, .markup-container .recap ul:last-chi=
ld { margin-block-end: 0px; }

.markup-container blockquote { max-width: var(--dialog-width); width: auto;=
 margin-inline: auto; text-wrap: balance; font-size: 0.89em; padding: 0.6em=
 1em; color: inherit; background: light-dark(rgba(251, 251, 251, 0.5), rgba=
(37, 35, 35, 0.5)); border-top-color: ; border-top-style: ; border-right-co=
lor: ; border-right-style: ; border-right-width: ; border-bottom-color: ; b=
order-bottom-style: ; border-bottom-width: ; border-left-color: ; border-le=
ft-style: ; border-image-source: ; border-image-slice: ; border-image-width=
: ; border-image-outset: ; border-image-repeat: ; border-left-width: 2px; b=
order-top-width: 2px; clip-path: polygon(0px 0px, calc(100% - 12px) -4px, c=
alc(100% + 2px) 12px, 100% 100%, 12px 100%, -4px calc(100% - 12px), 0px 0px=
); }

.markup-container.small { font-size: 1.2rem; }

.markup-container span.local-datetime { font-weight: 700; }

.markup-container .sponsor-list { line-height: 1.6; font-size: 0.84rem; }

.markup-container .patreon-plug { padding-block-start: 1rem; display: flex;=
 flex-direction: column; align-items: center; font-size: 1.3rem; }

@media (max-width: 699px) {
  .markup-container .patreon-plug { font-size: 1rem; }
}

.markup-container img[src$=3D".svg"][title$=3D"for-dark"], .markup-containe=
r embed[src$=3D".svg"][title$=3D"for-dark"] { filter: invert(87%) hue-rotat=
e(180deg); }

.markup-container img[src$=3D".svg"]:not([title$=3D"for-dark"]), .markup-co=
ntainer embed[src$=3D".svg"]:not([title$=3D"for-dark"]) { filter: none; }

@media (prefers-color-scheme: dark) {
  .markup-container img[src$=3D".svg"][title$=3D"for-dark"], .markup-contai=
ner embed[src$=3D".svg"][title$=3D"for-dark"] { filter: none; }
  .markup-container img[src$=3D".svg"]:not([title$=3D"for-dark"]), .markup-=
container embed[src$=3D".svg"]:not([title$=3D"for-dark"]) { filter: invert(=
87%) hue-rotate(180deg); }
}

.markup-container img[src$=3D".svg"] html.prez[title$=3D"for-dark"], .marku=
p-container embed[src$=3D".svg"] html.prez[title$=3D"for-dark"] { filter: n=
one; }

.markup-container img[src$=3D".svg"] html.prez:not([title$=3D"for-dark"]), =
.markup-container embed[src$=3D".svg"] html.prez:not([title$=3D"for-dark"])=
 { filter: invert(87%) hue-rotate(180deg); }

.markup-container > :last-child, .disclosure > :last-child, .playwall > :la=
st-child, blockquote > :last-child { margin-block-end: 0.2em !important; }

.markup-container > :last-child.code-block, .disclosure > :last-child.code-=
block, .playwall > :last-child.code-block, blockquote > :last-child.code-bl=
ock { margin-block-end: 0.6em !important; }

html.snap * { overflow: visible !important; }

html.snap .markup-container p > embed { min-width: 100%; }

html.snap .markup-container figure.code-block, html.snap .markup-container =
figure.code-block code { background: transparent !important; border: none !=
important; }

html.snap .markup-container figure.code-block code { min-width: 1920px; max=
-width: 3840px; width: auto; display: inline-block; white-space: pre-wrap; =
}

html.snap .markup-container figure.code-block .language-tag { display: none=
 !important; }

html.snap [data-kind=3D"diagram"] { width: 1920px !important; max-width: in=
itial !important; }

html.snap .snap-progress { position: fixed; top: 0px; left: 0px; width: 100=
%; height: 100%; background: rgba(0, 0, 0, 0.5); z-index: 1000; display: fl=
ex; align-items: center; justify-content: center; font-size: 1.5rem; color:=
 rgb(255, 255, 255); }

html.snap .floating-page-metadata { display: none; }

html { font-family: var(--font-text); background: var(--html-bg); color: li=
ght-dark(rgb(26, 26, 30), rgb(224, 224, 224)); font-size: var(--font-size-b=
ase); scroll-padding-top: 20px; color-scheme: light dark; }

@media (min-width: 700px) {
  html { font-size: calc(var(--font-size-base) * 1.05); }
}

@media (min-width: 1400px) {
  html { font-size: calc(var(--font-size-base) * 1.12); }
}

body { line-height: var(--line-height); }

html[data-theme=3D"light"] { color-scheme: light; }

html[data-theme=3D"dark"] { color-scheme: dark; }

.body-inner { display: flex; flex-direction: column; align-items: stretch; =
justify-content: stretch; min-height: 100vh; }

.body-inner .content { flex-grow: 1; }

.body-inner .content main { min-height: 100%; }

.button-row { display: flex; gap: 1em; flex-wrap: wrap; align-items: center=
; justify-content: center; }

.button { font-family: var(--ui-font); border-radius: var(--border-radius);=
 background: var(--accent-color); padding: 0px 1rem; height: 36px; text-dec=
oration: none; text-align: center; vertical-align: middle; display: flex; a=
lign-items: center; justify-content: center; transition: background 0.3s, t=
ransform 0.3s; }

.button, .button:visited { color: rgb(255, 255, 255); }

.button, .button:hover { text-decoration: none; }

.button:hover { background: color-mix(in srgb,white 5%,var(--accent-color))=
; transform: scale(0.99); }

.button.disabled { background: rgb(234, 234, 234); }

.button.secondary { background: light-dark(color-mix(in srgb,black 20%,var(=
--accent-color)),color-mix(in srgb,black 35%,var(--accent-color))); }

.button.large { font-size: 1rem; padding: 1.2rem 0.8rem; }

.button.large img { margin-right: 0.4em; width: 1.4em; height: 1.4em; }

.button .label { white-space: nowrap; }

.button img { margin-right: 0.7rem; width: 1.2em; height: 1.2em; }

.medium-and-up { display: none; }

@media (min-width: 700px) {
  .medium-and-up { display: initial; }
}

.bottom-nav { padding: 2rem 0px; display: flex; flex-flow: wrap; align-item=
s: center; justify-content: space-between; }

.reading-time { display: flex; align-items: center; gap: 0.4em; user-select=
: none; }

.reading-time abbr { text-decoration: none; }

.future-indicator, .draft-indicator, .ongoing-indicator, .exclusive-indicat=
or, .complete-indicator { color: light-dark(white, white); background: var(=
--link-color); border-radius: 1em; padding: 0.1em 0.8em; vertical-align: mi=
ddle; font-size: 0.7em; font-weight: 500; display: inline-block; }

.ongoing-indicator, .complete-indicator { background: var(--link-color); }

.exclusive-indicator { background: var(--exclusive-chip-bg-color); color: v=
ar(--exclusive-chip-text-color); }

main { display: flex; flex-direction: row; justify-content: center; align-i=
tems: flex-start; }

main > .table-of-contents menu { display: none; }

main > * { flex: 1 100 300px; }

main > .page-html { flex-grow: 0; flex-shrink: 1; flex-basis: var(--page-wi=
dth); background: light-dark(rgba(255, 255, 255, 0.4), rgba(0, 0, 0, 0.4));=
 overflow: hidden; padding: 0px; margin: 0px; min-height: calc(-150px + 100=
vh); }

main .page-html-padded { padding-block: var(--page-padding-block); padding-=
inline: var(--page-padding-inline); }

main .page-html-padded .page-thumbnail-container.main-thumbnail { max-width=
: calc(100% + 2 * var(--page-padding-inline)); width: calc(100% + 2 * var(-=
-page-padding-inline)); margin-inline-start: calc(-1 * var(--page-padding-i=
nline)); margin-block-start: calc(-1 * var(--page-padding-block) - 2px); }

@media (min-width: 950px) {
  main > .table-of-contents { min-width: 320px; padding: 1em 2em; flex-shri=
nk: 1; }
  main > .table-of-contents menu { padding: 1em; display: inline-block; wid=
th: auto; border-radius: var(--border-radius); background: light-dark(rgba(=
255, 255, 255, 0.4), rgba(0, 0, 0, 0.4)); }
}

@media (min-width: 1400px) {
  main > .table-of-contents { min-width: 400px; }
}

main .table-of-contents { font-size: 0.84rem; }

@media (min-width: 700px) {
  main .table-of-contents { position: sticky; top: 60px; max-height: calc(-=
100px + 100vh); overflow-y: auto; }
}

main .table-of-contents a { color: inherit; }

main .table-of-contents h1, main .table-of-contents h2, main .table-of-cont=
ents h3, main .table-of-contents h4, main .table-of-contents h5, main .tabl=
e-of-contents h6 { font-family: var(--font-display); padding-top: 0px; }

main .table-of-contents h1, main .table-of-contents h1 a, main .table-of-co=
ntents h2, main .table-of-contents h2 a, main .table-of-contents h3, main .=
table-of-contents h3 a, main .table-of-contents h4, main .table-of-contents=
 h4 a, main .table-of-contents h5, main .table-of-contents h5 a, main .tabl=
e-of-contents h6, main .table-of-contents h6 a { color: inherit; }

main .table-of-contents h1 { font-size: 1.15rem; }

main .table-of-contents h2 { font-size: 1.12rem; }

main .table-of-contents h3, main .table-of-contents h4, main .table-of-cont=
ents h5, main .table-of-contents h6 { font-size: 1rem; }

main .table-of-contents a { text-decoration: none; }

main .table-of-contents menu { font-size: inherit; }

main .table-of-contents menu li { list-style-type: none; margin: 0px; paddi=
ng: 0px 0px 0px 0.4em; line-height: 1.2; color: light-dark(rgb(26, 26, 26),=
 rgb(240, 240, 240)); border-left: 2px solid light-dark(rgb(217, 217, 217),=
 rgb(65, 65, 65)); }

main .table-of-contents menu li.past { border-color: var(--accent-color); }

main .table-of-contents menu li:not(.reading):hover { background: color-mix=
(in srgb,var(--accent-color) 20%,transparent); border-color: color-mix(in s=
rgb,var(--accent-color) 20%,transparent); }

main .table-of-contents menu li.reading { border-color: var(--accent-color)=
; background: var(--accent-color); color: rgb(255, 255, 255); position: rel=
ative; }

main .table-of-contents menu li a { color: inherit; display: inline-block; =
width: 100%; padding-top: 0.4em; padding-bottom: 0.4em; text-decoration: no=
ne !important; }

main .table-of-contents menu li[data-level=3D"3"] a { padding-left: 0.5em; =
}

main .table-of-contents menu li[data-level=3D"4"] a { padding-left: 1em; }

main .table-of-contents menu li[data-level=3D"5"] a { padding-left: 1.5em; =
}

main .table-of-contents menu li[data-level=3D"6"] a { padding-left: 2em; }

.series-nav { padding-top: 0.4rem; padding-bottom: 2.8rem; }

.series-nav .series-title { font-weight: 200; font-size: 1rem; }

.series-nav .series-title a { font-weight: 350; }

.series-nav .series-circles { font-family: var(--font-ui); padding-top: 0.6=
rem; display: flex; flex-flow: wrap; align-items: center; gap: 0.15rem; }

.series-nav .series-circles .series-circle { font-size: 0.9rem; font-weight=
: 600; border-radius: 0.3rem; width: 1.8rem; height: 1.8rem; display: flex;=
 align-items: center; justify-content: center; text-decoration: none; }

.series-nav .series-circles .series-circle h2 { font-family: inherit; font-=
size: inherit; padding: 0px; margin: 0px; }

.series-nav .series-circles .series-circle.series-circle-past, .series-nav =
.series-circles .series-circle.series-circle-current { background: var(--li=
nk-color); color: light-dark(rgb(250, 250, 250), rgb(26, 26, 26)); }

.series-nav .series-circles .series-circle.series-circle-future { color: in=
herit; background: light-dark(rgb(241, 241, 241), color-mix(in srgb, rgb(42=
, 42, 42) 95%, white)); }

.series-nav .series-circles .series-circle.series-circle-future:hover { bac=
kground: light-dark(rgb(229, 229, 229), rgb(58, 58, 58)); }

.nav-bottom { background: var(--accent-color); font-family: var(--font-ui);=
 font-size: 0.9rem; padding: 1em 2em; z-index: 800; height: 150px; display:=
 flex; flex-direction: column; align-items: center; justify-content: center=
; gap: 0.6em; }

.nav-bottom .nav-outlinks { display: flex; flex-flow: wrap; justify-content=
: center; gap: 1.4rem; }

.nav-bottom .nav-outlinks.icons { gap: 1.2em; }

.nav-bottom .nav-outlinks.icons a { display: flex; flex-direction: row; ali=
gn-items: center; }

.nav-bottom .nav-outlinks.icons .inline-icon-container { margin-block: 0.4e=
m; margin-inline-end: 0.4em; }

.nav-bottom .nav-outlinks.icons .inline-icon-container svg { --side: 2em; w=
idth: var(--side); height: var(--side); vertical-align: middle; fill: rgb(2=
55, 255, 255); }

.nav-bottom .nav-outlinks a { color: rgb(255, 255, 255); text-decoration-co=
lor: rgb(255, 255, 255); transition: 0.2s; }

.nav-bottom .nav-outlinks a:hover { transform: scale(1.1) rotate(0.5deg); }

@media (max-width: 699px) {
  .hide-when-small { display: none; }
}

@keyframes loading-bounce {=20
  0%, 100% { transform: rotate(0deg); }
  40% { transform: rotate(2deg); }
  60% { transform: rotate(2deg); }
  80% { transform: rotate(-2deg); }
}

.inline-icon { width: 0.92em; height: 0.92em; }

#page-topnav { font-family: var(--font-ui); height: var(--topnav-height); z=
-index: 5; padding: 0px; margin: 0px; }

.modal { z-index: 100; }

media-player { line-height: 0; aspect-ratio: initial; }

media-player video { height: 100%; }

figure.code-block { width: 100%; }

.page-thumbnail-container { pointer-events: none; border-top: 1px solid rgb=
a(255, 255, 255, 0.1); margin-block-end: -6.1em; position: relative; displa=
y: inline-block; overflow-x: hidden; }

.page-thumbnail-container img { mask-image: linear-gradient(black 10%, tran=
sparent 92%); }

.page-thumbnail { height: auto; overflow: hidden; display: block; }

@keyframes svelte-17j7uvn-fade-in {=20
  0% { opacity: 0; }
  100% { opacity: 1; }
}

.modal.svelte-17j7uvn { animation: 0.24s ease-out 0s 1 normal none running =
svelte-17j7uvn-fade-in; position: fixed; top: 0px; left: 0px; width: 100%; =
height: 100vh; background-color: rgba(0, 0, 0, 0.5); display: flex; justify=
-content: center; align-items: center; z-index: 1000; }

@keyframes svelte-17j7uvn-rotate-and-slide-up-and-fade-in {=20
  0% { transform: perspective(1000px) rotateX(20deg) scale(0.8); opacity: 0=
; }
  100% { transform: perspective(1000px) rotateX(0deg) scale(1); opacity: 1;=
 }
}

.modal-content.svelte-17j7uvn {
  animation: 0.24s ease-out 0s 1 normal none running svelte-17j7uvn-rotate-=
and-slide-up-and-fade-in; background-color: light-dark(white, rgb(26, 26, 2=
6)); color: light-dark(black, white); padding: 1.8em 1.6em; border-radius: =
8px; box-shadow: rgba(0, 0, 0, 0.2) 0px 2px 8px; max-width: 30em; max-heigh=
t: 90%; overflow: auto; position: relative;
  & p {
  padding-bottom: 1em; margin: 0px;
  &:last-child { padding-bottom: 0px; }
}
}

.button-row.svelte-17j7uvn {
  position: absolute; right: 0px; top: 0px; padding: 0.8em; display: flex; =
justify-content: flex-end;
  & span:where(.svelte-17j7uvn) { cursor: pointer; }
}

.search-container.svelte-1tjjmrr { position: relative; }

.completions.svelte-1tjjmrr {
  position: absolute; top: 100%; left: 0px; min-width: 100%; width: 200%; m=
ax-width: 60vw; background: light-dark(white, rgb(26, 26, 26)); border: 1px=
 solid light-dark(rgb(204, 204, 204), rgb(68, 68, 68)); border-radius: 4px;=
 z-index: 10; font-weight: 400; font-size: 0.9rem; overflow-x: scroll;
  & .completion:where(.svelte-1tjjmrr) {
  display: flex; align-items: center; padding: 0.2em 0.4em; gap: 0.4em; whi=
te-space: pre; flex-shrink: 0;
  & svg { flex-shrink: 0; }
  &.active { background: light-dark(rgb(230, 240, 255), rgb(42, 42, 42)); }
}
}

input[type=3D"search"].svelte-1tjjmrr {
  border: 1px solid light-dark(rgb(190, 190, 190), rgb(88, 88, 88)); backgr=
ound: light-dark(rgb(251, 251, 251), rgb(69, 69, 69)); border-radius: 4px; =
color: light-dark(rgb(49, 49, 49), rgb(240, 240, 240)); transition: opacity=
 0.2s; width: 100%; font-size: 0.95rem; padding: 0.3em 0.6em;
  &.loading { animation: 0.6s ease-in-out 0s infinite normal none running l=
oading-bounce; opacity: 0.6; }
}

a.svelte-1tjjmrr { color: light-dark(rgb(49, 49, 49), rgb(240, 240, 240)); =
text-decoration: none; }

.circle.svelte-dqjlks { height: var(--size); width: var(--size); border-col=
or: var(--color) transparent var(--color) var(--color); border-width: calc(=
var(--size) / 15); border-style: solid; border-image: initial; border-radiu=
s: 50%; animation: var(--duration) linear 0s infinite normal none running s=
velte-dqjlks-rotate; }

.pause-animation.svelte-dqjlks { animation-play-state: paused; }

@keyframes svelte-dqjlks-rotate {=20
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.circle.svelte-1w4sjib { width: var(--size); height: var(--size); box-sizin=
g: border-box; position: relative; border-width: 3px; border-style: solid; =
border-right-color: transparent; border-bottom-color: transparent; border-l=
eft-color: transparent; border-image: initial; border-top-color: var(--colo=
rOuter); border-radius: 50%; animation: svelte-1w4sjib-circleSpin var(--dur=
ationOuter) linear infinite; }

.circle.svelte-1w4sjib::before, .circle.svelte-1w4sjib::after { content: ""=
; box-sizing: border-box; position: absolute; border: 3px solid transparent=
; border-radius: 50%; }

.circle.svelte-1w4sjib::after { border-top-color: var(--colorInner); inset:=
 9px; animation: svelte-1w4sjib-circleSpin var(--durationInner) linear infi=
nite; }

.circle.svelte-1w4sjib::before { border-top-color: var(--colorCenter); inse=
t: 3px; animation: svelte-1w4sjib-circleSpin var(--durationCenter) linear i=
nfinite; }

.pause-animation.svelte-1w4sjib, .pause-animation.svelte-1w4sjib::after, .p=
ause-animation.svelte-1w4sjib::before { animation-play-state: paused; }

@keyframes svelte-1w4sjib-circleSpin {=20
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.wrapper.svelte-7wj78d { width: var(--size); height: var(--size); display: =
flex; justify-content: center; align-items: center; line-height: 0; box-siz=
ing: border-box; }

.inner.svelte-7wj78d { transform: scale(calc(var(--floatSize) / 52)); }

.ball-container.svelte-7wj78d { animation: svelte-7wj78d-ballTwo var(--dura=
tion) infinite; width: 44px; height: 44px; flex-shrink: 0; position: relati=
ve; }

.single-ball.svelte-7wj78d { width: 44px; height: 44px; position: absolute;=
 }

.ball.svelte-7wj78d { width: 20px; height: 20px; border-radius: 50%; positi=
on: absolute; animation: svelte-7wj78d-ballOne var(--duration) infinite eas=
e; }

.pause-animation.svelte-7wj78d { animation-play-state: paused; }

.ball-top-left.svelte-7wj78d { background-color: var(--ballTopLeftColor); t=
op: 0px; left: 0px; }

.ball-top-right.svelte-7wj78d { background-color: var(--ballTopRightColor);=
 top: 0px; left: 24px; }

.ball-bottom-left.svelte-7wj78d { background-color: var(--ballBottomLeftCol=
or); top: 24px; left: 0px; }

.ball-bottom-right.svelte-7wj78d { background-color: var(--ballBottomRightC=
olor); top: 24px; left: 24px; }

@keyframes svelte-7wj78d-ballOne {=20
  0% { position: absolute; }
  50% { top: 12px; left: 12px; position: absolute; opacity: 0.5; }
  100% { position: absolute; }
}

@keyframes svelte-7wj78d-ballTwo {=20
  0% { transform: rotate(0deg) scale(1); }
  50% { transform: rotate(360deg) scale(1.3); }
  100% { transform: rotate(720deg) scale(1); }
}

.wrapper.svelte-1bsg8wv { position: relative; width: var(--size); height: v=
ar(--size); }

.circle.svelte-1bsg8wv { position: absolute; width: var(--size); height: va=
r(--size); background-color: var(--color); border-radius: 100%; opacity: 0.=
6; top: 0px; left: 0px; animation-fill-mode: both; animation-name: svelte-1=
bsg8wv-bounce !important; }

.pause-animation.svelte-1bsg8wv { animation-play-state: paused; }

@keyframes svelte-1bsg8wv-bounce {=20
  0%, 100% { transform: scale(0); }
  50% { transform: scale(1); }
}

.svelte-rhgdjk { overflow: hidden; position: relative; text-indent: -9999px=
; display: inline-block; background: rgb(255, 136, 102); border-radius: 50%=
; transform: rotate(90deg); transform-origin: 50% 50%; animation: svelte-rh=
gdjk-plus-loader-background var(--duration) infinite ease-in-out; }

.svelte-rhgdjk::after { background: rgb(255, 136, 102); border-radius: 50% =
0px 0px 50%; content: ""; position: absolute; right: 50%; top: 0px; width: =
50%; height: 100%; transform-origin: 100% 50%; animation: svelte-rhgdjk-plu=
s-loader-top var(--duration) infinite linear; }

.svelte-rhgdjk::before { background: rgb(255, 204, 102); border-radius: 50%=
 0px 0px 50%; content: ""; position: absolute; right: 50%; top: 0px; width:=
 50%; height: 100%; transform-origin: 100% 50%; animation: svelte-rhgdjk-pl=
us-loader-bottom var(--duration) infinite linear; }

.pause-animation.svelte-rhgdjk, .pause-animation.svelte-rhgdjk::before, .pa=
use-animation.svelte-rhgdjk::after { animation-play-state: paused; }

@keyframes svelte-rhgdjk-plus-loader-top {=20
  2.5% { background: rgb(255, 136, 102); transform: rotateY(0deg); animatio=
n-timing-function: ease-in; }
  13.75% { background: rgb(255, 67, 13); transform: rotateY(90deg); animati=
on-timing-function: step-start; }
  13.76% { background: rgb(255, 174, 13); transform: rotateY(90deg); animat=
ion-timing-function: ease-out; }
  25% { background: rgb(255, 204, 102); transform: rotateY(180deg); }
  27.5% { background: rgb(255, 204, 102); transform: rotateY(180deg); anima=
tion-timing-function: ease-in; }
  41.25% { background: rgb(255, 174, 13); transform: rotateY(90deg); animat=
ion-timing-function: step-start; }
  41.26% { background: rgb(44, 198, 66); transform: rotateY(90deg); animati=
on-timing-function: ease-out; }
  50% { background: rgb(102, 221, 119); transform: rotateY(0deg); }
  52.5% { background: rgb(102, 221, 119); transform: rotateY(0deg); animati=
on-timing-function: ease-in; }
  63.75% { background: rgb(44, 198, 66); transform: rotateY(90deg); animati=
on-timing-function: step-start; }
  63.76% { background: rgb(19, 134, 210); transform: rotateY(90deg); animat=
ion-timing-function: ease-out; }
  75% { background: rgb(68, 170, 238); transform: rotateY(180deg); }
  77.5% { background: rgb(68, 170, 238); transform: rotateY(180deg); animat=
ion-timing-function: ease-in; }
  91.25% { background: rgb(19, 134, 210); transform: rotateY(90deg); animat=
ion-timing-function: step-start; }
  91.26% { background: rgb(255, 67, 13); transform: rotateY(90deg); animati=
on-timing-function: ease-in; }
  100% { background: rgb(255, 136, 102); transform: rotateY(0deg); animatio=
n-timing-function: step-start; }
}

@keyframes svelte-rhgdjk-plus-loader-bottom {=20
  0% { background: rgb(255, 204, 102); animation-timing-function: step-star=
t; }
  50% { background: rgb(255, 204, 102); animation-timing-function: step-sta=
rt; }
  75% { background: rgb(68, 170, 238); animation-timing-function: step-star=
t; }
  100% { background: rgb(68, 170, 238); animation-timing-function: step-sta=
rt; }
}

@keyframes svelte-rhgdjk-plus-loader-background {=20
  0% { background: rgb(255, 136, 102); transform: rotate(180deg); }
  25% { background: rgb(255, 136, 102); transform: rotate(180deg); animatio=
n-timing-function: step-start; }
  27.5% { background: rgb(102, 221, 119); transform: rotate(90deg); }
  50% { background: rgb(102, 221, 119); transform: rotate(90deg); animation=
-timing-function: step-start; }
  52.5% { background: rgb(102, 221, 119); transform: rotate(0deg); }
  75% { background: rgb(102, 221, 119); transform: rotate(0deg); animation-=
timing-function: step-start; }
  77.5% { background: rgb(255, 136, 102); transform: rotate(270deg); }
  100% { background: rgb(255, 136, 102); transform: rotate(270deg); animati=
on-timing-function: step-start; }
}

.wrapper.svelte-1w1ueev { width: var(--size); height: var(--size); }

.circle.svelte-1w1ueev { width: var(--size); height: var(--size); backgroun=
d-color: var(--color); border-radius: 100%; display: inline-block; animatio=
n: svelte-1w1ueev-scaleOut var(--duration) ease-in-out infinite; }

.pause-animation.svelte-1w1ueev { animation-play-state: paused; }

@keyframes svelte-1w1ueev-scaleOut {=20
  0% { transform: scale(0); }
  100% { transform: scale(1); opacity: 0; }
}

.wrapper.svelte-nfuakd { width: var(--size); height: var(--stroke); transfo=
rm: scale(calc(var(--floatSize) / 75)); display: flex; justify-content: cen=
ter; align-items: center; }

.line.svelte-nfuakd { width: var(--size); height: var(--stroke); background=
: var(--color); border-radius: var(--stroke); transform-origin: center cent=
er; animation: svelte-nfuakd-spineLine var(--duration) ease infinite; }

.pause-animation.svelte-nfuakd { animation-play-state: paused; }

@keyframes svelte-nfuakd-spineLine {=20
  0% { transform: rotate(-20deg); height: 5px; width: 75px; }
  5% { height: 5px; width: 75px; }
  30% { transform: rotate(380deg); height: 5px; width: 75px; }
  40% { transform: rotate(360deg); height: 5px; width: 75px; }
  55% { transform: rotate(0deg); height: 5px; width: 5px; }
  65% { transform: rotate(0deg); height: 5px; width: 85px; }
  68% { transform: rotate(0deg); height: 5px; }
  75% { transform: rotate(0deg); height: 5px; width: 1px; }
  78% { height: 5px; width: 5px; }
  90% { height: 5px; width: 75px; transform: rotate(0deg); }
  99%, 100% { height: 5px; width: 75px; transform: rotate(-20deg); }
}

.wrapper.svelte-cihful { height: var(--size); width: var(--size); display: =
inline-block; text-align: center; font-size: 10px; }

.rect.svelte-cihful { height: 100%; width: 10%; display: inline-block; marg=
in-right: 4px; transform: scaleY(0.4); background-color: var(--color); anim=
ation: svelte-cihful-stretch var(--duration) ease-in-out infinite; }

.pause-animation.svelte-cihful { animation-play-state: paused; }

@keyframes svelte-cihful-stretch {=20
  0%, 40%, 100% { transform: scaleY(0.4); }
  20% { transform: scaleY(1); }
}

.wrapper.svelte-bnawe9 { height: calc(var(--size) / 15); width: calc(var(--=
size) * 2); background-color: var(--rgba); position: relative; overflow: hi=
dden; background-clip: padding-box; }

.lines.svelte-bnawe9 { height: calc(var(--size) / 15); background-color: va=
r(--color); }

.small-lines.svelte-bnawe9 { position: absolute; overflow: hidden; backgrou=
nd-clip: padding-box; display: block; border-radius: 2px; will-change: left=
, right; animation-fill-mode: forwards; }

.small-lines.\31 .svelte-bnawe9 { animation: var(--duration) cubic-bezier(.=
65,.815,.735,.395) 0s infinite normal none running svelte-bnawe9-long; }

.small-lines.\32 .svelte-bnawe9 { animation: var(--duration) cubic-bezier(.=
165,.84,.44,1) calc((var(--duration) + .1) / 2) infinite normal none runnin=
g svelte-bnawe9-short; }

.pause-animation.svelte-bnawe9 { animation-play-state: paused; }

@keyframes svelte-bnawe9-long {=20
  0% { left: -35%; right: 100%; }
  60% { left: 100%; right: -90%; }
  100% { left: 100%; right: -90%; }
}

@keyframes svelte-bnawe9-short {=20
  0% { left: -200%; right: 100%; }
  60% { left: 107%; right: -8%; }
  100% { left: 107%; right: -8%; }
}

.wrapper.svelte-c0n7a9 { width: var(--size); height: var(--size); }

.circle.svelte-c0n7a9 { border-radius: 100%; position: absolute; opacity: 0=
; width: var(--size); height: var(--size); background-color: var(--color); =
animation: svelte-c0n7a9-bounce var(--duration) linear infinite; }

.pause-animation.svelte-c0n7a9 { animation-play-state: paused; }

@keyframes svelte-c0n7a9-bounce {=20
  0% { opacity: 0; transform: scale(0); }
  5% { opacity: 1; }
  100% { opacity: 0; transform: scale(1); }
}

.wrapper.svelte-kxapcj { position: relative; width: var(--size); height: va=
r(--size); }

.border.svelte-kxapcj { border-color: var(--color); position: absolute; top=
: 0px; left: 0px; width: var(--size); height: var(--size); opacity: 0.4; pe=
rspective: 800px; border-width: 6px; border-style: solid; border-image: ini=
tial; border-radius: 100%; }

.border.\31 .svelte-kxapcj { animation: var(--duration) linear 0s infinite =
normal none running svelte-kxapcj-ringOne; }

.border.\32 .svelte-kxapcj { animation: var(--duration) linear 0s infinite =
normal none running svelte-kxapcj-ringTwo; }

.pause-animation.svelte-kxapcj { animation-play-state: paused; }

@keyframes svelte-kxapcj-ringOne {=20
  0% { transform: rotateX(0deg) rotateY(0deg) rotate(0deg); }
  100% { transform: rotateX(360deg) rotateY(180deg) rotate(360deg); }
}

@keyframes svelte-kxapcj-ringTwo {=20
  0% { transform: rotateX(0deg) rotateY(0deg) rotate(0deg); }
  100% { transform: rotateX(180deg) rotateY(360deg) rotate(360deg); }
}

.wrapper.svelte-14x3x60 { height: var(--size); width: var(--size); display:=
 flex; align-items: center; justify-content: center; }

.dot.svelte-14x3x60 { height: var(--dotSize); width: var(--dotSize); backgr=
ound-color: var(--color); margin: 2px; display: inline-block; border-radius=
: 100%; animation: svelte-14x3x60-sync var(--duration) ease-in-out infinite=
 alternate both running; }

.pause-animation.svelte-14x3x60 { animation-play-state: paused; }

@-webkit-keyframes svelte-14x3x60-sync {=20
  33% { transform: translateY(10px); }
  66% { transform: translateY(-10px); }
  100% { transform: translateY(0px); }
}

@keyframes svelte-14x3x60-sync {=20
  33% { transform: translateY(10px); }
  66% { transform: translateY(-10px); }
  100% { transform: translateY(0px); }
}

.wrapper.svelte-1lgkc8y { width: var(--size); height: calc(var(--size) / 2)=
; overflow: hidden; }

.rainbow.svelte-1lgkc8y { width: var(--size); height: var(--size); border-l=
eft-color: transparent; border-bottom-color: transparent; border-top-color:=
 var(--color); border-right-color: var(--color); box-sizing: border-box; tr=
ansform: rotate(-200deg); border-radius: 50%; border-style: solid; animatio=
n: var(--duration) ease-in-out 0s infinite normal none running svelte-1lgkc=
8y-rotate; }

.pause-animation.svelte-1lgkc8y { animation-play-state: paused; }

@keyframes svelte-1lgkc8y-rotate {=20
  0% { border-width: 10px; }
  25% { border-width: 3px; }
  50% { transform: rotate(115deg); border-width: 10px; }
  75% { border-width: 3px; }
  100% { border-width: 10px; }
}

.wrapper.svelte-x7zza7 { width: calc(var(--size) * 1.3); height: calc(var(-=
-size) * 1.3); display: flex; justify-content: center; align-items: center;=
 }

.firework.svelte-x7zza7 { border: calc(var(--size) / 10) dotted var(--color=
); width: var(--size); height: var(--size); border-radius: 50%; animation: =
svelte-x7zza7-fire var(--duration) cubic-bezier(.165,.84,.44,1) infinite; }

.pause-animation.svelte-x7zza7 { animation-play-state: paused; }

@keyframes svelte-x7zza7-fire {=20
  0% { opacity: 1; transform: scale(0.1); }
  25% { opacity: 0.85; }
  100% { transform: scale(1); opacity: 0; }
}

.wrapper.svelte-1w8rpx6 { position: relative; display: flex; justify-conten=
t: center; align-items: center; width: var(--size); height: calc(var(--size=
) / 2.5); }

.cube.svelte-1w8rpx6 { position: absolute; top: 0px; width: calc(var(--size=
) / 5); height: calc(var(--size) / 2.5); background-color: var(--color); an=
imation: svelte-1w8rpx6-motion var(--duration) cubic-bezier(.895,.03,.685,.=
22) infinite; }

.pause-animation.svelte-1w8rpx6 { animation-play-state: paused; }

@keyframes svelte-1w8rpx6-motion {=20
  0% { opacity: 1; }
  50% { opacity: 0; }
  100% { opacity: 1; }
}

.wrapper.svelte-1rvptk { position: relative; display: flex; justify-content=
: center; align-items: center; width: var(--size); height: var(--size); }

.ring.svelte-1rvptk { position: absolute; border: 2px solid var(--color); b=
order-radius: 50%; background-color: transparent; animation: svelte-1rvptk-=
motion var(--duration) ease infinite; }

.pause-animation.svelte-1rvptk { animation-play-state: paused; }

@keyframes svelte-1rvptk-motion {=20
  0% { transform: translateY(var(--motionOne)); }
  50% { transform: translateY(var(--motionTwo)); }
  100% { transform: translateY(var(--motionThree)); }
}

.wrapper.svelte-1uhddr4 { height: var(--size); width: var(--size); display:=
 flex; justify-content: center; align-items: center; }

.spinner.svelte-1uhddr4 { height: var(--size); width: var(--size); animatio=
n: svelte-1uhddr4-rotate var(--duration) infinite linear; }

.dot.svelte-1uhddr4 { width: 60%; height: 60%; display: inline-block; posit=
ion: absolute; top: 0px; background-color: var(--color); border-radius: 100=
%; animation: svelte-1uhddr4-bounce var(--duration) infinite ease-in-out; }

.pause-animation.svelte-1uhddr4 { animation-play-state: paused; }

@keyframes svelte-1uhddr4-rotate {=20
  100% { transform: rotate(360deg); }
}

@keyframes svelte-1uhddr4-bounce {=20
  0%, 100% { transform: scale(0); }
  50% { transform: scale(1); }
}

.square.svelte-x90y { height: var(--size); width: var(--size); background-c=
olor: var(--color); animation-duration: ; animation-timing-function: ; anim=
ation-delay: ; animation-iteration-count: ; animation-direction: ; animatio=
n-play-state: ; animation-name: ; animation-timeline: ; animation-range-sta=
rt: ; animation-range-end: ; animation-fill-mode: both; perspective: 100px;=
 display: inline-block; }

.pause-animation.svelte-x90y { animation-play-state: paused; }

@keyframes svelte-x90y-squareDelay {=20
  25% { transform: rotateX(180deg) rotateY(0deg); }
  50% { transform: rotateX(180deg) rotateY(180deg); }
  75% { transform: rotateX(0deg) rotateY(180deg); }
  100% { transform: rotateX(0deg) rotateY(0deg); }
}

.wrapper.svelte-5bpnhx { position: relative; display: flex; justify-content=
: center; align-items: center; width: var(--size); height: var(--size); }

.shadow.svelte-5bpnhx { color: var(--color); font-size: var(--size); overfl=
ow: hidden; width: var(--size); height: var(--size); border-radius: 50%; ma=
rgin: 28px auto; position: relative; transform: translateZ(0px); animation:=
 svelte-5bpnhx-load var(--duration) infinite ease,svelte-5bpnhx-round var(-=
-duration) infinite ease; }

.pause-animation.svelte-5bpnhx { animation-play-state: paused; }

@keyframes svelte-5bpnhx-load {=20
  0% { box-shadow: 0px -0.83em 0px -0.4em, 0px -0.83em 0px -0.42em, 0px -0.=
83em 0px -0.44em, 0px -0.83em 0px -0.46em, 0px -0.83em 0px -0.477em; }
  5%, 95% { box-shadow: 0px -0.83em 0px -0.4em, 0px -0.83em 0px -0.42em, 0p=
x -0.83em 0px -0.44em, 0px -0.83em 0px -0.46em, 0px -0.83em 0px -0.477em; }
  10%, 59% { box-shadow: 0px -0.83em 0px -0.4em, -0.087em -0.825em 0px -0.4=
2em, -0.173em -0.812em 0px -0.44em, -0.256em -0.789em 0px -0.46em, -0.297em=
 -0.775em 0px -0.477em; }
  20% { box-shadow: 0px -0.83em 0px -0.4em, -0.338em -0.758em 0px -0.42em, =
-0.555em -0.617em 0px -0.44em, -0.671em -0.488em 0px -0.46em, -0.749em -0.3=
4em 0px -0.477em; }
  38% { box-shadow: 0px -0.83em 0px -0.4em, -0.377em -0.74em 0px -0.42em, -=
0.645em -0.522em 0px -0.44em, -0.775em -0.297em 0px -0.46em, -0.82em -0.09e=
m 0px -0.477em; }
  100% { box-shadow: 0px -0.83em 0px -0.4em, 0px -0.83em 0px -0.42em, 0px -=
0.83em 0px -0.44em, 0px -0.83em 0px -0.46em, 0px -0.83em 0px -0.477em; }
}

@keyframes svelte-5bpnhx-round {=20
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.wrapper.svelte-e653jg { height: var(--size); width: var(--size); border-ra=
dius: 100%; animation-duration: ; animation-timing-function: ; animation-de=
lay: ; animation-iteration-count: ; animation-direction: ; animation-play-s=
tate: ; animation-name: ; animation-timeline: ; animation-range-start: ; an=
imation-range-end: ; animation-fill-mode: forwards; position: relative; }

.circle-one.svelte-e653jg { top: var(--moonSize); background-color: var(--c=
olor); width: calc(var(--size) / 7); height: calc(var(--size) / 7); border-=
radius: 100%; animation-duration: ; animation-timing-function: ; animation-=
delay: ; animation-iteration-count: ; animation-direction: ; animation-play=
-state: ; animation-name: ; animation-timeline: ; animation-range-start: ; =
animation-range-end: ; animation-fill-mode: forwards; opacity: 0.8; positio=
n: absolute; }

.circle-two.svelte-e653jg { opacity: 0.1; border: calc(var(--size) / 7) sol=
id var(--color); height: var(--size); width: var(--size); border-radius: 10=
0%; box-sizing: border-box; }

.pause-animation.svelte-e653jg { animation-play-state: paused; }

@keyframes svelte-e653jg-moonStretchDelay {=20
  100% { transform: rotate(360deg); }
}

.wrapper.svelte-1cx3779 { height: var(--size); width: var(--size); position=
: relative; display: flex; justify-content: center; align-items: center; }

.wrapper.svelte-1cx3779 :where(.svelte-1cx3779) { line-height: 0; box-sizin=
g: border-box; }

.spinner-inner.svelte-1cx3779 { height: var(--size); width: var(--size); tr=
ansform: scale(calc(var(--size) / 70)); }

.mask.svelte-1cx3779 { position: absolute; border-radius: 2px; overflow: hi=
dden; backface-visibility: hidden; }

.plane.svelte-1cx3779 { background: var(--color); width: 400%; height: 100%=
; position: absolute; z-index: 100; backface-visibility: hidden; }

#top.svelte-1cx3779 .plane:where(.svelte-1cx3779) { z-index: 2000; animatio=
n: svelte-1cx3779-trans1 var(--duration) ease-in infinite 0s backwards; }

#middle.svelte-1cx3779 .plane:where(.svelte-1cx3779) { transform: translate=
Z(0px); background: var(--rgba); animation: svelte-1cx3779-trans2 var(--dur=
ation) linear infinite calc(var(--duration) / 4) backwards; }

#bottom.svelte-1cx3779 .plane:where(.svelte-1cx3779) { z-index: 2000; anima=
tion: svelte-1cx3779-trans3 var(--duration) ease-out infinite calc(var(--du=
ration) / 2) backwards; }

#top.svelte-1cx3779 { width: 53px; height: 20px; left: 20px; top: 5px; tran=
sform: skew(-15deg); z-index: 100; }

#middle.svelte-1cx3779 { width: 33px; height: 20px; left: 20px; top: 21px; =
transform: skew(-15deg, 40deg); }

#bottom.svelte-1cx3779 { width: 53px; height: 20px; top: 35px; transform: s=
kew(-15deg); }

.pause-animation.svelte-1cx3779 .plane:where(.svelte-1cx3779) { animation-p=
lay-state: paused; }

@keyframes svelte-1cx3779-trans1 {=20
  0% { transform: translate3d(53px, 0px, 0px); }
  100% { transform: translate3d(-250px, 0px, 0px); }
}

@keyframes svelte-1cx3779-trans2 {=20
  0% { transform: translate3d(-160px, 0px, 0px); }
  100% { transform: translate3d(53px, 0px, 0px); }
}

@keyframes svelte-1cx3779-trans3 {=20
  0% { transform: translate3d(53px, 0px, 0px); }
  100% { transform: translate3d(-220px, 0px, 0px); }
}

span.svelte-1jnfmql { width: var(--size); height: calc(var(--size) / 4); po=
sition: relative; display: block; }

div.svelte-1jnfmql { width: calc(var(--size) / 4); height: calc(var(--size)=
 / 4); position: absolute; left: 0%; top: 0px; border-radius: 2px; backgrou=
nd: var(--color); transform: translate(-50%) rotate(45deg) scale(0); animat=
ion: svelte-1jnfmql-diamonds var(--duration) linear infinite; }

div.svelte-1jnfmql:nth-child(1) { animation-delay: calc(var(--duration) * 2=
 / 3 * -1); }

div.svelte-1jnfmql:nth-child(2) { animation-delay: calc(var(--duration) * 2=
 / 3 * -2); }

div.svelte-1jnfmql:nth-child(3) { animation-delay: calc(var(--duration) * 2=
 / 3 * -3); }

.pause-animation.svelte-1jnfmql div:where(.svelte-1jnfmql) { animation-play=
-state: paused; }

@keyframes svelte-1jnfmql-diamonds {=20
  50% { left: 50%; transform: translate(-50%) rotate(45deg) scale(1); }
  100% { left: 100%; transform: translate(-50%) rotate(45deg) scale(0); }
}

div.svelte-db2m9w { position: relative; width: var(--size); height: var(--s=
ize); background-color: transparent; box-shadow: inset 0 0 0 2px var(--colo=
r); border-radius: 50%; }

div.svelte-db2m9w::before, div.svelte-db2m9w::after { position: absolute; c=
ontent: ""; background-color: var(--color); }

div.svelte-db2m9w::after { width: calc(var(--size) / 2.4); height: 2px; top=
: calc(var(--size) / 2); left: calc(var(--size) / 2); transform-origin: 1px=
 1px; animation: svelte-db2m9w-rotate calc(var(--duration) / 4) linear infi=
nite; }

div.svelte-db2m9w::before { width: calc(var(--size) / 3); height: 2px; top:=
 calc((var(--size) / 2)); left: calc((var(--size) / 2)); transform-origin: =
1px 1px; animation: svelte-db2m9w-rotate var(--duration) linear infinite; }

.pause-animation.svelte-db2m9w, .pause-animation.svelte-db2m9w::before, .pa=
use-animation.svelte-db2m9w::after { animation-play-state: paused; }

@keyframes svelte-db2m9w-rotate {=20
  100% { transform: rotate(360deg); }
}

.wrapper.svelte-1vzsw15 { position: relative; display: flex; justify-conten=
t: center; align-items: center; width: calc(var(--size) * 2.5); height: var=
(--size); overflow: hidden; }

.bar.svelte-1vzsw15 { position: absolute; top: calc(var(--size) / 10); widt=
h: calc(var(--size) / 5); height: calc(var(--size) / 10); margin-top: calc(=
var(--size) - var(--size) / 10); transform: skewY(0deg); background-color: =
var(--color); animation: svelte-1vzsw15-motion var(--duration) ease-in-out =
infinite; }

.pause-animation.svelte-1vzsw15 { animation-play-state: paused; }

@keyframes svelte-1vzsw15-motion {=20
  25% { transform: skewY(25deg); }
  50% { height: 100%; margin-top: 0px; }
  75% { transform: skewY(-25deg); }
}

.wrapper.svelte-bv9t2p { display: inherit; position: relative; width: var(-=
-size); height: var(--size); }

.circle.svelte-bv9t2p { position: absolute; width: var(--size); height: var=
(--size); border: thick solid var(--rgba); border-radius: 50%; opacity: 1; =
top: 0px; left: 0px; animation-iteration-count: infinite; animation-timing-=
function: cubic-bezier(0.165, 0.84, 0.44, 1), cubic-bezier(0.3, 0.61, 0.355=
, 1); animation-direction: normal, normal; animation-fill-mode: none, none;=
 animation-play-state: running, running; animation-name: svelte-bv9t2p-puff=
-1, svelte-bv9t2p-puff-2; box-sizing: border-box; }

.pause-animation.svelte-bv9t2p { animation-play-state: paused; }

@keyframes svelte-bv9t2p-puff-1 {=20
  0% { transform: scale(0); }
  100% { transform: scale(1); }
}

@keyframes svelte-bv9t2p-puff-2 {=20
  0% { opacity: 1; }
  100% { opacity: 0; }
}

.wrapper.svelte-f6hkgc { width: var(--size); height: calc(var(--size) * 1.5=
); margin-left: var(--size); background: var(--color); display: inline-bloc=
k; position: relative; box-sizing: border-box; animation: svelte-f6hkgc-bum=
p var(--duration) ease-in infinite alternate; }

.wrapper.svelte-f6hkgc::after { content: ""; box-sizing: border-box; left: =
50%; top: 100%; transform: translate(-50%); position: absolute; border-top-=
style: ; border-top-width: ; border-right-color: ; border-right-style: ; bo=
rder-right-width: ; border-bottom-color: ; border-bottom-style: ; border-bo=
ttom-width: ; border-left-color: ; border-left-style: ; border-left-width: =
; border-image-source: ; border-image-slice: ; border-image-width: ; border=
-image-outset: ; border-image-repeat: ; border-top-color: var(--color); }

.pause-animation.svelte-f6hkgc { animation-play-state: paused; }

@keyframes svelte-f6hkgc-bump {=20
  0% { transform: translate(-50%, 5px); }
  100% { transform: translate(-50%, -5px); }
}

.wrapper.svelte-1ju64u { width: var(--size); height: calc(var(--size) * 1.5=
); margin-left: var(--size); margin-top: var(--size); background: var(--col=
or); display: inline-block; position: relative; box-sizing: border-box; ani=
mation: svelte-1ju64u-bump var(--duration) ease-in infinite alternate; }

.wrapper.svelte-1ju64u::after { content: ""; box-sizing: border-box; left: =
50%; bottom: 100%; transform: translate(-50%); position: absolute; border-t=
op-color: ; border-top-style: ; border-top-width: ; border-right-color: ; b=
order-right-style: ; border-right-width: ; border-bottom-style: ; border-bo=
ttom-width: ; border-left-color: ; border-left-style: ; border-left-width: =
; border-image-source: ; border-image-slice: ; border-image-width: ; border=
-image-outset: ; border-image-repeat: ; border-bottom-color: var(--color); =
}

.pause-animation.svelte-1ju64u { animation-play-state: paused; }

@keyframes svelte-1ju64u-bump {=20
  0% { transform: translate(-50%, 5px); }
  100% { transform: translate(-50%, -5px); }
}

a.svelte-18ly3b7 {
  white-space: nowrap; display: flex; flex-direction: row; align-items: cen=
ter; gap: 0.5em; background: var(--accent-color); border-radius: var(--bord=
er-radius); padding: 0.1em 0.6em; font-size: 90%; transition: 0.2s; border:=
 1px solid transparent; color: rgb(239, 239, 239);
  &, &:focus-within { text-decoration: none; }
  &:not(.disabled):hover { color: rgb(255, 255, 255); cursor: pointer; bord=
er-color: rgb(216, 216, 216); box-shadow: rgba(0, 0, 0, 0.2) 0px 0px 4px; }
  &.disabled:hover { cursor: wait; }
  &.secondary {
  background: var(--secondary-color);
  &:not(.nolabel) { border-color: var(--secondary-border-color); }
}
}

@keyframes svelte-18ly3b7-spin {=20
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.nolabel.svelte-18ly3b7 { padding-left: 0px; padding-right: 0px; }

.disabled.svelte-18ly3b7 { opacity: 0.7; }

.inlineflex.svelte-18ly3b7 { display: inline-flex; }

.icon { width: 1.1em; height: 1.1em; }

.loading.svelte-18ly3b7 .icon { animation: 1s linear 0s infinite normal non=
e running svelte-18ly3b7-spin; }

.label.svelte-18ly3b7 { padding-top: 0.15em; }

.button-container.svelte-1ntljf8 { display: flex; flex-flow: wrap; gap: 1em=
; }

.container.svelte-1w3u5c8 { background: var(--accent-color); height: 100%; =
display: flex; gap: 1.2em; align-items: center; padding-inline: var(--page-=
padding-inline); padding-block: 0.2em; }

.svelte-1w3u5c8 { font-size: 0.9rem; font-weight: 400; }

.filler.svelte-1w3u5c8 { flex-grow: 1; }

.avatar.svelte-1w3u5c8 { border-radius: 50%; }

a.svelte-1w3u5c8 {
  color: rgb(255, 255, 255); text-decoration: none; display: flex;
  &:hover { text-decoration: underline; }
}

input[type=3D"search"] { border: none !important; background: rgb(255, 255,=
 255) !important; color: rgb(0, 0, 0) !important; }

p.svelte-fr8gui { font-size: 0.85rem; }

.timestamp.svelte-j8znzg { border-bottom: 1px dotted rgb(102, 102, 102); po=
sition: relative; cursor: help; }

.tooltip.svelte-j8znzg { visibility: hidden; position: absolute; bottom: 10=
0%; left: 50%; transform: translate(-50%); background: rgb(51, 51, 51); col=
or: rgb(255, 255, 255); padding: 4px 8px; border-radius: 4px; font-size: 0.=
9em; white-space: nowrap; z-index: 1; }

.timestamp.svelte-j8znzg:hover .tooltip:where(.svelte-j8znzg) { visibility:=
 visible; }

.person.svelte-12uwxh7 {
  background: var(--secondary-color); color: rgb(255, 255, 255); border-rad=
ius: 1em; padding: 0.2em 0.6em 0.2em 0.2em; vertical-align: middle; display=
: inline-flex; align-items: center; gap: 0.4em; font-size: 0.8rem;
  & .avatar:where(.svelte-12uwxh7) { width: 1.5em; height: 1.5em; border-ra=
dius: 50%; }
}

p.svelte-18zl9y2 {
  margin-bottom: 1.2rem;
  &:last-child { margin-bottom: 0px; }
}

.error.svelte-18zl9y2 { color: red; }
------MultipartBoundary--lX7hvS8JKTK2i2c4McTi97SzhrYPP8rs0wQBsPYWAd------
